
jarvis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800bc78  0800bc78  0001bc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0bc  0800c0bc  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0bc  0800c0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c4  0800c0c4  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0800c0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202dc  2**0
                  CONTENTS
 10 .bss          00001de8  200002dc  200002dc  000202dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200020c4  200020c4  000202dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a63  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003102  00000000  00000000  00031d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00034e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce0  00000000  00000000  00035cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241c8  00000000  00000000  000369b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001266f  00000000  00000000  0005ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7c19  00000000  00000000  0006d1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134e00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b7c  00000000  00000000  00134e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc5c 	.word	0x0800bc5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	0800bc5c 	.word	0x0800bc5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LIS3DSH_WriteIO+0x4c>)
 8000ec6:	f001 f981 	bl	80021cc <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000eca:	f107 010f 	add.w	r1, r7, #15
 8000ece:	230a      	movs	r3, #10
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	480a      	ldr	r0, [pc, #40]	; (8000efc <LIS3DSH_WriteIO+0x50>)
 8000ed4:	f003 f93d 	bl	8004152 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	230a      	movs	r3, #10
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <LIS3DSH_WriteIO+0x50>)
 8000ee2:	f003 f936 	bl	8004152 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <LIS3DSH_WriteIO+0x4c>)
 8000eec:	f001 f96e 	bl	80021cc <HAL_GPIO_WritePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	200002f8 	.word	0x200002f8

08000f00 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	4818      	ldr	r0, [pc, #96]	; (8000f80 <LIS3DSH_ReadIO+0x80>)
 8000f20:	f001 f954 	bl	80021cc <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000f24:	f107 0108 	add.w	r1, r7, #8
 8000f28:	230a      	movs	r3, #10
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4815      	ldr	r0, [pc, #84]	; (8000f84 <LIS3DSH_ReadIO+0x84>)
 8000f2e:	f003 f910 	bl	8004152 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f107 0108 	add.w	r1, r7, #8
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	4811      	ldr	r0, [pc, #68]	; (8000f84 <LIS3DSH_ReadIO+0x84>)
 8000f3e:	f003 fa44 	bl	80043ca <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000f42:	2201      	movs	r2, #1
 8000f44:	2108      	movs	r1, #8
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <LIS3DSH_ReadIO+0x80>)
 8000f48:	f001 f940 	bl	80021cc <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e00b      	b.n	8000f6a <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	440b      	add	r3, r1
 8000f5a:	3210      	adds	r2, #16
 8000f5c:	443a      	add	r2, r7
 8000f5e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f62:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	3301      	adds	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbed      	blt.n	8000f52 <LIS3DSH_ReadIO+0x52>
	}
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	200002f8 	.word	0x200002f8

08000f88 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000f96:	2258      	movs	r2, #88	; 0x58
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	485b      	ldr	r0, [pc, #364]	; (8001108 <LIS3DSH_Init+0x180>)
 8000f9c:	f007 ff52 	bl	8008e44 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	78db      	ldrb	r3, [r3, #3]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	f023 030f 	bic.w	r3, r3, #15
 8000fc2:	b25a      	sxtb	r2, r3
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000fd0:	f107 030f 	add.w	r3, r7, #15
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	2020      	movs	r0, #32
 8000fda:	f7ff ff67 	bl	8000eac <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001004:	b25a      	sxtb	r2, r3
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8001012:	f107 030f 	add.w	r3, r7, #15
 8001016:	2201      	movs	r2, #1
 8001018:	4619      	mov	r1, r3
 800101a:	2024      	movs	r0, #36	; 0x24
 800101c:	f7ff ff46 	bl	8000eac <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8001028:	2388      	movs	r3, #136	; 0x88
 800102a:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 800102c:	f107 030f 	add.w	r3, r7, #15
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	2023      	movs	r0, #35	; 0x23
 8001036:	f7ff ff39 	bl	8000eac <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	785b      	ldrb	r3, [r3, #1]
 800103e:	2b20      	cmp	r3, #32
 8001040:	d858      	bhi.n	80010f4 <LIS3DSH_Init+0x16c>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <LIS3DSH_Init+0xc0>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	080010cd 	.word	0x080010cd
 800104c:	080010f5 	.word	0x080010f5
 8001050:	080010f5 	.word	0x080010f5
 8001054:	080010f5 	.word	0x080010f5
 8001058:	080010f5 	.word	0x080010f5
 800105c:	080010f5 	.word	0x080010f5
 8001060:	080010f5 	.word	0x080010f5
 8001064:	080010f5 	.word	0x080010f5
 8001068:	080010d5 	.word	0x080010d5
 800106c:	080010f5 	.word	0x080010f5
 8001070:	080010f5 	.word	0x080010f5
 8001074:	080010f5 	.word	0x080010f5
 8001078:	080010f5 	.word	0x080010f5
 800107c:	080010f5 	.word	0x080010f5
 8001080:	080010f5 	.word	0x080010f5
 8001084:	080010f5 	.word	0x080010f5
 8001088:	080010dd 	.word	0x080010dd
 800108c:	080010f5 	.word	0x080010f5
 8001090:	080010f5 	.word	0x080010f5
 8001094:	080010f5 	.word	0x080010f5
 8001098:	080010f5 	.word	0x080010f5
 800109c:	080010f5 	.word	0x080010f5
 80010a0:	080010f5 	.word	0x080010f5
 80010a4:	080010f5 	.word	0x080010f5
 80010a8:	080010e5 	.word	0x080010e5
 80010ac:	080010f5 	.word	0x080010f5
 80010b0:	080010f5 	.word	0x080010f5
 80010b4:	080010f5 	.word	0x080010f5
 80010b8:	080010f5 	.word	0x080010f5
 80010bc:	080010f5 	.word	0x080010f5
 80010c0:	080010f5 	.word	0x080010f5
 80010c4:	080010f5 	.word	0x080010f5
 80010c8:	080010ed 	.word	0x080010ed
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <LIS3DSH_Init+0x184>)
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <LIS3DSH_Init+0x188>)
 80010d0:	601a      	str	r2, [r3, #0]
			break;
 80010d2:	e00f      	b.n	80010f4 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <LIS3DSH_Init+0x184>)
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <LIS3DSH_Init+0x18c>)
 80010d8:	601a      	str	r2, [r3, #0]
			break;
 80010da:	e00b      	b.n	80010f4 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <LIS3DSH_Init+0x184>)
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <LIS3DSH_Init+0x190>)
 80010e0:	601a      	str	r2, [r3, #0]
			break;
 80010e2:	e007      	b.n	80010f4 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <LIS3DSH_Init+0x184>)
 80010e6:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LIS3DSH_Init+0x194>)
 80010e8:	601a      	str	r2, [r3, #0]
			break;
 80010ea:	e003      	b.n	80010f4 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <LIS3DSH_Init+0x184>)
 80010ee:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <LIS3DSH_Init+0x198>)
 80010f0:	601a      	str	r2, [r3, #0]
			break;
 80010f2:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80010f4:	2201      	movs	r2, #1
 80010f6:	2108      	movs	r1, #8
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <LIS3DSH_Init+0x19c>)
 80010fa:	f001 f867 	bl	80021cc <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200002f8 	.word	0x200002f8
 800110c:	20000000 	.word	0x20000000
 8001110:	3d75c28f 	.word	0x3d75c28f
 8001114:	3df5c28f 	.word	0x3df5c28f
 8001118:	3e3851ec 	.word	0x3e3851ec
 800111c:	3e75c28f 	.word	0x3e75c28f
 8001120:	3f3ae148 	.word	0x3f3ae148
 8001124:	40021000 	.word	0x40021000

08001128 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2202      	movs	r2, #2
 8001136:	4619      	mov	r1, r3
 8001138:	2028      	movs	r0, #40	; 0x28
 800113a:	f7ff fee1 	bl	8000f00 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800113e:	7d7b      	ldrb	r3, [r7, #21]
 8001140:	b29b      	uxth	r3, r3
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b29a      	uxth	r2, r3
 8001146:	7d3b      	ldrb	r3, [r7, #20]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	b21b      	sxth	r3, r3
 8001150:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2202      	movs	r2, #2
 8001158:	4619      	mov	r1, r3
 800115a:	202a      	movs	r0, #42	; 0x2a
 800115c:	f7ff fed0 	bl	8000f00 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001160:	7d7b      	ldrb	r3, [r7, #21]
 8001162:	b29b      	uxth	r3, r3
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b29a      	uxth	r2, r3
 8001168:	7d3b      	ldrb	r3, [r7, #20]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4413      	add	r3, r2
 800116e:	b29b      	uxth	r3, r3
 8001170:	b21b      	sxth	r3, r3
 8001172:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2202      	movs	r2, #2
 800117a:	4619      	mov	r1, r3
 800117c:	202c      	movs	r0, #44	; 0x2c
 800117e:	f7ff febf 	bl	8000f00 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8001182:	7d7b      	ldrb	r3, [r7, #21]
 8001184:	b29b      	uxth	r3, r3
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	7d3b      	ldrb	r3, [r7, #20]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4413      	add	r3, r2
 8001190:	b29b      	uxth	r3, r3
 8001192:	b21b      	sxth	r3, r3
 8001194:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	461a      	mov	r2, r3
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	6010      	str	r0, [r2, #0]
 80011a2:	889b      	ldrh	r3, [r3, #4]
 80011a4:	8093      	strh	r3, [r2, #4]
	
}
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffb4 	bl	8001128 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80011c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011cc:	4b31      	ldr	r3, [pc, #196]	; (8001294 <LIS3DSH_GetDataScaled+0xe4>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d6:	4b30      	ldr	r3, [pc, #192]	; (8001298 <LIS3DSH_GetDataScaled+0xe8>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800129c <LIS3DSH_GetDataScaled+0xec>
 80011e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <LIS3DSH_GetDataScaled+0xf0>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80011f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <LIS3DSH_GetDataScaled+0xe4>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <LIS3DSH_GetDataScaled+0xf4>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001216:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800129c <LIS3DSH_GetDataScaled+0xec>
 800121a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <LIS3DSH_GetDataScaled+0xf8>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001228:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800122c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <LIS3DSH_GetDataScaled+0xe4>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <LIS3DSH_GetDataScaled+0xfc>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800129c <LIS3DSH_GetDataScaled+0xec>
 8001250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <LIS3DSH_GetDataScaled+0x100>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125e:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	f107 0210 	add.w	r2, r7, #16
 800126a:	ca07      	ldmia	r2, {r0, r1, r2}
 800126c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001276:	ee06 1a90 	vmov	s13, r1
 800127a:	ee07 2a10 	vmov	s14, r2
 800127e:	ee07 3a90 	vmov	s15, r3
}
 8001282:	eeb0 0a66 	vmov.f32	s0, s13
 8001286:	eef0 0a47 	vmov.f32	s1, s14
 800128a:	eeb0 1a67 	vmov.f32	s2, s15
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004
 800129c:	00000000 	.word	0x00000000
 80012a0:	20000350 	.word	0x20000350
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000354 	.word	0x20000354
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000358 	.word	0x20000358

080012b4 <LIS3DSH_X_calibrate>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80012be:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80012c2:	ed97 7a00 	vldr	s14, [r7]
 80012c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <LIS3DSH_X_calibrate+0x50>)
 80012d8:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80012dc:	ed97 7a00 	vldr	s14, [r7]
 80012e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012e8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001308 <LIS3DSH_X_calibrate+0x54>
 80012ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <LIS3DSH_X_calibrate+0x58>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000350 	.word	0x20000350
 8001308:	44fa0000 	.word	0x44fa0000
 800130c:	20000004 	.word	0x20000004

08001310 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	ed87 0a01 	vstr	s0, [r7, #4]
 800131a:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 800131e:	ed97 7a00 	vldr	s14, [r7]
 8001322:	edd7 7a01 	vldr	s15, [r7, #4]
 8001326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800132a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800132e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <LIS3DSH_Y_calibrate+0x50>)
 8001334:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001338:	ed97 7a00 	vldr	s14, [r7]
 800133c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001340:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001344:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001364 <LIS3DSH_Y_calibrate+0x54>
 8001348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <LIS3DSH_Y_calibrate+0x58>)
 800134e:	edc3 7a00 	vstr	s15, [r3]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000354 	.word	0x20000354
 8001364:	44fa0000 	.word	0x44fa0000
 8001368:	20000008 	.word	0x20000008

0800136c <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	ed87 0a01 	vstr	s0, [r7, #4]
 8001376:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800137a:	ed97 7a00 	vldr	s14, [r7]
 800137e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001382:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001386:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800138a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <LIS3DSH_Z_calibrate+0x50>)
 8001390:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001394:	ed97 7a00 	vldr	s14, [r7]
 8001398:	edd7 7a01 	vldr	s15, [r7, #4]
 800139c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013c0 <LIS3DSH_Z_calibrate+0x54>
 80013a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <LIS3DSH_Z_calibrate+0x58>)
 80013aa:	edc3 7a00 	vstr	s15, [r3]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000358 	.word	0x20000358
 80013c0:	44fa0000 	.word	0x44fa0000
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ce:	f000 fbb9 	bl	8001b44 <HAL_Init>
  //HAL_TIM_Base_Start_IT(&htim7);//first IT

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d2:	f000 f8b7 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d6:	f000 f955 	bl	8001684 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013da:	f000 f91d 	bl	8001618 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80013de:	f006 ffed 	bl	80083bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	703b      	strb	r3, [r7, #0]
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 80013e6:	2308      	movs	r3, #8
 80013e8:	707b      	strb	r3, [r7, #1]
	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 80013ea:	23c0      	movs	r3, #192	; 0xc0
 80013ec:	70bb      	strb	r3, [r7, #2]
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 80013ee:	2307      	movs	r3, #7
 80013f0:	70fb      	strb	r3, [r7, #3]
	myAccConfigDef.interruptEnable = true;
 80013f2:	2301      	movs	r3, #1
 80013f4:	713b      	strb	r3, [r7, #4]
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4844      	ldr	r0, [pc, #272]	; (800150c <main+0x144>)
 80013fc:	f7ff fdc4 	bl	8000f88 <LIS3DSH_Init>

	LIS3DSH_X_calibrate(-1000.0, 980.0);
 8001400:	eddf 0a43 	vldr	s1, [pc, #268]	; 8001510 <main+0x148>
 8001404:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8001514 <main+0x14c>
 8001408:	f7ff ff54 	bl	80012b4 <LIS3DSH_X_calibrate>
	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 800140c:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001518 <main+0x150>
 8001410:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800151c <main+0x154>
 8001414:	f7ff ff7c 	bl	8001310 <LIS3DSH_Y_calibrate>
	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8001418:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8001518 <main+0x150>
 800141c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8001520 <main+0x158>
 8001420:	f7ff ffa4 	bl	800136c <LIS3DSH_Z_calibrate>
	CDC_Transmit_FS((uint8_t*) "\n", (uint16_t) strlen("\n"));
 8001424:	2101      	movs	r1, #1
 8001426:	483f      	ldr	r0, [pc, #252]	; (8001524 <main+0x15c>)
 8001428:	f007 f886 	bl	8008538 <CDC_Transmit_FS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(drdyFlag == 1)
 800142c:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <main+0x160>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d1fb      	bne.n	800142c <main+0x64>
	  {
	  		drdyFlag = 0;
 8001434:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <main+0x160>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
	  		mydata = LIS3DSH_GetDataScaled();
 800143a:	f7ff feb9 	bl	80011b0 <LIS3DSH_GetDataScaled>
 800143e:	eef0 6a40 	vmov.f32	s13, s0
 8001442:	eeb0 7a60 	vmov.f32	s14, s1
 8001446:	eef0 7a41 	vmov.f32	s15, s2
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <main+0x164>)
 800144c:	edc3 6a00 	vstr	s13, [r3]
 8001450:	ed83 7a01 	vstr	s14, [r3, #4]
 8001454:	edc3 7a02 	vstr	s15, [r3, #8]
	  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145c:	4834      	ldr	r0, [pc, #208]	; (8001530 <main+0x168>)
 800145e:	f000 fece 	bl	80021fe <HAL_GPIO_TogglePin>
			memset(evermore,'\0',sizeof(evermore));
 8001462:	22b1      	movs	r2, #177	; 0xb1
 8001464:	2100      	movs	r1, #0
 8001466:	4833      	ldr	r0, [pc, #204]	; (8001534 <main+0x16c>)
 8001468:	f007 fcfa 	bl	8008e60 <memset>
	        snprintf(taylor, sizeof(taylor), "%f,", mydata.x);
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <main+0x164>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f869 	bl	8000548 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	e9cd 2300 	strd	r2, r3, [sp]
 800147e:	4a2e      	ldr	r2, [pc, #184]	; (8001538 <main+0x170>)
 8001480:	2129      	movs	r1, #41	; 0x29
 8001482:	482e      	ldr	r0, [pc, #184]	; (800153c <main+0x174>)
 8001484:	f008 f95e 	bl	8009744 <sniprintf>
	        strcat(evermore, taylor);
 8001488:	492c      	ldr	r1, [pc, #176]	; (800153c <main+0x174>)
 800148a:	482a      	ldr	r0, [pc, #168]	; (8001534 <main+0x16c>)
 800148c:	f008 f98e 	bl	80097ac <strcat>
	        memset(taylor,'\0',sizeof(taylor));
 8001490:	2229      	movs	r2, #41	; 0x29
 8001492:	2100      	movs	r1, #0
 8001494:	4829      	ldr	r0, [pc, #164]	; (800153c <main+0x174>)
 8001496:	f007 fce3 	bl	8008e60 <memset>
	        snprintf(taylor, sizeof(taylor), "%f,", mydata.y);
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <main+0x164>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f852 	bl	8000548 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	e9cd 2300 	strd	r2, r3, [sp]
 80014ac:	4a22      	ldr	r2, [pc, #136]	; (8001538 <main+0x170>)
 80014ae:	2129      	movs	r1, #41	; 0x29
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <main+0x174>)
 80014b2:	f008 f947 	bl	8009744 <sniprintf>
	        strcat(evermore, taylor);
 80014b6:	4921      	ldr	r1, [pc, #132]	; (800153c <main+0x174>)
 80014b8:	481e      	ldr	r0, [pc, #120]	; (8001534 <main+0x16c>)
 80014ba:	f008 f977 	bl	80097ac <strcat>
	        memset(taylor,'\0',sizeof(taylor));
 80014be:	2229      	movs	r2, #41	; 0x29
 80014c0:	2100      	movs	r1, #0
 80014c2:	481e      	ldr	r0, [pc, #120]	; (800153c <main+0x174>)
 80014c4:	f007 fccc 	bl	8008e60 <memset>
	        snprintf(taylor, sizeof(taylor),"%f\n,",mydata.z);
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <main+0x164>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f83b 	bl	8000548 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9cd 2300 	strd	r2, r3, [sp]
 80014da:	4a19      	ldr	r2, [pc, #100]	; (8001540 <main+0x178>)
 80014dc:	2129      	movs	r1, #41	; 0x29
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <main+0x174>)
 80014e0:	f008 f930 	bl	8009744 <sniprintf>
	        strcat(evermore, taylor);
 80014e4:	4915      	ldr	r1, [pc, #84]	; (800153c <main+0x174>)
 80014e6:	4813      	ldr	r0, [pc, #76]	; (8001534 <main+0x16c>)
 80014e8:	f008 f960 	bl	80097ac <strcat>
	        memset(taylor,'\0',sizeof(taylor));
 80014ec:	2229      	movs	r2, #41	; 0x29
 80014ee:	2100      	movs	r1, #0
 80014f0:	4812      	ldr	r0, [pc, #72]	; (800153c <main+0x174>)
 80014f2:	f007 fcb5 	bl	8008e60 <memset>
	    	CDC_Transmit_FS((uint8_t*) evermore, (uint16_t) strlen(evermore));
 80014f6:	480f      	ldr	r0, [pc, #60]	; (8001534 <main+0x16c>)
 80014f8:	f7fe fe6a 	bl	80001d0 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <main+0x16c>)
 8001504:	f007 f818 	bl	8008538 <CDC_Transmit_FS>
	  if(drdyFlag == 1)
 8001508:	e790      	b.n	800142c <main+0x64>
 800150a:	bf00      	nop
 800150c:	2000035c 	.word	0x2000035c
 8001510:	44750000 	.word	0x44750000
 8001514:	c47a0000 	.word	0xc47a0000
 8001518:	44820000 	.word	0x44820000
 800151c:	c47f0000 	.word	0xc47f0000
 8001520:	c4660000 	.word	0xc4660000
 8001524:	0800bc78 	.word	0x0800bc78
 8001528:	2000049d 	.word	0x2000049d
 800152c:	200003b4 	.word	0x200003b4
 8001530:	40020c00 	.word	0x40020c00
 8001534:	200003ec 	.word	0x200003ec
 8001538:	0800bc7c 	.word	0x0800bc7c
 800153c:	200003c0 	.word	0x200003c0
 8001540:	0800bc80 	.word	0x0800bc80

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	; 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	2230      	movs	r2, #48	; 0x30
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f007 fc84 	bl	8008e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <SystemClock_Config+0xcc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <SystemClock_Config+0xcc>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <SystemClock_Config+0xcc>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <SystemClock_Config+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a21      	ldr	r2, [pc, #132]	; (8001614 <SystemClock_Config+0xd0>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <SystemClock_Config+0xd0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015b4:	2304      	movs	r3, #4
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015b8:	2348      	movs	r3, #72	; 0x48
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015bc:	2302      	movs	r3, #2
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80015c0:	2303      	movs	r3, #3
 80015c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 f8c9 	bl	8003760 <HAL_RCC_OscConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015d4:	f000 f904 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d8:	230f      	movs	r3, #15
 80015da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015dc:	2302      	movs	r3, #2
 80015de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2102      	movs	r1, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fb2a 	bl	8003c50 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001602:	f000 f8ed 	bl	80017e0 <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	; 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_SPI1_Init+0x64>)
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <MX_SPI1_Init+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_SPI1_Init+0x64>)
 8001624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_SPI1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_SPI1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_SPI1_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_SPI1_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_SPI1_Init+0x64>)
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_SPI1_Init+0x64>)
 800164c:	2210      	movs	r2, #16
 800164e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_SPI1_Init+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_SPI1_Init+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_SPI1_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_SPI1_Init+0x64>)
 8001664:	220a      	movs	r2, #10
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_SPI1_Init+0x64>)
 800166a:	f002 fce9 	bl	8004040 <HAL_SPI_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001674:	f000 f8b4 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000035c 	.word	0x2000035c
 8001680:	40013000 	.word	0x40013000

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a40      	ldr	r2, [pc, #256]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a39      	ldr	r2, [pc, #228]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a32      	ldr	r2, [pc, #200]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <MX_GPIO_Init+0x120>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <MX_GPIO_Init+0x120>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2108      	movs	r1, #8
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <MX_GPIO_Init+0x124>)
 8001710:	f000 fd5c 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800171a:	4824      	ldr	r0, [pc, #144]	; (80017ac <MX_GPIO_Init+0x128>)
 800171c:	f000 fd56 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8001720:	2308      	movs	r3, #8
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	481c      	ldr	r0, [pc, #112]	; (80017a8 <MX_GPIO_Init+0x124>)
 8001738:	f000 fbac 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800173c:	2301      	movs	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4818      	ldr	r0, [pc, #96]	; (80017b0 <MX_GPIO_Init+0x12c>)
 8001750:	f000 fba0 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001754:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	480f      	ldr	r0, [pc, #60]	; (80017ac <MX_GPIO_Init+0x128>)
 800176e:	f000 fb91 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001776:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4808      	ldr	r0, [pc, #32]	; (80017a8 <MX_GPIO_Init+0x124>)
 8001788:	f000 fb84 	bl	8001e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2006      	movs	r0, #6
 8001792:	f000 fb48 	bl	8001e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001796:	2006      	movs	r0, #6
 8001798:	f000 fb61 	bl	8001e5e <HAL_NVIC_EnableIRQ>

}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	; 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40020000 	.word	0x40020000

080017b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
		drdyFlag = 1;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x24>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80017c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <HAL_GPIO_EXTI_Callback+0x28>)
 80017ca:	f000 fd18 	bl	80021fe <HAL_GPIO_TogglePin>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000049d 	.word	0x2000049d
 80017dc:	40020c00 	.word	0x40020c00

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x4>
	...

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <HAL_MspInit+0x4c>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_MspInit+0x4c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_MspInit+0x4c>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_MspInit+0x4c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a19      	ldr	r2, [pc, #100]	; (80018bc <HAL_SPI_MspInit+0x84>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d12b      	bne.n	80018b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 8001864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001892:	23e0      	movs	r3, #224	; 0xe0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a2:	2305      	movs	r3, #5
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_SPI_MspInit+0x8c>)
 80018ae:	f000 faf1 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40013000 	.word	0x40013000
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f968 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001920:	2001      	movs	r0, #1
 8001922:	f000 fc87 	bl	8002234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <OTG_FS_IRQHandler+0x10>)
 8001932:	f000 fde7 	bl	8002504 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20001988 	.word	0x20001988

08001940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_kill>:

int _kill(int pid, int sig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800195a:	f007 fa49 	bl	8008df0 <__errno>
 800195e:	4603      	mov	r3, r0
 8001960:	2216      	movs	r2, #22
 8001962:	601a      	str	r2, [r3, #0]
	return -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_exit>:

void _exit (int status)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe7 	bl	8001950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001982:	e7fe      	b.n	8001982 <_exit+0x12>

08001984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
	}

return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e009      	b.n	80019e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf1      	blt.n	80019d0 <_write+0x12>
	}
	return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_isatty>:

int _isatty(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f007 f9ae 	bl	8008df0 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20020000 	.word	0x20020000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	200004a0 	.word	0x200004a0
 8001ac8:	200020c8 	.word	0x200020c8

08001acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b0c:	4c0b      	ldr	r4, [pc, #44]	; (8001b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b1a:	f7ff ffd7 	bl	8001acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f007 f96d 	bl	8008dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7ff fc51 	bl	80013c8 <main>
  bx  lr    
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001b34:	0800c0cc 	.word	0x0800c0cc
  ldr r2, =_sbss
 8001b38:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001b3c:	200020c4 	.word	0x200020c4

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_Init+0x40>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_Init+0x40>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_Init+0x40>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f94f 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	200f      	movs	r0, #15
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fe36 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f967 	bl	8001e7a <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc4:	f000 f92f 	bl	8001e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000010 	.word	0x20000010
 8001be0:	20000018 	.word	0x20000018
 8001be4:	20000014 	.word	0x20000014

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000018 	.word	0x20000018
 8001c0c:	200004a4 	.word	0x200004a4

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200004a4 	.word	0x200004a4

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000018 	.word	0x20000018

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <__NVIC_EnableIRQ+0x38>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	; (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff29 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff3e 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff8e 	bl	8001d64 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff31 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffa2 	bl	8001dcc <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e16b      	b.n	8002188 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 815a 	bne.w	8002182 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d005      	beq.n	8001ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d130      	bne.n	8001f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 0201 	and.w	r2, r3, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d017      	beq.n	8001f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d123      	bne.n	8001fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0203 	and.w	r2, r3, #3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80b4 	beq.w	8002182 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a5f      	ldr	r2, [pc, #380]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002036:	4a5b      	ldr	r2, [pc, #364]	; (80021a4 <HAL_GPIO_Init+0x310>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_GPIO_Init+0x314>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02b      	beq.n	80020ba <HAL_GPIO_Init+0x226>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_GPIO_Init+0x318>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x222>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a50      	ldr	r2, [pc, #320]	; (80021b0 <HAL_GPIO_Init+0x31c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x21e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x320>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x21a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4e      	ldr	r2, [pc, #312]	; (80021b8 <HAL_GPIO_Init+0x324>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x216>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x328>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x212>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_GPIO_Init+0x32c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <HAL_GPIO_Init+0x330>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x20a>
 800209a:	2307      	movs	r3, #7
 800209c:	e00e      	b.n	80020bc <HAL_GPIO_Init+0x228>
 800209e:	2308      	movs	r3, #8
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_GPIO_Init+0x310>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_GPIO_Init+0x334>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a32      	ldr	r2, [pc, #200]	; (80021c8 <HAL_GPIO_Init+0x334>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_GPIO_Init+0x334>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <HAL_GPIO_Init+0x334>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_GPIO_Init+0x334>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002152:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_GPIO_Init+0x334>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x334>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_GPIO_Init+0x334>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae90 	bls.w	8001eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40021c00 	.word	0x40021c00
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	041a      	lsls	r2, r3, #16
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43d9      	mvns	r1, r3
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	400b      	ands	r3, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff faae 	bl	80017b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002266:	b08f      	sub	sp, #60	; 0x3c
 8002268:	af0a      	add	r7, sp, #40	; 0x28
 800226a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e10f      	b.n	8002496 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f006 fa99 	bl	80087c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fd80 	bl	8004dba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	687e      	ldr	r6, [r7, #4]
 80022c2:	466d      	mov	r5, sp
 80022c4:	f106 0410 	add.w	r4, r6, #16
 80022c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d8:	1d33      	adds	r3, r6, #4
 80022da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f002 fc57 	bl	8004b90 <USB_CoreInit>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d0      	b.n	8002496 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 fd6e 	bl	8004ddc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e04a      	b.n	800239c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	333d      	adds	r3, #61	; 0x3d
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	333c      	adds	r3, #60	; 0x3c
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	b298      	uxth	r0, r3
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3344      	adds	r3, #68	; 0x44
 8002342:	4602      	mov	r2, r0
 8002344:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3340      	adds	r3, #64	; 0x40
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3348      	adds	r3, #72	; 0x48
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	334c      	adds	r3, #76	; 0x4c
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3354      	adds	r3, #84	; 0x54
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3301      	adds	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3af      	bcc.n	8002306 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e044      	b.n	8002436 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	3301      	adds	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	d3b5      	bcc.n	80023ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	687e      	ldr	r6, [r7, #4]
 8002448:	466d      	mov	r5, sp
 800244a:	f106 0410 	add.w	r4, r6, #16
 800244e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245a:	e885 0003 	stmia.w	r5, {r0, r1}
 800245e:	1d33      	adds	r3, r6, #4
 8002460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	f002 fd06 	bl	8004e74 <USB_DevInit>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00d      	b.n	8002496 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 fe55 	bl	800613e <USB_DevDisconnect>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800249e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_PCD_Start+0x1c>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e020      	b.n	80024fc <HAL_PCD_Start+0x5e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d109      	bne.n	80024de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d005      	beq.n	80024de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 fc58 	bl	8004d98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fe05 	bl	80060fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b08d      	sub	sp, #52	; 0x34
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fec3 	bl	80062a6 <USB_GetMode>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 848a 	bne.w	8002e3c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fe27 	bl	8006180 <USB_ReadInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8480 	beq.w	8002e3a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fe14 	bl	8006180 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d107      	bne.n	8002572 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f002 0202 	and.w	r2, r2, #2
 8002570:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fe02 	bl	8006180 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b10      	cmp	r3, #16
 8002584:	d161      	bne.n	800264a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699a      	ldr	r2, [r3, #24]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0210 	bic.w	r2, r2, #16
 8002594:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f003 020f 	and.w	r2, r3, #15
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	3304      	adds	r3, #4
 80025b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	0c5b      	lsrs	r3, r3, #17
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d124      	bne.n	800260c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d035      	beq.n	800263a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	6a38      	ldr	r0, [r7, #32]
 80025e2:	f003 fc39 	bl	8005e58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f2:	441a      	add	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002604:	441a      	add	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	621a      	str	r2, [r3, #32]
 800260a:	e016      	b.n	800263a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	0c5b      	lsrs	r3, r3, #17
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	2b06      	cmp	r3, #6
 8002616:	d110      	bne.n	800263a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800261e:	2208      	movs	r2, #8
 8002620:	4619      	mov	r1, r3
 8002622:	6a38      	ldr	r0, [r7, #32]
 8002624:	f003 fc18 	bl	8005e58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002634:	441a      	add	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0210 	orr.w	r2, r2, #16
 8002648:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fd96 	bl	8006180 <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800265e:	f040 80a7 	bne.w	80027b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fd9b 	bl	80061a6 <USB_ReadDevAllOutEpInterrupt>
 8002670:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002672:	e099      	b.n	80027a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 808e 	beq.w	800279c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fdbf 	bl	800620e <USB_ReadDevOutEPInterrupt>
 8002690:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00c      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a8:	461a      	mov	r2, r3
 80026aa:	2301      	movs	r3, #1
 80026ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fec3 	bl	800343c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00c      	beq.n	80026da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026cc:	461a      	mov	r2, r3
 80026ce:	2308      	movs	r3, #8
 80026d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 ff99 	bl	800360c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f0:	461a      	mov	r2, r3
 80026f2:	2310      	movs	r3, #16
 80026f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d030      	beq.n	8002762 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d109      	bne.n	8002720 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	3304      	adds	r3, #4
 8002734:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	78db      	ldrb	r3, [r3, #3]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f006 f942 	bl	80089d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	2302      	movs	r3, #2
 8002760:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002778:	461a      	mov	r2, r3
 800277a:	2320      	movs	r3, #32
 800277c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002794:	461a      	mov	r2, r3
 8002796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	3301      	adds	r3, #1
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f47f af62 	bne.w	8002674 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 fce3 	bl	8006180 <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027c4:	f040 80db 	bne.w	800297e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fd04 	bl	80061da <USB_ReadDevAllInEpInterrupt>
 80027d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027d8:	e0cd      	b.n	8002976 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80c2 	beq.w	800296a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 fd2a 	bl	800624a <USB_ReadDevInEPInterrupt>
 80027f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d057      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	2201      	movs	r2, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	69f9      	ldr	r1, [r7, #28]
 800281e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002822:	4013      	ands	r3, r2
 8002824:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002832:	461a      	mov	r2, r3
 8002834:	2301      	movs	r3, #1
 8002836:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d132      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	334c      	adds	r3, #76	; 0x4c
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4403      	add	r3, r0
 8002860:	3348      	adds	r3, #72	; 0x48
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4419      	add	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4403      	add	r3, r0
 8002874:	334c      	adds	r3, #76	; 0x4c
 8002876:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	d113      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x3a2>
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3354      	adds	r3, #84	; 0x54
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d108      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800289e:	461a      	mov	r2, r3
 80028a0:	2101      	movs	r1, #1
 80028a2:	f003 fd31 	bl	8006308 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f006 f80c 	bl	80088ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c8:	461a      	mov	r2, r3
 80028ca:	2308      	movs	r3, #8
 80028cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e4:	461a      	mov	r2, r3
 80028e6:	2310      	movs	r3, #16
 80028e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002900:	461a      	mov	r2, r3
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d023      	beq.n	8002958 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002912:	6a38      	ldr	r0, [r7, #32]
 8002914:	f002 fc12 	bl	800513c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	3338      	adds	r3, #56	; 0x38
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	3304      	adds	r3, #4
 800292a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	78db      	ldrb	r3, [r3, #3]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d108      	bne.n	8002946 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2200      	movs	r2, #0
 8002938:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f006 f859 	bl	80089f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002952:	461a      	mov	r2, r3
 8002954:	2302      	movs	r3, #2
 8002956:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fcdb 	bl	8003320 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	f47f af2e 	bne.w	80027da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fbfc 	bl	8006180 <USB_ReadInterrupts>
 8002988:	4603      	mov	r3, r0
 800298a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800298e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002992:	d122      	bne.n	80029da <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d108      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029ba:	2100      	movs	r1, #0
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fec3 	bl	8003748 <HAL_PCDEx_LPM_Callback>
 80029c2:	e002      	b.n	80029ca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f005 fff7 	bl	80089b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fbce 	bl	8006180 <USB_ReadInterrupts>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ee:	d112      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d102      	bne.n	8002a06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f005 ffb3 	bl	800896c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a14:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fbb0 	bl	8006180 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2a:	f040 80b7 	bne.w	8002b9c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2110      	movs	r1, #16
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fb77 	bl	800513c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a52:	e046      	b.n	8002ae2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a60:	461a      	mov	r2, r3
 8002a62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a94:	461a      	mov	r2, r3
 8002a96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	0151      	lsls	r1, r2, #5
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ada:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	3301      	adds	r3, #1
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d3b3      	bcc.n	8002a54 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002afe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d016      	beq.n	8002b36 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b18:	f043 030b 	orr.w	r3, r3, #11
 8002b1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b2e:	f043 030b 	orr.w	r3, r3, #11
 8002b32:	6453      	str	r3, [r2, #68]	; 0x44
 8002b34:	e015      	b.n	8002b62 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b5c:	f043 030b 	orr.w	r3, r3, #11
 8002b60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b86:	461a      	mov	r2, r3
 8002b88:	f003 fbbe 	bl	8006308 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 faed 	bl	8006180 <USB_ReadInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb0:	d124      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fb83 	bl	80062c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fb38 	bl	8005236 <USB_GetDevSpeed>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681c      	ldr	r4, [r3, #0]
 8002bd2:	f001 fa29 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8002bd6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	4620      	mov	r0, r4
 8002be2:	f002 f837 	bl	8004c54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f005 fe97 	bl	800891a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 fabd 	bl	8006180 <USB_ReadInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d10a      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f005 fe74 	bl	80088fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f002 0208 	and.w	r2, r2, #8
 8002c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 faa8 	bl	8006180 <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b80      	cmp	r3, #128	; 0x80
 8002c38:	d122      	bne.n	8002c80 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c46:	2301      	movs	r3, #1
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e014      	b.n	8002c76 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fb27 	bl	80032be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	3301      	adds	r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3e5      	bcc.n	8002c4c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fa7b 	bl	8006180 <USB_ReadInterrupts>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c94:	d13b      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c96:	2301      	movs	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	e02b      	b.n	8002cf4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3340      	adds	r3, #64	; 0x40
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d115      	bne.n	8002cee <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	da12      	bge.n	8002cee <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	333f      	adds	r3, #63	; 0x3f
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fae8 	bl	80032be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d3ce      	bcc.n	8002c9c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 fa34 	bl	8006180 <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d22:	d155      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d24:	2301      	movs	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	e045      	b.n	8002db6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d12e      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da2b      	bge.n	8002db0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d64:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d121      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dac:	6053      	str	r3, [r2, #4]
            break;
 8002dae:	e007      	b.n	8002dc0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	3301      	adds	r3, #1
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d3b4      	bcc.n	8002d2a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 f9d3 	bl	8006180 <USB_ReadInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d10a      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f005 fe18 	bl	8008a1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 f9bd 	bl	8006180 <USB_ReadInterrupts>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d115      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f005 fe08 	bl	8008a38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	e000      	b.n	8002e3c <HAL_PCD_IRQHandler+0x938>
      return;
 8002e3a:	bf00      	nop
    }
  }
}
 8002e3c:	3734      	adds	r7, #52	; 0x34
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}

08002e42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_PCD_SetAddress+0x1a>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e013      	b.n	8002e84 <HAL_PCD_SetAddress+0x42>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 f91b 	bl	80060b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	70fb      	strb	r3, [r7, #3]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	803b      	strh	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da0f      	bge.n	8002ed2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3338      	adds	r3, #56	; 0x38
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	705a      	strb	r2, [r3, #1]
 8002ed0:	e00f      	b.n	8002ef2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 020f 	and.w	r2, r3, #15
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3304      	adds	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002efe:	883a      	ldrh	r2, [r7, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	78ba      	ldrb	r2, [r7, #2]
 8002f08:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f1c:	78bb      	ldrb	r3, [r7, #2]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d102      	bne.n	8002f28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_PCD_EP_Open+0xaa>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e00e      	b.n	8002f54 <HAL_PCD_EP_Open+0xc8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 f99b 	bl	8005280 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f52:	7afb      	ldrb	r3, [r7, #11]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	da0f      	bge.n	8002f90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 020f 	and.w	r2, r3, #15
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	3338      	adds	r3, #56	; 0x38
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	705a      	strb	r2, [r3, #1]
 8002f8e:	e00f      	b.n	8002fb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_EP_Close+0x6e>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e00e      	b.n	8002fe8 <HAL_PCD_EP_Close+0x8c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 f9d9 	bl	8005390 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003032:	7afb      	ldrb	r3, [r7, #11]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	b2da      	uxtb	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	6979      	ldr	r1, [r7, #20]
 8003064:	f002 fcb8 	bl	80059d8 <USB_EP0StartXfer>
 8003068:	e008      	b.n	800307c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	6979      	ldr	r1, [r7, #20]
 8003078:	f002 fa66 	bl	8005548 <USB_EPStartXfer>
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80030a8:	681b      	ldr	r3, [r3, #0]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	460b      	mov	r3, r1
 80030c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3338      	adds	r3, #56	; 0x38
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2201      	movs	r2, #1
 80030f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f6:	7afb      	ldrb	r3, [r7, #11]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	f002 fc56 	bl	80059d8 <USB_EP0StartXfer>
 800312c:	e008      	b.n	8003140 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	f002 fa04 	bl	8005548 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d901      	bls.n	8003168 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e050      	b.n	800320a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800316c:	2b00      	cmp	r3, #0
 800316e:	da0f      	bge.n	8003190 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 020f 	and.w	r2, r3, #15
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	3338      	adds	r3, #56	; 0x38
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	3304      	adds	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	705a      	strb	r2, [r3, #1]
 800318e:	e00d      	b.n	80031ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	3304      	adds	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_EP_SetStall+0x82>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e01e      	b.n	800320a <HAL_PCD_EP_SetStall+0xc0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 fe94 	bl	8005f08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	b2d9      	uxtb	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031fa:	461a      	mov	r2, r3
 80031fc:	f003 f884 	bl	8006308 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d901      	bls.n	8003230 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e042      	b.n	80032b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003234:	2b00      	cmp	r3, #0
 8003236:	da0f      	bge.n	8003258 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 020f 	and.w	r2, r3, #15
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	3338      	adds	r3, #56	; 0x38
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	3304      	adds	r3, #4
 800324e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	705a      	strb	r2, [r3, #1]
 8003256:	e00f      	b.n	8003278 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	3304      	adds	r3, #4
 8003270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_PCD_EP_ClrStall+0x86>
 8003294:	2302      	movs	r3, #2
 8003296:	e00e      	b.n	80032b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68f9      	ldr	r1, [r7, #12]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f002 fe9c 	bl	8005fe4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	da0c      	bge.n	80032ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	3338      	adds	r3, #56	; 0x38
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e00c      	b.n	8003306 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	3304      	adds	r3, #4
 8003304:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	4618      	mov	r0, r3
 800330e:	f002 fcbb 	bl	8005c88 <USB_EPStopXfer>
 8003312:	4603      	mov	r3, r0
 8003314:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003316:	7afb      	ldrb	r3, [r7, #11]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af02      	add	r7, sp, #8
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	3338      	adds	r3, #56	; 0x38
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	429a      	cmp	r2, r3
 8003352:	d901      	bls.n	8003358 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e06c      	b.n	8003432 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	429a      	cmp	r2, r3
 800336c:	d902      	bls.n	8003374 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	3303      	adds	r3, #3
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337c:	e02b      	b.n	80033d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	d902      	bls.n	800339a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3303      	adds	r3, #3
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6919      	ldr	r1, [r3, #16]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	4603      	mov	r3, r0
 80033b8:	6978      	ldr	r0, [r7, #20]
 80033ba:	f002 fd0f 	bl	8005ddc <USB_WritePacket>

    ep->xfer_buff  += len;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	441a      	add	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	441a      	add	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d809      	bhi.n	8003400 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d203      	bcs.n	8003400 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1be      	bne.n	800337e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	429a      	cmp	r2, r3
 800340a:	d811      	bhi.n	8003430 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	2201      	movs	r2, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	43db      	mvns	r3, r3
 8003426:	6939      	ldr	r1, [r7, #16]
 8003428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800342c:	4013      	ands	r3, r2
 800342e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	333c      	adds	r3, #60	; 0x3c
 8003454:	3304      	adds	r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d17b      	bne.n	800356a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d015      	beq.n	80034a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	4a61      	ldr	r2, [pc, #388]	; (8003604 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	f240 80b9 	bls.w	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80b3 	beq.w	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349e:	461a      	mov	r2, r3
 80034a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a4:	6093      	str	r3, [r2, #8]
 80034a6:	e0a7      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	461a      	mov	r2, r3
 80034c0:	2320      	movs	r3, #32
 80034c2:	6093      	str	r3, [r2, #8]
 80034c4:	e098      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 8093 	bne.w	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4a4b      	ldr	r2, [pc, #300]	; (8003604 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d90f      	bls.n	80034fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f0:	461a      	mov	r2, r3
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	6093      	str	r3, [r2, #8]
 80034f8:	e07e      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	3304      	adds	r3, #4
 800350e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	440b      	add	r3, r1
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	1ad2      	subs	r2, r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d114      	bne.n	800355c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003544:	461a      	mov	r2, r3
 8003546:	2101      	movs	r1, #1
 8003548:	f002 fede 	bl	8006308 <USB_EP0_OutStart>
 800354c:	e006      	b.n	800355c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	441a      	add	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f005 f996 	bl	8008894 <HAL_PCD_DataOutStageCallback>
 8003568:	e046      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d124      	bne.n	80035bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	461a      	mov	r2, r3
 800358a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358e:	6093      	str	r3, [r2, #8]
 8003590:	e032      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	461a      	mov	r2, r3
 80035aa:	2320      	movs	r3, #32
 80035ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f005 f96d 	bl	8008894 <HAL_PCD_DataOutStageCallback>
 80035ba:	e01d      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d114      	bne.n	80035ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035e4:	461a      	mov	r2, r3
 80035e6:	2100      	movs	r1, #0
 80035e8:	f002 fe8e 	bl	8006308 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f005 f94e 	bl	8008894 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	4f54300a 	.word	0x4f54300a
 8003608:	4f54310a 	.word	0x4f54310a

0800360c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	333c      	adds	r3, #60	; 0x3c
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <PCD_EP_OutSetupPacket_int+0x88>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d90e      	bls.n	8003660 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f005 f905 	bl	8008870 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <PCD_EP_OutSetupPacket_int+0x88>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d90c      	bls.n	8003688 <PCD_EP_OutSetupPacket_int+0x7c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003680:	461a      	mov	r2, r3
 8003682:	2101      	movs	r1, #1
 8003684:	f002 fe40 	bl	8006308 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	4f54300a 	.word	0x4f54300a

08003698 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
 80036a4:	4613      	mov	r3, r2
 80036a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036b6:	883b      	ldrh	r3, [r7, #0]
 80036b8:	0419      	lsls	r1, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
 80036c4:	e028      	b.n	8003718 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4413      	add	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e00d      	b.n	80036f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3340      	adds	r3, #64	; 0x40
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4413      	add	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	3301      	adds	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d3ec      	bcc.n	80036da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003700:	883b      	ldrh	r3, [r7, #0]
 8003702:	0418      	lsls	r0, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	3b01      	subs	r3, #1
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4302      	orrs	r2, r0
 8003710:	3340      	adds	r3, #64	; 0x40
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e267      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d075      	beq.n	800386a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377e:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b04      	cmp	r3, #4
 8003788:	d00c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378a:	4b85      	ldr	r3, [pc, #532]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003792:	2b08      	cmp	r3, #8
 8003794:	d112      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4b82      	ldr	r3, [pc, #520]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a2:	d10b      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	4b7e      	ldr	r3, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d05b      	beq.n	8003868 <HAL_RCC_OscConfig+0x108>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d157      	bne.n	8003868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e242      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x74>
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e01d      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x98>
 80037de:	4b70      	ldr	r3, [pc, #448]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6f      	ldr	r2, [pc, #444]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6c      	ldr	r2, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037f8:	4b69      	ldr	r3, [pc, #420]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a68      	ldr	r2, [pc, #416]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800380a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d013      	beq.n	8003840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe f9fa 	bl	8001c10 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003820:	f7fe f9f6 	bl	8001c10 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e207      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b5b      	ldr	r3, [pc, #364]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0xc0>
 800383e:	e014      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe f9e6 	bl	8001c10 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe f9e2 	bl	8001c10 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1f3      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0xe8>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d063      	beq.n	800393e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003882:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800388a:	2b08      	cmp	r3, #8
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b44      	ldr	r3, [pc, #272]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x152>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1c7      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4937      	ldr	r1, [pc, #220]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	e03a      	b.n	800393e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_OscConfig+0x244>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fe f99b 	bl	8001c10 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038de:	f7fe f997 	bl	8001c10 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1a8      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4925      	ldr	r1, [pc, #148]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <HAL_RCC_OscConfig+0x244>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe f97a 	bl	8001c10 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003920:	f7fe f976 	bl	8001c10 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e187      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d036      	beq.n	80039b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x248>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fe f95a 	bl	8001c10 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003960:	f7fe f956 	bl	8001c10 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e167      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x200>
 800397e:	e01b      	b.n	80039b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_OscConfig+0x248>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003986:	f7fe f943 	bl	8001c10 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	e00e      	b.n	80039ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398e:	f7fe f93f 	bl	8001c10 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d907      	bls.n	80039ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e150      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	42470000 	.word	0x42470000
 80039a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b88      	ldr	r3, [pc, #544]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ea      	bne.n	800398e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8097 	beq.w	8003af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	4b7d      	ldr	r3, [pc, #500]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a7c      	ldr	r2, [pc, #496]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b7a      	ldr	r3, [pc, #488]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b77      	ldr	r3, [pc, #476]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d118      	bne.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a02:	4b74      	ldr	r3, [pc, #464]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a73      	ldr	r2, [pc, #460]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7fe f8ff 	bl	8001c10 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a16:	f7fe f8fb 	bl	8001c10 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e10c      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x2ea>
 8003a3c:	4b64      	ldr	r3, [pc, #400]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	4a63      	ldr	r2, [pc, #396]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6713      	str	r3, [r2, #112]	; 0x70
 8003a48:	e01c      	b.n	8003a84 <HAL_RCC_OscConfig+0x324>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x30c>
 8003a52:	4b5f      	ldr	r3, [pc, #380]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a5e      	ldr	r2, [pc, #376]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	4b5c      	ldr	r3, [pc, #368]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a5b      	ldr	r2, [pc, #364]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0x324>
 8003a6c:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a57      	ldr	r2, [pc, #348]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	4b55      	ldr	r3, [pc, #340]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a54      	ldr	r2, [pc, #336]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	f023 0304 	bic.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe f8c0 	bl	8001c10 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fe f8bc 	bl	8001c10 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0cb      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ee      	beq.n	8003a94 <HAL_RCC_OscConfig+0x334>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fe f8aa 	bl	8001c10 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe f8a6 	bl	8001c10 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0b5      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad6:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ee      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	4a38      	ldr	r2, [pc, #224]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80a1 	beq.w	8003c40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003afe:	4b34      	ldr	r3, [pc, #208]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d05c      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d141      	bne.n	8003b96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fe f87a 	bl	8001c10 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fe f876 	bl	8001c10 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e087      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	491b      	ldr	r1, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fe f84f 	bl	8001c10 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fe f84b 	bl	8001c10 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e05c      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x416>
 8003b94:	e054      	b.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe f838 	bl	8001c10 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe f834 	bl	8001c10 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e045      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x444>
 8003bc2:	e03d      	b.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e038      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x4ec>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d028      	beq.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d121      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d11a      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d111      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	3b01      	subs	r3, #1
 8003c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0cc      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d90c      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b63      	ldr	r3, [pc, #396]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0b8      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca4:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a58      	ldr	r2, [pc, #352]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cbc:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a52      	ldr	r2, [pc, #328]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc8:	4b50      	ldr	r3, [pc, #320]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	494d      	ldr	r1, [pc, #308]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d044      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d119      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e07f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d003      	beq.n	8003d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e06f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1e:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e067      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4934      	ldr	r1, [pc, #208]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d40:	f7fd ff66 	bl	8001c10 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d48:	f7fd ff62 	bl	8001c10 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e04f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 020c 	and.w	r2, r3, #12
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1eb      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d20c      	bcs.n	8003d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e032      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da4:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4916      	ldr	r1, [pc, #88]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	490e      	ldr	r1, [pc, #56]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dd6:	f000 f821 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	490a      	ldr	r1, [pc, #40]	; (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	5ccb      	ldrb	r3, [r1, r3]
 8003dea:	fa22 f303 	lsr.w	r3, r2, r3
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fd fec6 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023c00 	.word	0x40023c00
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	0800bcd0 	.word	0x0800bcd0
 8003e14:	20000010 	.word	0x20000010
 8003e18:	20000014 	.word	0x20000014

08003e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e20:	b094      	sub	sp, #80	; 0x50
 8003e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	647b      	str	r3, [r7, #68]	; 0x44
 8003e28:	2300      	movs	r3, #0
 8003e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e34:	4b79      	ldr	r3, [pc, #484]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d00d      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x40>
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	f200 80e1 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x34>
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e4e:	e0db      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b73      	ldr	r3, [pc, #460]	; (8004020 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e54:	e0db      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e56:	4b73      	ldr	r3, [pc, #460]	; (8004024 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e5a:	e0d8      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e66:	4b6d      	ldr	r3, [pc, #436]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d063      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e72:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	2200      	movs	r2, #0
 8003e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
 8003e86:	2300      	movs	r3, #0
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e8e:	4622      	mov	r2, r4
 8003e90:	462b      	mov	r3, r5
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f04f 0100 	mov.w	r1, #0
 8003e9a:	0159      	lsls	r1, r3, #5
 8003e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea0:	0150      	lsls	r0, r2, #5
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	1a51      	subs	r1, r2, r1
 8003eaa:	6139      	str	r1, [r7, #16]
 8003eac:	4629      	mov	r1, r5
 8003eae:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	018b      	lsls	r3, r1, #6
 8003ec4:	4651      	mov	r1, sl
 8003ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eca:	4651      	mov	r1, sl
 8003ecc:	018a      	lsls	r2, r1, #6
 8003ece:	4651      	mov	r1, sl
 8003ed0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	eb63 0901 	sbc.w	r9, r3, r1
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eee:	4690      	mov	r8, r2
 8003ef0:	4699      	mov	r9, r3
 8003ef2:	4623      	mov	r3, r4
 8003ef4:	eb18 0303 	adds.w	r3, r8, r3
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	462b      	mov	r3, r5
 8003efc:	eb49 0303 	adc.w	r3, r9, r3
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f0e:	4629      	mov	r1, r5
 8003f10:	024b      	lsls	r3, r1, #9
 8003f12:	4621      	mov	r1, r4
 8003f14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f18:	4621      	mov	r1, r4
 8003f1a:	024a      	lsls	r2, r1, #9
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f22:	2200      	movs	r2, #0
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f2c:	f7fc fe3c 	bl	8000ba8 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4613      	mov	r3, r2
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f38:	e058      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3a:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	099b      	lsrs	r3, r3, #6
 8003f40:	2200      	movs	r2, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	4611      	mov	r1, r2
 8003f46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f4a:	623b      	str	r3, [r7, #32]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	f04f 0000 	mov.w	r0, #0
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	0159      	lsls	r1, r3, #5
 8003f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f66:	0150      	lsls	r0, r2, #5
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f72:	4649      	mov	r1, r9
 8003f74:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f8c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f90:	eb63 050b 	sbc.w	r5, r3, fp
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	00eb      	lsls	r3, r5, #3
 8003f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa2:	00e2      	lsls	r2, r4, #3
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	4643      	mov	r3, r8
 8003faa:	18e3      	adds	r3, r4, r3
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	464b      	mov	r3, r9
 8003fb0:	eb45 0303 	adc.w	r3, r5, r3
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	028b      	lsls	r3, r1, #10
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fcc:	4621      	mov	r1, r4
 8003fce:	028a      	lsls	r2, r1, #10
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	61fa      	str	r2, [r7, #28]
 8003fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe0:	f7fc fde2 	bl	8000ba8 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4613      	mov	r3, r2
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004006:	e002      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetSysClockFreq+0x204>)
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800400c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004010:	4618      	mov	r0, r3
 8004012:	3750      	adds	r7, #80	; 0x50
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	007a1200 	.word	0x007a1200

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000010 	.word	0x20000010

08004040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07b      	b.n	800414a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004062:	d009      	beq.n	8004078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	61da      	str	r2, [r3, #28]
 800406a:	e005      	b.n	8004078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd fbd0 	bl	8001838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	ea42 0103 	orr.w	r1, r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	f003 0104 	and.w	r1, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0210 	and.w	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_SPI_Transmit+0x22>
 8004170:	2302      	movs	r3, #2
 8004172:	e126      	b.n	80043c2 <HAL_SPI_Transmit+0x270>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417c:	f7fd fd48 	bl	8001c10 <HAL_GetTick>
 8004180:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d002      	beq.n	8004198 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004192:	2302      	movs	r3, #2
 8004194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004196:	e10b      	b.n	80043b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Transmit+0x52>
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041a8:	e102      	b.n	80043b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2203      	movs	r2, #3
 80041ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	88fa      	ldrh	r2, [r7, #6]
 80041c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f0:	d10f      	bne.n	8004212 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004210:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d007      	beq.n	8004230 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004238:	d14b      	bne.n	80042d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Transmit+0xf6>
 8004242:	8afb      	ldrh	r3, [r7, #22]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d13e      	bne.n	80042c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	881a      	ldrh	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	1c9a      	adds	r2, r3, #2
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800426c:	e02b      	b.n	80042c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d112      	bne.n	80042a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	1c9a      	adds	r2, r3, #2
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	86da      	strh	r2, [r3, #54]	; 0x36
 80042a0:	e011      	b.n	80042c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a2:	f7fd fcb5 	bl	8001c10 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d803      	bhi.n	80042ba <HAL_SPI_Transmit+0x168>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b8:	d102      	bne.n	80042c0 <HAL_SPI_Transmit+0x16e>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042c4:	e074      	b.n	80043b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1ce      	bne.n	800426e <HAL_SPI_Transmit+0x11c>
 80042d0:	e04c      	b.n	800436c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_SPI_Transmit+0x18e>
 80042da:	8afb      	ldrh	r3, [r7, #22]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d140      	bne.n	8004362 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004306:	e02c      	b.n	8004362 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b02      	cmp	r3, #2
 8004314:	d113      	bne.n	800433e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	86da      	strh	r2, [r3, #54]	; 0x36
 800433c:	e011      	b.n	8004362 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800433e:	f7fd fc67 	bl	8001c10 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d803      	bhi.n	8004356 <HAL_SPI_Transmit+0x204>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004354:	d102      	bne.n	800435c <HAL_SPI_Transmit+0x20a>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004360:	e026      	b.n	80043b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1cd      	bne.n	8004308 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fbcb 	bl	8004b0c <SPI_EndRxTxTransaction>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e000      	b.n	80043b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80043ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b088      	sub	sp, #32
 80043ce:	af02      	add	r7, sp, #8
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	603b      	str	r3, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e6:	d112      	bne.n	800440e <HAL_SPI_Receive+0x44>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10e      	bne.n	800440e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2204      	movs	r2, #4
 80043f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f8f1 	bl	80045ec <HAL_SPI_TransmitReceive>
 800440a:	4603      	mov	r3, r0
 800440c:	e0ea      	b.n	80045e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_SPI_Receive+0x52>
 8004418:	2302      	movs	r3, #2
 800441a:	e0e3      	b.n	80045e4 <HAL_SPI_Receive+0x21a>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004424:	f7fd fbf4 	bl	8001c10 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d002      	beq.n	800443c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004436:	2302      	movs	r3, #2
 8004438:	75fb      	strb	r3, [r7, #23]
    goto error;
 800443a:	e0ca      	b.n	80045d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Receive+0x7e>
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800444c:	e0c1      	b.n	80045d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2204      	movs	r2, #4
 8004452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88fa      	ldrh	r2, [r7, #6]
 800446c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004494:	d10f      	bne.n	80044b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d007      	beq.n	80044d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d162      	bne.n	80045a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044dc:	e02e      	b.n	800453c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d115      	bne.n	8004518 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f103 020c 	add.w	r2, r3, #12
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	7812      	ldrb	r2, [r2, #0]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004516:	e011      	b.n	800453c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004518:	f7fd fb7a 	bl	8001c10 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d803      	bhi.n	8004530 <HAL_SPI_Receive+0x166>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800452e:	d102      	bne.n	8004536 <HAL_SPI_Receive+0x16c>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	75fb      	strb	r3, [r7, #23]
          goto error;
 800453a:	e04a      	b.n	80045d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1cb      	bne.n	80044de <HAL_SPI_Receive+0x114>
 8004546:	e031      	b.n	80045ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d113      	bne.n	800457e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	b292      	uxth	r2, r2
 8004562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800457c:	e011      	b.n	80045a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800457e:	f7fd fb47 	bl	8001c10 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d803      	bhi.n	8004596 <HAL_SPI_Receive+0x1cc>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004594:	d102      	bne.n	800459c <HAL_SPI_Receive+0x1d2>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045a0:	e017      	b.n	80045d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1cd      	bne.n	8004548 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	6839      	ldr	r1, [r7, #0]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fa45 	bl	8004a40 <SPI_EndRxTransaction>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
 80045ce:	e000      	b.n	80045d2 <HAL_SPI_Receive+0x208>
  }

error :
 80045d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08c      	sub	sp, #48	; 0x30
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045fa:	2301      	movs	r3, #1
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x26>
 800460e:	2302      	movs	r3, #2
 8004610:	e18a      	b.n	8004928 <HAL_SPI_TransmitReceive+0x33c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800461a:	f7fd faf9 	bl	8001c10 <HAL_GetTick>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004638:	2b01      	cmp	r3, #1
 800463a:	d00f      	beq.n	800465c <HAL_SPI_TransmitReceive+0x70>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004642:	d107      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x68>
 800464c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004650:	2b04      	cmp	r3, #4
 8004652:	d003      	beq.n	800465c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004654:	2302      	movs	r3, #2
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800465a:	e15b      	b.n	8004914 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_SPI_TransmitReceive+0x82>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_SPI_TransmitReceive+0x82>
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004674:	e14e      	b.n	8004914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b04      	cmp	r3, #4
 8004680:	d003      	beq.n	800468a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2205      	movs	r2, #5
 8004686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	887a      	ldrh	r2, [r7, #2]
 800469a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	887a      	ldrh	r2, [r7, #2]
 80046ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	887a      	ldrh	r2, [r7, #2]
 80046b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d007      	beq.n	80046de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e6:	d178      	bne.n	80047da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_SPI_TransmitReceive+0x10a>
 80046f0:	8b7b      	ldrh	r3, [r7, #26]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d166      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800471a:	e053      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d11b      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x176>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d016      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x176>
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d113      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	881a      	ldrh	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	1c9a      	adds	r2, r3, #2
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d119      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x1b8>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d014      	beq.n	80047a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	b292      	uxth	r2, r2
 8004786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047a0:	2301      	movs	r3, #1
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047a4:	f7fd fa34 	bl	8001c10 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d807      	bhi.n	80047c4 <HAL_SPI_TransmitReceive+0x1d8>
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ba:	d003      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047c2:	e0a7      	b.n	8004914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1a6      	bne.n	800471c <HAL_SPI_TransmitReceive+0x130>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1a1      	bne.n	800471c <HAL_SPI_TransmitReceive+0x130>
 80047d8:	e07c      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x1fc>
 80047e2:	8b7b      	ldrh	r3, [r7, #26]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d16b      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	7812      	ldrb	r2, [r2, #0]
 80047f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480e:	e057      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d11c      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x26c>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d017      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x26c>
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	2b01      	cmp	r3, #1
 800482c:	d114      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d119      	bne.n	800489a <HAL_SPI_TransmitReceive+0x2ae>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d014      	beq.n	800489a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004896:	2301      	movs	r3, #1
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800489a:	f7fd f9b9 	bl	8001c10 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d803      	bhi.n	80048b2 <HAL_SPI_TransmitReceive+0x2c6>
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x2cc>
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048be:	e029      	b.n	8004914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1a2      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x224>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d19d      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f917 	bl	8004b0c <SPI_EndRxTxTransaction>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d006      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048f0:	e010      	b.n	8004914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	e000      	b.n	8004914 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004928:	4618      	mov	r0, r3
 800492a:	3730      	adds	r7, #48	; 0x30
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004940:	f7fd f966 	bl	8001c10 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	4413      	add	r3, r2
 800494e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004950:	f7fd f95e 	bl	8001c10 <HAL_GetTick>
 8004954:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004956:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	015b      	lsls	r3, r3, #5
 800495c:	0d1b      	lsrs	r3, r3, #20
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004966:	e054      	b.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800496e:	d050      	beq.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004970:	f7fd f94e 	bl	8001c10 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	429a      	cmp	r2, r3
 800497e:	d902      	bls.n	8004986 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d13d      	bne.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004994:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499e:	d111      	bne.n	80049c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a8:	d004      	beq.n	80049b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b2:	d107      	bne.n	80049c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049cc:	d10f      	bne.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e017      	b.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d19b      	bne.n	8004968 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000010 	.word	0x20000010

08004a40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a54:	d111      	bne.n	8004a7a <SPI_EndRxTransaction+0x3a>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5e:	d004      	beq.n	8004a6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a68:	d107      	bne.n	8004a7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a82:	d12a      	bne.n	8004ada <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8c:	d012      	beq.n	8004ab4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff ff49 	bl	8004930 <SPI_WaitFlagStateUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d02d      	beq.n	8004b00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	f043 0220 	orr.w	r2, r3, #32
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e026      	b.n	8004b02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2200      	movs	r2, #0
 8004abc:	2101      	movs	r1, #1
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff36 	bl	8004930 <SPI_WaitFlagStateUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01a      	beq.n	8004b00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e013      	b.n	8004b02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ff23 	bl	8004930 <SPI_WaitFlagStateUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e000      	b.n	8004b02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <SPI_EndRxTxTransaction+0x7c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <SPI_EndRxTxTransaction+0x80>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	0d5b      	lsrs	r3, r3, #21
 8004b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b36:	d112      	bne.n	8004b5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff fef4 	bl	8004930 <SPI_WaitFlagStateUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d016      	beq.n	8004b7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e00f      	b.n	8004b7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d0f2      	beq.n	8004b5e <SPI_EndRxTxTransaction+0x52>
 8004b78:	e000      	b.n	8004b7c <SPI_EndRxTxTransaction+0x70>
        break;
 8004b7a:	bf00      	nop
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	165e9f81 	.word	0x165e9f81

08004b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b90:	b084      	sub	sp, #16
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	f107 001c 	add.w	r0, r7, #28
 8004b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d122      	bne.n	8004bee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d105      	bne.n	8004be2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f001 fbee 	bl	80063c4 <USB_CoreReset>
 8004be8:	4603      	mov	r3, r0
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	e01a      	b.n	8004c24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 fbe2 	bl	80063c4 <USB_CoreReset>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
 8004c16:	e005      	b.n	8004c24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10b      	bne.n	8004c42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f043 0206 	orr.w	r2, r3, #6
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c4e:	b004      	add	sp, #16
 8004c50:	4770      	bx	lr
	...

08004c54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d165      	bne.n	8004d34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4a41      	ldr	r2, [pc, #260]	; (8004d70 <USB_SetTurnaroundTime+0x11c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d906      	bls.n	8004c7e <USB_SetTurnaroundTime+0x2a>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <USB_SetTurnaroundTime+0x120>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d202      	bcs.n	8004c7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c78:	230f      	movs	r3, #15
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e062      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4a3c      	ldr	r2, [pc, #240]	; (8004d74 <USB_SetTurnaroundTime+0x120>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d306      	bcc.n	8004c94 <USB_SetTurnaroundTime+0x40>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4a3b      	ldr	r2, [pc, #236]	; (8004d78 <USB_SetTurnaroundTime+0x124>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d202      	bcs.n	8004c94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c8e:	230e      	movs	r3, #14
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e057      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4a38      	ldr	r2, [pc, #224]	; (8004d78 <USB_SetTurnaroundTime+0x124>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d306      	bcc.n	8004caa <USB_SetTurnaroundTime+0x56>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4a37      	ldr	r2, [pc, #220]	; (8004d7c <USB_SetTurnaroundTime+0x128>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d202      	bcs.n	8004caa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ca4:	230d      	movs	r3, #13
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e04c      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4a33      	ldr	r2, [pc, #204]	; (8004d7c <USB_SetTurnaroundTime+0x128>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d306      	bcc.n	8004cc0 <USB_SetTurnaroundTime+0x6c>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4a32      	ldr	r2, [pc, #200]	; (8004d80 <USB_SetTurnaroundTime+0x12c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d802      	bhi.n	8004cc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004cba:	230c      	movs	r3, #12
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e041      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4a2f      	ldr	r2, [pc, #188]	; (8004d80 <USB_SetTurnaroundTime+0x12c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d906      	bls.n	8004cd6 <USB_SetTurnaroundTime+0x82>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4a2e      	ldr	r2, [pc, #184]	; (8004d84 <USB_SetTurnaroundTime+0x130>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d802      	bhi.n	8004cd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004cd0:	230b      	movs	r3, #11
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e036      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4a2a      	ldr	r2, [pc, #168]	; (8004d84 <USB_SetTurnaroundTime+0x130>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d906      	bls.n	8004cec <USB_SetTurnaroundTime+0x98>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4a29      	ldr	r2, [pc, #164]	; (8004d88 <USB_SetTurnaroundTime+0x134>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d802      	bhi.n	8004cec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ce6:	230a      	movs	r3, #10
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e02b      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4a26      	ldr	r2, [pc, #152]	; (8004d88 <USB_SetTurnaroundTime+0x134>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d906      	bls.n	8004d02 <USB_SetTurnaroundTime+0xae>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <USB_SetTurnaroundTime+0x138>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d202      	bcs.n	8004d02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004cfc:	2309      	movs	r3, #9
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e020      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <USB_SetTurnaroundTime+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d306      	bcc.n	8004d18 <USB_SetTurnaroundTime+0xc4>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <USB_SetTurnaroundTime+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d802      	bhi.n	8004d18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d12:	2308      	movs	r3, #8
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e015      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4a1d      	ldr	r2, [pc, #116]	; (8004d90 <USB_SetTurnaroundTime+0x13c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d906      	bls.n	8004d2e <USB_SetTurnaroundTime+0xda>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4a1c      	ldr	r2, [pc, #112]	; (8004d94 <USB_SetTurnaroundTime+0x140>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d202      	bcs.n	8004d2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d28:	2307      	movs	r3, #7
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	e00a      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d2e:	2306      	movs	r3, #6
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	e007      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d3a:	2309      	movs	r3, #9
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e001      	b.n	8004d44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d40:	2309      	movs	r3, #9
 8004d42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	029b      	lsls	r3, r3, #10
 8004d58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	00d8acbf 	.word	0x00d8acbf
 8004d74:	00e4e1c0 	.word	0x00e4e1c0
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	01067380 	.word	0x01067380
 8004d80:	011a499f 	.word	0x011a499f
 8004d84:	01312cff 	.word	0x01312cff
 8004d88:	014ca43f 	.word	0x014ca43f
 8004d8c:	016e3600 	.word	0x016e3600
 8004d90:	01a6ab1f 	.word	0x01a6ab1f
 8004d94:	01e84800 	.word	0x01e84800

08004d98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f043 0201 	orr.w	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f023 0201 	bic.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d115      	bne.n	8004e2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	f7fc ff0c 	bl	8001c28 <HAL_Delay>
      ms++;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f001 fa45 	bl	80062a6 <USB_GetMode>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d01e      	beq.n	8004e60 <USB_SetCurrentMode+0x84>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b31      	cmp	r3, #49	; 0x31
 8004e26:	d9f0      	bls.n	8004e0a <USB_SetCurrentMode+0x2e>
 8004e28:	e01a      	b.n	8004e60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d115      	bne.n	8004e5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	f7fc fef3 	bl	8001c28 <HAL_Delay>
      ms++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 fa2c 	bl	80062a6 <USB_GetMode>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <USB_SetCurrentMode+0x84>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b31      	cmp	r3, #49	; 0x31
 8004e58:	d9f0      	bls.n	8004e3c <USB_SetCurrentMode+0x60>
 8004e5a:	e001      	b.n	8004e60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e005      	b.n	8004e6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b32      	cmp	r3, #50	; 0x32
 8004e64:	d101      	bne.n	8004e6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e74:	b084      	sub	sp, #16
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	e009      	b.n	8004ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3340      	adds	r3, #64	; 0x40
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b0e      	cmp	r3, #14
 8004eac:	d9f2      	bls.n	8004e94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d11c      	bne.n	8004eee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ec2:	f043 0302 	orr.w	r3, r3, #2
 8004ec6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
 8004eec:	e00b      	b.n	8004f06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2300      	movs	r3, #0
 8004f10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f18:	4619      	mov	r1, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f20:	461a      	mov	r2, r3
 8004f22:	680b      	ldr	r3, [r1, #0]
 8004f24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10c      	bne.n	8004f46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f32:	2100      	movs	r1, #0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f965 	bl	8005204 <USB_SetDevSpeed>
 8004f3a:	e008      	b.n	8004f4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f960 	bl	8005204 <USB_SetDevSpeed>
 8004f44:	e003      	b.n	8004f4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f46:	2103      	movs	r1, #3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f95b 	bl	8005204 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f4e:	2110      	movs	r1, #16
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f8f3 	bl	800513c <USB_FlushTxFifo>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f91f 	bl	80051a4 <USB_FlushRxFifo>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	461a      	mov	r2, r3
 8004f78:	2300      	movs	r3, #0
 8004f7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	461a      	mov	r2, r3
 8004f84:	2300      	movs	r3, #0
 8004f86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	461a      	mov	r2, r3
 8004f90:	2300      	movs	r3, #0
 8004f92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	e043      	b.n	8005022 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb0:	d118      	bne.n	8004fe4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e013      	b.n	8004ff6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e008      	b.n	8004ff6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	461a      	mov	r2, r3
 8005004:	2300      	movs	r3, #0
 8005006:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	461a      	mov	r2, r3
 8005016:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800501a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	3301      	adds	r3, #1
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d3b7      	bcc.n	8004f9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	e043      	b.n	80050b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005046:	d118      	bne.n	800507a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	461a      	mov	r2, r3
 800505c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e013      	b.n	800508c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	461a      	mov	r2, r3
 8005072:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e008      	b.n	800508c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	461a      	mov	r2, r3
 8005088:	2300      	movs	r3, #0
 800508a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	461a      	mov	r2, r3
 800509a:	2300      	movs	r3, #0
 800509c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	461a      	mov	r2, r3
 80050ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3301      	adds	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3b7      	bcc.n	8005030 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f043 0210 	orr.w	r2, r3, #16
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <USB_DevInit+0x2c4>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f043 0208 	orr.w	r2, r3, #8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d107      	bne.n	8005128 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005120:	f043 0304 	orr.w	r3, r3, #4
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005128:	7dfb      	ldrb	r3, [r7, #23]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005134:	b004      	add	sp, #16
 8005136:	4770      	bx	lr
 8005138:	803c3800 	.word	0x803c3800

0800513c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3301      	adds	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <USB_FlushTxFifo+0x64>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e01b      	b.n	8005194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	daf2      	bge.n	800514a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	019b      	lsls	r3, r3, #6
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3301      	adds	r3, #1
 8005178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <USB_FlushTxFifo+0x64>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e006      	b.n	8005194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d0f0      	beq.n	8005174 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	00030d40 	.word	0x00030d40

080051a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a11      	ldr	r2, [pc, #68]	; (8005200 <USB_FlushRxFifo+0x5c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e018      	b.n	80051f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	daf2      	bge.n	80051b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2210      	movs	r2, #16
 80051d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a08      	ldr	r2, [pc, #32]	; (8005200 <USB_FlushRxFifo+0x5c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e006      	b.n	80051f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d0f0      	beq.n	80051d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	00030d40 	.word	0x00030d40

08005204 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005236:	b480      	push	{r7}
 8005238:	b087      	sub	sp, #28
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0306 	and.w	r3, r3, #6
 800524e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
 800525a:	e00a      	b.n	8005272 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d002      	beq.n	8005268 <USB_GetDevSpeed+0x32>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b06      	cmp	r3, #6
 8005266:	d102      	bne.n	800526e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005268:	2302      	movs	r3, #2
 800526a:	75fb      	strb	r3, [r7, #23]
 800526c:	e001      	b.n	8005272 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800526e:	230f      	movs	r3, #15
 8005270:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005272:	7dfb      	ldrb	r3, [r7, #23]
}
 8005274:	4618      	mov	r0, r3
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d13a      	bne.n	8005312 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	2101      	movs	r1, #1
 80052ae:	fa01 f303 	lsl.w	r3, r1, r3
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d155      	bne.n	8005380 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	791b      	ldrb	r3, [r3, #4]
 80052ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	059b      	lsls	r3, r3, #22
 80052f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052f8:	4313      	orrs	r3, r2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e036      	b.n	8005380 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	2101      	movs	r1, #1
 8005324:	fa01 f303 	lsl.w	r3, r1, r3
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005330:	4313      	orrs	r3, r2
 8005332:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11a      	bne.n	8005380 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	791b      	ldrb	r3, [r3, #4]
 8005364:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005366:	430b      	orrs	r3, r1
 8005368:	4313      	orrs	r3, r2
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d161      	bne.n	8005470 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053c2:	d11f      	bne.n	8005404 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	0151      	lsls	r1, r2, #5
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	440a      	add	r2, r1
 80053fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005402:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	2101      	movs	r1, #1
 8005416:	fa01 f303 	lsl.w	r3, r1, r3
 800541a:	b29b      	uxth	r3, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005424:	4013      	ands	r3, r2
 8005426:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	2101      	movs	r1, #1
 800543a:	fa01 f303 	lsl.w	r3, r1, r3
 800543e:	b29b      	uxth	r3, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005448:	4013      	ands	r3, r2
 800544a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	0159      	lsls	r1, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	440b      	add	r3, r1
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	4619      	mov	r1, r3
 8005468:	4b35      	ldr	r3, [pc, #212]	; (8005540 <USB_DeactivateEndpoint+0x1b0>)
 800546a:	4013      	ands	r3, r2
 800546c:	600b      	str	r3, [r1, #0]
 800546e:	e060      	b.n	8005532 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005486:	d11f      	bne.n	80054c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	2101      	movs	r1, #1
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	43db      	mvns	r3, r3
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e8:	4013      	ands	r3, r2
 80054ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	2101      	movs	r1, #1
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	43db      	mvns	r3, r3
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800550c:	4013      	ands	r3, r2
 800550e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	0159      	lsls	r1, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	440b      	add	r3, r1
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	4619      	mov	r1, r3
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <USB_DeactivateEndpoint+0x1b4>)
 800552e:	4013      	ands	r3, r2
 8005530:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	ec337800 	.word	0xec337800
 8005544:	eff37800 	.word	0xeff37800

08005548 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	2b01      	cmp	r3, #1
 8005566:	f040 815c 	bne.w	8005822 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d132      	bne.n	80055d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005590:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005594:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d0:	0cdb      	lsrs	r3, r3, #19
 80055d2:	04db      	lsls	r3, r3, #19
 80055d4:	6113      	str	r3, [r2, #16]
 80055d6:	e074      	b.n	80056c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	0cdb      	lsrs	r3, r3, #19
 80055f4:	04db      	lsls	r3, r3, #19
 80055f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005616:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800561a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6999      	ldr	r1, [r3, #24]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	440b      	add	r3, r1
 8005634:	1e59      	subs	r1, r3, #1
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	fbb1 f3f3 	udiv	r3, r1, r3
 800563e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005640:	4b9d      	ldr	r3, [pc, #628]	; (80058b8 <USB_EPStartXfer+0x370>)
 8005642:	400b      	ands	r3, r1
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	0148      	lsls	r0, r1, #5
 8005648:	69f9      	ldr	r1, [r7, #28]
 800564a:	4401      	add	r1, r0
 800564c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005650:	4313      	orrs	r3, r2
 8005652:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800566a:	69b9      	ldr	r1, [r7, #24]
 800566c:	0148      	lsls	r0, r1, #5
 800566e:	69f9      	ldr	r1, [r7, #28]
 8005670:	4401      	add	r1, r0
 8005672:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005676:	4313      	orrs	r3, r2
 8005678:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	791b      	ldrb	r3, [r3, #4]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d11f      	bne.n	80056c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80056a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d14b      	bne.n	8005760 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	461a      	mov	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	791b      	ldrb	r3, [r3, #4]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d128      	bne.n	800573e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d110      	bne.n	800571e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	0151      	lsls	r1, r2, #5
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	440a      	add	r2, r1
 8005712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005716:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	e00f      	b.n	800573e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005758:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e133      	b.n	80059c8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800577e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	791b      	ldrb	r3, [r3, #4]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d015      	beq.n	80057b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 811b 	beq.w	80059c8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	2101      	movs	r1, #1
 80057a4:	fa01 f303 	lsl.w	r3, r1, r3
 80057a8:	69f9      	ldr	r1, [r7, #28]
 80057aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ae:	4313      	orrs	r3, r2
 80057b0:	634b      	str	r3, [r1, #52]	; 0x34
 80057b2:	e109      	b.n	80059c8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d110      	bne.n	80057e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e00f      	b.n	8005806 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005804:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6919      	ldr	r1, [r3, #16]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	b298      	uxth	r0, r3
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	4603      	mov	r3, r0
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fade 	bl	8005ddc <USB_WritePacket>
 8005820:	e0d2      	b.n	80059c8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583c:	0cdb      	lsrs	r3, r3, #19
 800583e:	04db      	lsls	r3, r3, #19
 8005840:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005864:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d126      	bne.n	80058bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005884:	69b9      	ldr	r1, [r7, #24]
 8005886:	0148      	lsls	r0, r1, #5
 8005888:	69f9      	ldr	r1, [r7, #28]
 800588a:	4401      	add	r1, r0
 800588c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005890:	4313      	orrs	r3, r2
 8005892:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b2:	6113      	str	r3, [r2, #16]
 80058b4:	e03a      	b.n	800592c <USB_EPStartXfer+0x3e4>
 80058b6:	bf00      	nop
 80058b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	1e5a      	subs	r2, r3, #1
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	8afa      	ldrh	r2, [r7, #22]
 80058d8:	fb03 f202 	mul.w	r2, r3, r2
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	8afb      	ldrh	r3, [r7, #22]
 80058f0:	04d9      	lsls	r1, r3, #19
 80058f2:	4b38      	ldr	r3, [pc, #224]	; (80059d4 <USB_EPStartXfer+0x48c>)
 80058f4:	400b      	ands	r3, r1
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	0148      	lsls	r0, r1, #5
 80058fa:	69f9      	ldr	r1, [r7, #28]
 80058fc:	4401      	add	r1, r0
 80058fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005902:	4313      	orrs	r3, r2
 8005904:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	0148      	lsls	r0, r1, #5
 8005920:	69f9      	ldr	r1, [r7, #28]
 8005922:	4401      	add	r1, r0
 8005924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005928:	4313      	orrs	r3, r2
 800592a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d10d      	bne.n	800594e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6919      	ldr	r1, [r3, #16]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	460a      	mov	r2, r1
 800594c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	791b      	ldrb	r3, [r3, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d128      	bne.n	80059a8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d110      	bne.n	8005988 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e00f      	b.n	80059a8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	1ff80000 	.word	0x1ff80000

080059d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	f040 80ce 	bne.w	8005b96 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d132      	bne.n	8005a68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a60:	0cdb      	lsrs	r3, r3, #19
 8005a62:	04db      	lsls	r3, r3, #19
 8005a64:	6113      	str	r3, [r2, #16]
 8005a66:	e04e      	b.n	8005b06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a82:	0cdb      	lsrs	r3, r3, #19
 8005a84:	04db      	lsls	r3, r3, #19
 8005a86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aaa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d903      	bls.n	8005ac0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ade:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af6:	6939      	ldr	r1, [r7, #16]
 8005af8:	0148      	lsls	r0, r1, #5
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	4401      	add	r1, r0
 8005afe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d11e      	bne.n	8005b4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	461a      	mov	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	e097      	b.n	8005c7a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8083 	beq.w	8005c7a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	2101      	movs	r1, #1
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	6979      	ldr	r1, [r7, #20]
 8005b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b90:	4313      	orrs	r3, r2
 8005b92:	634b      	str	r3, [r1, #52]	; 0x34
 8005b94:	e071      	b.n	8005c7a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb0:	0cdb      	lsrs	r3, r3, #19
 8005bb2:	04db      	lsls	r3, r3, #19
 8005bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c28:	6939      	ldr	r1, [r7, #16]
 8005c2a:	0148      	lsls	r0, r1, #5
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	4401      	add	r1, r0
 8005c30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c34:	4313      	orrs	r3, r2
 8005c36:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d10d      	bne.n	8005c5a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	6919      	ldr	r1, [r3, #16]
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c56:	460a      	mov	r2, r1
 8005c58:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d14a      	bne.n	8005d3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cbe:	f040 8086 	bne.w	8005dce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ce4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	7812      	ldrb	r2, [r2, #0]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d902      	bls.n	8005d20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d1e:	e056      	b.n	8005dce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d38:	d0e7      	beq.n	8005d0a <USB_EPStopXfer+0x82>
 8005d3a:	e048      	b.n	8005dce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d54:	d13b      	bne.n	8005dce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d902      	bls.n	8005db4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	75fb      	strb	r3, [r7, #23]
          break;
 8005db2:	e00c      	b.n	8005dce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dcc:	d0e7      	beq.n	8005d9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4611      	mov	r1, r2
 8005de8:	461a      	mov	r2, r3
 8005dea:	460b      	mov	r3, r1
 8005dec:	71fb      	strb	r3, [r7, #7]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d123      	bne.n	8005e4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e02:	88bb      	ldrh	r3, [r7, #4]
 8005e04:	3303      	adds	r3, #3
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e018      	b.n	8005e42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	031a      	lsls	r2, r3, #12
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d3e2      	bcc.n	8005e10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3724      	adds	r7, #36	; 0x24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b08b      	sub	sp, #44	; 0x2c
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	089b      	lsrs	r3, r3, #2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e7e:	2300      	movs	r3, #0
 8005e80:	623b      	str	r3, [r7, #32]
 8005e82:	e014      	b.n	8005eae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	3301      	adds	r3, #1
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	3301      	adds	r3, #1
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	623b      	str	r3, [r7, #32]
 8005eae:	6a3a      	ldr	r2, [r7, #32]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d3e6      	bcc.n	8005e84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005eb6:	8bfb      	ldrh	r3, [r7, #30]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01e      	beq.n	8005efa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f107 0310 	add.w	r3, r7, #16
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	701a      	strb	r2, [r3, #0]
      i++;
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	3301      	adds	r3, #1
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005eee:	8bfb      	ldrh	r3, [r7, #30]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ef4:	8bfb      	ldrh	r3, [r7, #30]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ea      	bne.n	8005ed0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	372c      	adds	r7, #44	; 0x2c
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d12c      	bne.n	8005f7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	db12      	blt.n	8005f5c <USB_EPSetStall+0x54>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00f      	beq.n	8005f5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	e02b      	b.n	8005fd6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	db12      	blt.n	8005fb6 <USB_EPSetStall+0xae>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00f      	beq.n	8005fb6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fb4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d128      	bne.n	8006052 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800601e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	791b      	ldrb	r3, [r3, #4]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d003      	beq.n	8006030 <USB_EPClearStall+0x4c>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	791b      	ldrb	r3, [r3, #4]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d138      	bne.n	80060a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	e027      	b.n	80060a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	440a      	add	r2, r1
 8006068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006070:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	791b      	ldrb	r3, [r3, #4]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d003      	beq.n	8006082 <USB_EPClearStall+0x9e>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	791b      	ldrb	r3, [r3, #4]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d10f      	bne.n	80060a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060e4:	68f9      	ldr	r1, [r7, #12]
 80060e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612a:	f023 0302 	bic.w	r3, r3, #2
 800612e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800613e:	b480      	push	{r7}
 8006140:	b085      	sub	sp, #20
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006158:	f023 0303 	bic.w	r3, r3, #3
 800615c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800616c:	f043 0302 	orr.w	r3, r3, #2
 8006170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006198:	68fb      	ldr	r3, [r7, #12]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	4013      	ands	r3, r2
 80061c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	0c1b      	lsrs	r3, r3, #16
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	4013      	ands	r3, r2
 80061fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	b29b      	uxth	r3, r3
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	4013      	ands	r3, r2
 800623a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800623c:	68bb      	ldr	r3, [r7, #8]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800624a:	b480      	push	{r7}
 800624c:	b087      	sub	sp, #28
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	fa22 f303 	lsr.w	r3, r2, r3
 800627a:	01db      	lsls	r3, r3, #7
 800627c:	b2db      	uxtb	r3, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4013      	ands	r3, r2
 8006296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006298:	68bb      	ldr	r3, [r7, #8]
}
 800629a:	4618      	mov	r0, r3
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0301 	and.w	r3, r3, #1
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062e0:	f023 0307 	bic.w	r3, r3, #7
 80062e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	460b      	mov	r3, r1
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	333c      	adds	r3, #60	; 0x3c
 800631e:	3304      	adds	r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4a26      	ldr	r2, [pc, #152]	; (80063c0 <USB_EP0_OutStart+0xb8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d90a      	bls.n	8006342 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800633c:	d101      	bne.n	8006342 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e037      	b.n	80063b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	461a      	mov	r2, r3
 800634a:	2300      	movs	r3, #0
 800634c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006370:	f043 0318 	orr.w	r3, r3, #24
 8006374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006384:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006388:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d10f      	bne.n	80063b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	461a      	mov	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80063ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	4f54300a 	.word	0x4f54300a

080063c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a13      	ldr	r2, [pc, #76]	; (8006428 <USB_CoreReset+0x64>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d901      	bls.n	80063e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e01b      	b.n	800641a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	daf2      	bge.n	80063d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f043 0201 	orr.w	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3301      	adds	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a09      	ldr	r2, [pc, #36]	; (8006428 <USB_CoreReset+0x64>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d901      	bls.n	800640c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e006      	b.n	800641a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b01      	cmp	r3, #1
 8006416:	d0f0      	beq.n	80063fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	00030d40 	.word	0x00030d40

0800642c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006438:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800643c:	f002 fc94 	bl	8008d68 <USBD_static_malloc>
 8006440:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	32b0      	adds	r2, #176	; 0xb0
 8006452:	2100      	movs	r1, #0
 8006454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006458:	2302      	movs	r3, #2
 800645a:	e0d4      	b.n	8006606 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800645c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006460:	2100      	movs	r1, #0
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f002 fcfc 	bl	8008e60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	32b0      	adds	r2, #176	; 0xb0
 8006472:	68f9      	ldr	r1, [r7, #12]
 8006474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	32b0      	adds	r2, #176	; 0xb0
 8006482:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	7c1b      	ldrb	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d138      	bne.n	8006506 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006494:	4b5e      	ldr	r3, [pc, #376]	; (8006610 <USBD_CDC_Init+0x1e4>)
 8006496:	7819      	ldrb	r1, [r3, #0]
 8006498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649c:	2202      	movs	r2, #2
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f002 fb3f 	bl	8008b22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064a4:	4b5a      	ldr	r3, [pc, #360]	; (8006610 <USBD_CDC_Init+0x1e4>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f003 020f 	and.w	r2, r3, #15
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	3324      	adds	r3, #36	; 0x24
 80064ba:	2201      	movs	r2, #1
 80064bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064be:	4b55      	ldr	r3, [pc, #340]	; (8006614 <USBD_CDC_Init+0x1e8>)
 80064c0:	7819      	ldrb	r1, [r3, #0]
 80064c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064c6:	2202      	movs	r2, #2
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f002 fb2a 	bl	8008b22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064ce:	4b51      	ldr	r3, [pc, #324]	; (8006614 <USBD_CDC_Init+0x1e8>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f003 020f 	and.w	r2, r3, #15
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064e6:	2201      	movs	r2, #1
 80064e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80064ea:	4b4b      	ldr	r3, [pc, #300]	; (8006618 <USBD_CDC_Init+0x1ec>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	f003 020f 	and.w	r2, r3, #15
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	3326      	adds	r3, #38	; 0x26
 8006500:	2210      	movs	r2, #16
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e035      	b.n	8006572 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006506:	4b42      	ldr	r3, [pc, #264]	; (8006610 <USBD_CDC_Init+0x1e4>)
 8006508:	7819      	ldrb	r1, [r3, #0]
 800650a:	2340      	movs	r3, #64	; 0x40
 800650c:	2202      	movs	r2, #2
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f002 fb07 	bl	8008b22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006514:	4b3e      	ldr	r3, [pc, #248]	; (8006610 <USBD_CDC_Init+0x1e4>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f003 020f 	and.w	r2, r3, #15
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	3324      	adds	r3, #36	; 0x24
 800652a:	2201      	movs	r2, #1
 800652c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800652e:	4b39      	ldr	r3, [pc, #228]	; (8006614 <USBD_CDC_Init+0x1e8>)
 8006530:	7819      	ldrb	r1, [r3, #0]
 8006532:	2340      	movs	r3, #64	; 0x40
 8006534:	2202      	movs	r2, #2
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f002 faf3 	bl	8008b22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800653c:	4b35      	ldr	r3, [pc, #212]	; (8006614 <USBD_CDC_Init+0x1e8>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006554:	2201      	movs	r2, #1
 8006556:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006558:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <USBD_CDC_Init+0x1ec>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	3326      	adds	r3, #38	; 0x26
 800656e:	2210      	movs	r2, #16
 8006570:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006572:	4b29      	ldr	r3, [pc, #164]	; (8006618 <USBD_CDC_Init+0x1ec>)
 8006574:	7819      	ldrb	r1, [r3, #0]
 8006576:	2308      	movs	r3, #8
 8006578:	2203      	movs	r2, #3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f002 fad1 	bl	8008b22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006580:	4b25      	ldr	r3, [pc, #148]	; (8006618 <USBD_CDC_Init+0x1ec>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3324      	adds	r3, #36	; 0x24
 8006596:	2201      	movs	r2, #1
 8006598:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	33b0      	adds	r3, #176	; 0xb0
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80065d0:	2302      	movs	r3, #2
 80065d2:	e018      	b.n	8006606 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	7c1b      	ldrb	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <USBD_CDC_Init+0x1e8>)
 80065de:	7819      	ldrb	r1, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f002 fb88 	bl	8008d00 <USBD_LL_PrepareReceive>
 80065f0:	e008      	b.n	8006604 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065f2:	4b08      	ldr	r3, [pc, #32]	; (8006614 <USBD_CDC_Init+0x1e8>)
 80065f4:	7819      	ldrb	r1, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065fc:	2340      	movs	r3, #64	; 0x40
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f002 fb7e 	bl	8008d00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	200000a3 	.word	0x200000a3
 8006614:	200000a4 	.word	0x200000a4
 8006618:	200000a5 	.word	0x200000a5

0800661c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006628:	4b3a      	ldr	r3, [pc, #232]	; (8006714 <USBD_CDC_DeInit+0xf8>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f002 fa9d 	bl	8008b6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006634:	4b37      	ldr	r3, [pc, #220]	; (8006714 <USBD_CDC_DeInit+0xf8>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f003 020f 	and.w	r2, r3, #15
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	3324      	adds	r3, #36	; 0x24
 800664a:	2200      	movs	r2, #0
 800664c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800664e:	4b32      	ldr	r3, [pc, #200]	; (8006718 <USBD_CDC_DeInit+0xfc>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f002 fa8a 	bl	8008b6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800665a:	4b2f      	ldr	r3, [pc, #188]	; (8006718 <USBD_CDC_DeInit+0xfc>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f003 020f 	and.w	r2, r3, #15
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006672:	2200      	movs	r2, #0
 8006674:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006676:	4b29      	ldr	r3, [pc, #164]	; (800671c <USBD_CDC_DeInit+0x100>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f002 fa76 	bl	8008b6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006682:	4b26      	ldr	r3, [pc, #152]	; (800671c <USBD_CDC_DeInit+0x100>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f003 020f 	and.w	r2, r3, #15
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	3324      	adds	r3, #36	; 0x24
 8006698:	2200      	movs	r2, #0
 800669a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800669c:	4b1f      	ldr	r3, [pc, #124]	; (800671c <USBD_CDC_DeInit+0x100>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f003 020f 	and.w	r2, r3, #15
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	3326      	adds	r3, #38	; 0x26
 80066b2:	2200      	movs	r2, #0
 80066b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	32b0      	adds	r2, #176	; 0xb0
 80066c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01f      	beq.n	8006708 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	33b0      	adds	r3, #176	; 0xb0
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	32b0      	adds	r2, #176	; 0xb0
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f002 fb4a 	bl	8008d84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	32b0      	adds	r2, #176	; 0xb0
 80066fa:	2100      	movs	r1, #0
 80066fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200000a3 	.word	0x200000a3
 8006718:	200000a4 	.word	0x200000a4
 800671c:	200000a5 	.word	0x200000a5

08006720 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	32b0      	adds	r2, #176	; 0xb0
 8006734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006738:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800674c:	2303      	movs	r3, #3
 800674e:	e0bf      	b.n	80068d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006758:	2b00      	cmp	r3, #0
 800675a:	d050      	beq.n	80067fe <USBD_CDC_Setup+0xde>
 800675c:	2b20      	cmp	r3, #32
 800675e:	f040 80af 	bne.w	80068c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	88db      	ldrh	r3, [r3, #6]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d03a      	beq.n	80067e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b25b      	sxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	da1b      	bge.n	80067ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	33b0      	adds	r3, #176	; 0xb0
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800678a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	88d2      	ldrh	r2, [r2, #6]
 8006790:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	88db      	ldrh	r3, [r3, #6]
 8006796:	2b07      	cmp	r3, #7
 8006798:	bf28      	it	cs
 800679a:	2307      	movcs	r3, #7
 800679c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	89fa      	ldrh	r2, [r7, #14]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fd89 	bl	80082bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80067aa:	e090      	b.n	80068ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	785a      	ldrb	r2, [r3, #1]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	88db      	ldrh	r3, [r3, #6]
 80067ba:	2b3f      	cmp	r3, #63	; 0x3f
 80067bc:	d803      	bhi.n	80067c6 <USBD_CDC_Setup+0xa6>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	88db      	ldrh	r3, [r3, #6]
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	e000      	b.n	80067c8 <USBD_CDC_Setup+0xa8>
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80067ce:	6939      	ldr	r1, [r7, #16]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80067d6:	461a      	mov	r2, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fd9b 	bl	8008314 <USBD_CtlPrepareRx>
      break;
 80067de:	e076      	b.n	80068ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	33b0      	adds	r3, #176	; 0xb0
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	7850      	ldrb	r0, [r2, #1]
 80067f6:	2200      	movs	r2, #0
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	4798      	blx	r3
      break;
 80067fc:	e067      	b.n	80068ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b0b      	cmp	r3, #11
 8006804:	d851      	bhi.n	80068aa <USBD_CDC_Setup+0x18a>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBD_CDC_Setup+0xec>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	0800683d 	.word	0x0800683d
 8006810:	080068b9 	.word	0x080068b9
 8006814:	080068ab 	.word	0x080068ab
 8006818:	080068ab 	.word	0x080068ab
 800681c:	080068ab 	.word	0x080068ab
 8006820:	080068ab 	.word	0x080068ab
 8006824:	080068ab 	.word	0x080068ab
 8006828:	080068ab 	.word	0x080068ab
 800682c:	080068ab 	.word	0x080068ab
 8006830:	080068ab 	.word	0x080068ab
 8006834:	08006867 	.word	0x08006867
 8006838:	08006891 	.word	0x08006891
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b03      	cmp	r3, #3
 8006846:	d107      	bne.n	8006858 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006848:	f107 030a 	add.w	r3, r7, #10
 800684c:	2202      	movs	r2, #2
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fd33 	bl	80082bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006856:	e032      	b.n	80068be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fcbd 	bl	80081da <USBD_CtlError>
            ret = USBD_FAIL;
 8006860:	2303      	movs	r3, #3
 8006862:	75fb      	strb	r3, [r7, #23]
          break;
 8006864:	e02b      	b.n	80068be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b03      	cmp	r3, #3
 8006870:	d107      	bne.n	8006882 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006872:	f107 030d 	add.w	r3, r7, #13
 8006876:	2201      	movs	r2, #1
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fd1e 	bl	80082bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006880:	e01d      	b.n	80068be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fca8 	bl	80081da <USBD_CtlError>
            ret = USBD_FAIL;
 800688a:	2303      	movs	r3, #3
 800688c:	75fb      	strb	r3, [r7, #23]
          break;
 800688e:	e016      	b.n	80068be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b03      	cmp	r3, #3
 800689a:	d00f      	beq.n	80068bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fc9b 	bl	80081da <USBD_CtlError>
            ret = USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068a8:	e008      	b.n	80068bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fc94 	bl	80081da <USBD_CtlError>
          ret = USBD_FAIL;
 80068b2:	2303      	movs	r3, #3
 80068b4:	75fb      	strb	r3, [r7, #23]
          break;
 80068b6:	e002      	b.n	80068be <USBD_CDC_Setup+0x19e>
          break;
 80068b8:	bf00      	nop
 80068ba:	e008      	b.n	80068ce <USBD_CDC_Setup+0x1ae>
          break;
 80068bc:	bf00      	nop
      }
      break;
 80068be:	e006      	b.n	80068ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fc89 	bl	80081da <USBD_CtlError>
      ret = USBD_FAIL;
 80068c8:	2303      	movs	r3, #3
 80068ca:	75fb      	strb	r3, [r7, #23]
      break;
 80068cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80068ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	32b0      	adds	r2, #176	; 0xb0
 80068f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80068fe:	2303      	movs	r3, #3
 8006900:	e065      	b.n	80069ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	32b0      	adds	r2, #176	; 0xb0
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	f003 020f 	and.w	r2, r3, #15
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	3318      	adds	r3, #24
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d02f      	beq.n	800698c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	f003 020f 	and.w	r2, r3, #15
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	3318      	adds	r3, #24
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	f003 010f 	and.w	r1, r3, #15
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	460b      	mov	r3, r1
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	440b      	add	r3, r1
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4403      	add	r3, r0
 8006954:	3348      	adds	r3, #72	; 0x48
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	fbb2 f1f3 	udiv	r1, r2, r3
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006962:	2b00      	cmp	r3, #0
 8006964:	d112      	bne.n	800698c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	f003 020f 	and.w	r2, r3, #15
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	3318      	adds	r3, #24
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800697e:	78f9      	ldrb	r1, [r7, #3]
 8006980:	2300      	movs	r3, #0
 8006982:	2200      	movs	r2, #0
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 f99a 	bl	8008cbe <USBD_LL_Transmit>
 800698a:	e01f      	b.n	80069cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	33b0      	adds	r3, #176	; 0xb0
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d010      	beq.n	80069cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	33b0      	adds	r3, #176	; 0xb0
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80069c8:	78fa      	ldrb	r2, [r7, #3]
 80069ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	32b0      	adds	r2, #176	; 0xb0
 80069ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	32b0      	adds	r2, #176	; 0xb0
 80069fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e01a      	b.n	8006a3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f002 f998 	bl	8008d42 <USBD_LL_GetRxDataSize>
 8006a12:	4602      	mov	r2, r0
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	33b0      	adds	r3, #176	; 0xb0
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a38:	4611      	mov	r1, r2
 8006a3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	32b0      	adds	r2, #176	; 0xb0
 8006a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e025      	b.n	8006ab4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	33b0      	adds	r3, #176	; 0xb0
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01a      	beq.n	8006ab2 <USBD_CDC_EP0_RxReady+0x6c>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a82:	2bff      	cmp	r3, #255	; 0xff
 8006a84:	d015      	beq.n	8006ab2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	33b0      	adds	r3, #176	; 0xb0
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006aa6:	b292      	uxth	r2, r2
 8006aa8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	22ff      	movs	r2, #255	; 0xff
 8006aae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ac4:	2182      	movs	r1, #130	; 0x82
 8006ac6:	4818      	ldr	r0, [pc, #96]	; (8006b28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ac8:	f000 fd4f 	bl	800756a <USBD_GetEpDesc>
 8006acc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4815      	ldr	r0, [pc, #84]	; (8006b28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ad2:	f000 fd4a 	bl	800756a <USBD_GetEpDesc>
 8006ad6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ad8:	2181      	movs	r1, #129	; 0x81
 8006ada:	4813      	ldr	r0, [pc, #76]	; (8006b28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006adc:	f000 fd45 	bl	800756a <USBD_GetEpDesc>
 8006ae0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2210      	movs	r2, #16
 8006aec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006afc:	711a      	strb	r2, [r3, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b10:	711a      	strb	r2, [r3, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2243      	movs	r2, #67	; 0x43
 8006b1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b1c:	4b02      	ldr	r3, [pc, #8]	; (8006b28 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000060 	.word	0x20000060

08006b2c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b34:	2182      	movs	r1, #130	; 0x82
 8006b36:	4818      	ldr	r0, [pc, #96]	; (8006b98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b38:	f000 fd17 	bl	800756a <USBD_GetEpDesc>
 8006b3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b3e:	2101      	movs	r1, #1
 8006b40:	4815      	ldr	r0, [pc, #84]	; (8006b98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b42:	f000 fd12 	bl	800756a <USBD_GetEpDesc>
 8006b46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b48:	2181      	movs	r1, #129	; 0x81
 8006b4a:	4813      	ldr	r0, [pc, #76]	; (8006b98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b4c:	f000 fd0d 	bl	800756a <USBD_GetEpDesc>
 8006b50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2200      	movs	r2, #0
 8006b68:	711a      	strb	r2, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f042 0202 	orr.w	r2, r2, #2
 8006b70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	711a      	strb	r2, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f042 0202 	orr.w	r2, r2, #2
 8006b84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2243      	movs	r2, #67	; 0x43
 8006b8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b8c:	4b02      	ldr	r3, [pc, #8]	; (8006b98 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000060 	.word	0x20000060

08006b9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ba4:	2182      	movs	r1, #130	; 0x82
 8006ba6:	4818      	ldr	r0, [pc, #96]	; (8006c08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ba8:	f000 fcdf 	bl	800756a <USBD_GetEpDesc>
 8006bac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bae:	2101      	movs	r1, #1
 8006bb0:	4815      	ldr	r0, [pc, #84]	; (8006c08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bb2:	f000 fcda 	bl	800756a <USBD_GetEpDesc>
 8006bb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bb8:	2181      	movs	r1, #129	; 0x81
 8006bba:	4813      	ldr	r0, [pc, #76]	; (8006c08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bbc:	f000 fcd5 	bl	800756a <USBD_GetEpDesc>
 8006bc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2210      	movs	r2, #16
 8006bcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bdc:	711a      	strb	r2, [r3, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf0:	711a      	strb	r2, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2243      	movs	r2, #67	; 0x43
 8006bfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bfc:	4b02      	ldr	r3, [pc, #8]	; (8006c08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000060 	.word	0x20000060

08006c0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	220a      	movs	r2, #10
 8006c18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c1a:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	2000001c 	.word	0x2000001c

08006c2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e009      	b.n	8006c54 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	33b0      	adds	r3, #176	; 0xb0
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	32b0      	adds	r2, #176	; 0xb0
 8006c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e008      	b.n	8006c98 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	32b0      	adds	r2, #176	; 0xb0
 8006cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e004      	b.n	8006cd2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	32b0      	adds	r2, #176	; 0xb0
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32b0      	adds	r2, #176	; 0xb0
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e025      	b.n	8006d5e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11f      	bne.n	8006d5c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d24:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <USBD_CDC_TransmitPacket+0x88>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4613      	mov	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4403      	add	r3, r0
 8006d3e:	3318      	adds	r3, #24
 8006d40:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d42:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <USBD_CDC_TransmitPacket+0x88>)
 8006d44:	7819      	ldrb	r1, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 ffb3 	bl	8008cbe <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	200000a3 	.word	0x200000a3

08006d6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	32b0      	adds	r2, #176	; 0xb0
 8006d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	32b0      	adds	r2, #176	; 0xb0
 8006d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e018      	b.n	8006dcc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7c1b      	ldrb	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <USBD_CDC_ReceivePacket+0x68>)
 8006da4:	7819      	ldrb	r1, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 ffa5 	bl	8008d00 <USBD_LL_PrepareReceive>
 8006db6:	e008      	b.n	8006dca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <USBD_CDC_ReceivePacket+0x68>)
 8006dba:	7819      	ldrb	r1, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 ff9b 	bl	8008d00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200000a4 	.word	0x200000a4

08006dd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e01f      	b.n	8006e30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	79fa      	ldrb	r2, [r7, #7]
 8006e22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f001 fe15 	bl	8008a54 <USBD_LL_Init>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e025      	b.n	8006e9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32ae      	adds	r2, #174	; 0xae
 8006e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00f      	beq.n	8006e8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	32ae      	adds	r2, #174	; 0xae
 8006e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f107 020e 	add.w	r2, r7, #14
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	4602      	mov	r2, r0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 fe1d 	bl	8008aec <USBD_LL_Start>
 8006eb2:	4603      	mov	r3, r0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	4611      	mov	r1, r2
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f30:	2303      	movs	r3, #3
 8006f32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f001 f908 	bl	8008166 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f64:	461a      	mov	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d01a      	beq.n	8006fb0 <USBD_LL_SetupStage+0x72>
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d822      	bhi.n	8006fc4 <USBD_LL_SetupStage+0x86>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <USBD_LL_SetupStage+0x4a>
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d00a      	beq.n	8006f9c <USBD_LL_SetupStage+0x5e>
 8006f86:	e01d      	b.n	8006fc4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fb5f 	bl	8007654 <USBD_StdDevReq>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9a:	e020      	b.n	8006fde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fbc7 	bl	8007738 <USBD_StdItfReq>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73fb      	strb	r3, [r7, #15]
      break;
 8006fae:	e016      	b.n	8006fde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fc29 	bl	8007810 <USBD_StdEPReq>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc2:	e00c      	b.n	8006fde <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fdea 	bl	8008bac <USBD_LL_StallEP>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	bf00      	nop
  }

  return ret;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d16e      	bne.n	80070de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007006:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800700e:	2b03      	cmp	r3, #3
 8007010:	f040 8098 	bne.w	8007144 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	429a      	cmp	r2, r3
 800701e:	d913      	bls.n	8007048 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	1ad2      	subs	r2, r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	4293      	cmp	r3, r2
 8007038:	bf28      	it	cs
 800703a:	4613      	movcs	r3, r2
 800703c:	461a      	mov	r2, r3
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f001 f984 	bl	800834e <USBD_CtlContinueRx>
 8007046:	e07d      	b.n	8007144 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800704e:	f003 031f 	and.w	r3, r3, #31
 8007052:	2b02      	cmp	r3, #2
 8007054:	d014      	beq.n	8007080 <USBD_LL_DataOutStage+0x98>
 8007056:	2b02      	cmp	r3, #2
 8007058:	d81d      	bhi.n	8007096 <USBD_LL_DataOutStage+0xae>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <USBD_LL_DataOutStage+0x7c>
 800705e:	2b01      	cmp	r3, #1
 8007060:	d003      	beq.n	800706a <USBD_LL_DataOutStage+0x82>
 8007062:	e018      	b.n	8007096 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	75bb      	strb	r3, [r7, #22]
            break;
 8007068:	e018      	b.n	800709c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007070:	b2db      	uxtb	r3, r3
 8007072:	4619      	mov	r1, r3
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fa5e 	bl	8007536 <USBD_CoreFindIF>
 800707a:	4603      	mov	r3, r0
 800707c:	75bb      	strb	r3, [r7, #22]
            break;
 800707e:	e00d      	b.n	800709c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007086:	b2db      	uxtb	r3, r3
 8007088:	4619      	mov	r1, r3
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fa60 	bl	8007550 <USBD_CoreFindEP>
 8007090:	4603      	mov	r3, r0
 8007092:	75bb      	strb	r3, [r7, #22]
            break;
 8007094:	e002      	b.n	800709c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	75bb      	strb	r3, [r7, #22]
            break;
 800709a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800709c:	7dbb      	ldrb	r3, [r7, #22]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d119      	bne.n	80070d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d113      	bne.n	80070d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80070ae:	7dba      	ldrb	r2, [r7, #22]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	32ae      	adds	r2, #174	; 0xae
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80070be:	7dba      	ldrb	r2, [r7, #22]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80070c6:	7dba      	ldrb	r2, [r7, #22]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	32ae      	adds	r2, #174	; 0xae
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f001 f94a 	bl	8008370 <USBD_CtlSendStatus>
 80070dc:	e032      	b.n	8007144 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070de:	7afb      	ldrb	r3, [r7, #11]
 80070e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	4619      	mov	r1, r3
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fa31 	bl	8007550 <USBD_CoreFindEP>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070f2:	7dbb      	ldrb	r3, [r7, #22]
 80070f4:	2bff      	cmp	r3, #255	; 0xff
 80070f6:	d025      	beq.n	8007144 <USBD_LL_DataOutStage+0x15c>
 80070f8:	7dbb      	ldrb	r3, [r7, #22]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d122      	bne.n	8007144 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d117      	bne.n	800713a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800710a:	7dba      	ldrb	r2, [r7, #22]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	32ae      	adds	r2, #174	; 0xae
 8007110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00f      	beq.n	800713a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800711a:	7dba      	ldrb	r2, [r7, #22]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007122:	7dba      	ldrb	r2, [r7, #22]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	32ae      	adds	r2, #174	; 0xae
 8007128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	7afa      	ldrb	r2, [r7, #11]
 8007130:	4611      	mov	r1, r2
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	4798      	blx	r3
 8007136:	4603      	mov	r3, r0
 8007138:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	e000      	b.n	8007146 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	460b      	mov	r3, r1
 8007158:	607a      	str	r2, [r7, #4]
 800715a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d16f      	bne.n	8007242 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3314      	adds	r3, #20
 8007166:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800716e:	2b02      	cmp	r3, #2
 8007170:	d15a      	bne.n	8007228 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	429a      	cmp	r2, r3
 800717c:	d914      	bls.n	80071a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	461a      	mov	r2, r3
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f001 f8ac 	bl	80082f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800719a:	2300      	movs	r3, #0
 800719c:	2200      	movs	r2, #0
 800719e:	2100      	movs	r1, #0
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f001 fdad 	bl	8008d00 <USBD_LL_PrepareReceive>
 80071a6:	e03f      	b.n	8007228 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d11c      	bne.n	80071ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071bc:	429a      	cmp	r2, r3
 80071be:	d316      	bcc.n	80071ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d20f      	bcs.n	80071ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071ce:	2200      	movs	r2, #0
 80071d0:	2100      	movs	r1, #0
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f001 f88d 	bl	80082f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071e0:	2300      	movs	r3, #0
 80071e2:	2200      	movs	r2, #0
 80071e4:	2100      	movs	r1, #0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f001 fd8a 	bl	8008d00 <USBD_LL_PrepareReceive>
 80071ec:	e01c      	b.n	8007228 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d10f      	bne.n	800721a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800721a:	2180      	movs	r1, #128	; 0x80
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f001 fcc5 	bl	8008bac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f001 f8b7 	bl	8008396 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d03a      	beq.n	80072a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7ff fe42 	bl	8006ebc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007240:	e032      	b.n	80072a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007248:	b2db      	uxtb	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f97f 	bl	8007550 <USBD_CoreFindEP>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2bff      	cmp	r3, #255	; 0xff
 800725a:	d025      	beq.n	80072a8 <USBD_LL_DataInStage+0x15a>
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d122      	bne.n	80072a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b03      	cmp	r3, #3
 800726c:	d11c      	bne.n	80072a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800726e:	7dfa      	ldrb	r2, [r7, #23]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	32ae      	adds	r2, #174	; 0xae
 8007274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d014      	beq.n	80072a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800727e:	7dfa      	ldrb	r2, [r7, #23]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007286:	7dfa      	ldrb	r2, [r7, #23]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	32ae      	adds	r2, #174	; 0xae
 800728c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	7afa      	ldrb	r2, [r7, #11]
 8007294:	4611      	mov	r1, r2
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	4798      	blx	r3
 800729a:	4603      	mov	r3, r0
 800729c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800729e:	7dbb      	ldrb	r3, [r7, #22]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80072a4:	7dbb      	ldrb	r3, [r7, #22]
 80072a6:	e000      	b.n	80072aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d014      	beq.n	8007318 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00e      	beq.n	8007318 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6852      	ldr	r2, [r2, #4]
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	4611      	mov	r1, r2
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007318:	2340      	movs	r3, #64	; 0x40
 800731a:	2200      	movs	r2, #0
 800731c:	2100      	movs	r1, #0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fbff 	bl	8008b22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2240      	movs	r2, #64	; 0x40
 8007330:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007334:	2340      	movs	r3, #64	; 0x40
 8007336:	2200      	movs	r2, #0
 8007338:	2180      	movs	r1, #128	; 0x80
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fbf1 	bl	8008b22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2240      	movs	r2, #64	; 0x40
 800734a:	621a      	str	r2, [r3, #32]

  return ret;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007384:	b2da      	uxtb	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2204      	movs	r2, #4
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d106      	bne.n	80073c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d110      	bne.n	8007408 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	32ae      	adds	r2, #174	; 0xae
 8007428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007430:	2303      	movs	r3, #3
 8007432:	e01c      	b.n	800746e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b03      	cmp	r3, #3
 800743e:	d115      	bne.n	800746c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32ae      	adds	r2, #174	; 0xae
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32ae      	adds	r2, #174	; 0xae
 800745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	78fa      	ldrb	r2, [r7, #3]
 8007466:	4611      	mov	r1, r2
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	460b      	mov	r3, r1
 8007480:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	32ae      	adds	r2, #174	; 0xae
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007494:	2303      	movs	r3, #3
 8007496:	e01c      	b.n	80074d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d115      	bne.n	80074d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	32ae      	adds	r2, #174	; 0xae
 80074ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	32ae      	adds	r2, #174	; 0xae
 80074c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	4611      	mov	r1, r2
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00e      	beq.n	800752c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6852      	ldr	r2, [r2, #4]
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	4611      	mov	r1, r2
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007528:	2303      	movs	r3, #3
 800752a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007542:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800755c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b086      	sub	sp, #24
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800757e:	2300      	movs	r3, #0
 8007580:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	885b      	ldrh	r3, [r3, #2]
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	429a      	cmp	r2, r3
 8007590:	d920      	bls.n	80075d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800759a:	e013      	b.n	80075c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800759c:	f107 030a 	add.w	r3, r7, #10
 80075a0:	4619      	mov	r1, r3
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f000 f81b 	bl	80075de <USBD_GetNextDesc>
 80075a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b05      	cmp	r3, #5
 80075b0:	d108      	bne.n	80075c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	789b      	ldrb	r3, [r3, #2]
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d008      	beq.n	80075d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	885b      	ldrh	r3, [r3, #2]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d8e5      	bhi.n	800759c <USBD_GetEpDesc+0x32>
 80075d0:	e000      	b.n	80075d4 <USBD_GetEpDesc+0x6a>
          break;
 80075d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075d4:	693b      	ldr	r3, [r7, #16]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	881a      	ldrh	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	4413      	add	r3, r2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4413      	add	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800760a:	68fb      	ldr	r3, [r7, #12]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3301      	adds	r3, #1
 800762e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007636:	8a3b      	ldrh	r3, [r7, #16]
 8007638:	021b      	lsls	r3, r3, #8
 800763a:	b21a      	sxth	r2, r3
 800763c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007640:	4313      	orrs	r3, r2
 8007642:	b21b      	sxth	r3, r3
 8007644:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007646:	89fb      	ldrh	r3, [r7, #14]
}
 8007648:	4618      	mov	r0, r3
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d005      	beq.n	800767a <USBD_StdDevReq+0x26>
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d857      	bhi.n	8007722 <USBD_StdDevReq+0xce>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00f      	beq.n	8007696 <USBD_StdDevReq+0x42>
 8007676:	2b20      	cmp	r3, #32
 8007678:	d153      	bne.n	8007722 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	32ae      	adds	r2, #174	; 0xae
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	e04a      	b.n	800772c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	785b      	ldrb	r3, [r3, #1]
 800769a:	2b09      	cmp	r3, #9
 800769c:	d83b      	bhi.n	8007716 <USBD_StdDevReq+0xc2>
 800769e:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <USBD_StdDevReq+0x50>)
 80076a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a4:	080076f9 	.word	0x080076f9
 80076a8:	0800770d 	.word	0x0800770d
 80076ac:	08007717 	.word	0x08007717
 80076b0:	08007703 	.word	0x08007703
 80076b4:	08007717 	.word	0x08007717
 80076b8:	080076d7 	.word	0x080076d7
 80076bc:	080076cd 	.word	0x080076cd
 80076c0:	08007717 	.word	0x08007717
 80076c4:	080076ef 	.word	0x080076ef
 80076c8:	080076e1 	.word	0x080076e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa3c 	bl	8007b4c <USBD_GetDescriptor>
          break;
 80076d4:	e024      	b.n	8007720 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fba1 	bl	8007e20 <USBD_SetAddress>
          break;
 80076de:	e01f      	b.n	8007720 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fbe0 	bl	8007ea8 <USBD_SetConfig>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]
          break;
 80076ec:	e018      	b.n	8007720 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc83 	bl	8007ffc <USBD_GetConfig>
          break;
 80076f6:	e013      	b.n	8007720 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fcb4 	bl	8008068 <USBD_GetStatus>
          break;
 8007700:	e00e      	b.n	8007720 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fce3 	bl	80080d0 <USBD_SetFeature>
          break;
 800770a:	e009      	b.n	8007720 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fd07 	bl	8008122 <USBD_ClrFeature>
          break;
 8007714:	e004      	b.n	8007720 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fd5e 	bl	80081da <USBD_CtlError>
          break;
 800771e:	bf00      	nop
      }
      break;
 8007720:	e004      	b.n	800772c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fd58 	bl	80081da <USBD_CtlError>
      break;
 800772a:	bf00      	nop
  }

  return ret;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop

08007738 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	d005      	beq.n	800775e <USBD_StdItfReq+0x26>
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d852      	bhi.n	80077fc <USBD_StdItfReq+0xc4>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <USBD_StdItfReq+0x26>
 800775a:	2b20      	cmp	r3, #32
 800775c:	d14e      	bne.n	80077fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007764:	b2db      	uxtb	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	2b02      	cmp	r3, #2
 800776a:	d840      	bhi.n	80077ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	889b      	ldrh	r3, [r3, #4]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b01      	cmp	r3, #1
 8007774:	d836      	bhi.n	80077e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	889b      	ldrh	r3, [r3, #4]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff fed9 	bl	8007536 <USBD_CoreFindIF>
 8007784:	4603      	mov	r3, r0
 8007786:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	2bff      	cmp	r3, #255	; 0xff
 800778c:	d01d      	beq.n	80077ca <USBD_StdItfReq+0x92>
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11a      	bne.n	80077ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007794:	7bba      	ldrb	r2, [r7, #14]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	32ae      	adds	r2, #174	; 0xae
 800779a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80077a4:	7bba      	ldrb	r2, [r7, #14]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077ac:	7bba      	ldrb	r2, [r7, #14]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	32ae      	adds	r2, #174	; 0xae
 80077b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077c2:	e004      	b.n	80077ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077c8:	e001      	b.n	80077ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80077ca:	2303      	movs	r3, #3
 80077cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	88db      	ldrh	r3, [r3, #6]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d110      	bne.n	80077f8 <USBD_StdItfReq+0xc0>
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10d      	bne.n	80077f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fdc7 	bl	8008370 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077e2:	e009      	b.n	80077f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fcf7 	bl	80081da <USBD_CtlError>
          break;
 80077ec:	e004      	b.n	80077f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fcf2 	bl	80081da <USBD_CtlError>
          break;
 80077f6:	e000      	b.n	80077fa <USBD_StdItfReq+0xc2>
          break;
 80077f8:	bf00      	nop
      }
      break;
 80077fa:	e004      	b.n	8007806 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fceb 	bl	80081da <USBD_CtlError>
      break;
 8007804:	bf00      	nop
  }

  return ret;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	889b      	ldrh	r3, [r3, #4]
 8007822:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800782c:	2b40      	cmp	r3, #64	; 0x40
 800782e:	d007      	beq.n	8007840 <USBD_StdEPReq+0x30>
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	f200 817f 	bhi.w	8007b34 <USBD_StdEPReq+0x324>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d02a      	beq.n	8007890 <USBD_StdEPReq+0x80>
 800783a:	2b20      	cmp	r3, #32
 800783c:	f040 817a 	bne.w	8007b34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff fe83 	bl	8007550 <USBD_CoreFindEP>
 800784a:	4603      	mov	r3, r0
 800784c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800784e:	7b7b      	ldrb	r3, [r7, #13]
 8007850:	2bff      	cmp	r3, #255	; 0xff
 8007852:	f000 8174 	beq.w	8007b3e <USBD_StdEPReq+0x32e>
 8007856:	7b7b      	ldrb	r3, [r7, #13]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f040 8170 	bne.w	8007b3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800785e:	7b7a      	ldrb	r2, [r7, #13]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007866:	7b7a      	ldrb	r2, [r7, #13]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	32ae      	adds	r2, #174	; 0xae
 800786c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 8163 	beq.w	8007b3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007878:	7b7a      	ldrb	r2, [r7, #13]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32ae      	adds	r2, #174	; 0xae
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	4798      	blx	r3
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800788e:	e156      	b.n	8007b3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b03      	cmp	r3, #3
 8007896:	d008      	beq.n	80078aa <USBD_StdEPReq+0x9a>
 8007898:	2b03      	cmp	r3, #3
 800789a:	f300 8145 	bgt.w	8007b28 <USBD_StdEPReq+0x318>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 809b 	beq.w	80079da <USBD_StdEPReq+0x1ca>
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d03c      	beq.n	8007922 <USBD_StdEPReq+0x112>
 80078a8:	e13e      	b.n	8007b28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d002      	beq.n	80078bc <USBD_StdEPReq+0xac>
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d016      	beq.n	80078e8 <USBD_StdEPReq+0xd8>
 80078ba:	e02c      	b.n	8007916 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00d      	beq.n	80078de <USBD_StdEPReq+0xce>
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b80      	cmp	r3, #128	; 0x80
 80078c6:	d00a      	beq.n	80078de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 f96d 	bl	8008bac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 f969 	bl	8008bac <USBD_LL_StallEP>
 80078da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078dc:	e020      	b.n	8007920 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc7a 	bl	80081da <USBD_CtlError>
              break;
 80078e6:	e01b      	b.n	8007920 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	885b      	ldrh	r3, [r3, #2]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10e      	bne.n	800790e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <USBD_StdEPReq+0xfe>
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b80      	cmp	r3, #128	; 0x80
 80078fa:	d008      	beq.n	800790e <USBD_StdEPReq+0xfe>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	88db      	ldrh	r3, [r3, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 f94f 	bl	8008bac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fd2e 	bl	8008370 <USBD_CtlSendStatus>

              break;
 8007914:	e004      	b.n	8007920 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc5e 	bl	80081da <USBD_CtlError>
              break;
 800791e:	bf00      	nop
          }
          break;
 8007920:	e107      	b.n	8007b32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d002      	beq.n	8007934 <USBD_StdEPReq+0x124>
 800792e:	2b03      	cmp	r3, #3
 8007930:	d016      	beq.n	8007960 <USBD_StdEPReq+0x150>
 8007932:	e04b      	b.n	80079cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00d      	beq.n	8007956 <USBD_StdEPReq+0x146>
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b80      	cmp	r3, #128	; 0x80
 800793e:	d00a      	beq.n	8007956 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 f931 	bl	8008bac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800794a:	2180      	movs	r1, #128	; 0x80
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 f92d 	bl	8008bac <USBD_LL_StallEP>
 8007952:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007954:	e040      	b.n	80079d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc3e 	bl	80081da <USBD_CtlError>
              break;
 800795e:	e03b      	b.n	80079d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	885b      	ldrh	r3, [r3, #2]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d136      	bne.n	80079d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800796e:	2b00      	cmp	r3, #0
 8007970:	d004      	beq.n	800797c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 f937 	bl	8008bea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fcf7 	bl	8008370 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fde2 	bl	8007550 <USBD_CoreFindEP>
 800798c:	4603      	mov	r3, r0
 800798e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007990:	7b7b      	ldrb	r3, [r7, #13]
 8007992:	2bff      	cmp	r3, #255	; 0xff
 8007994:	d01f      	beq.n	80079d6 <USBD_StdEPReq+0x1c6>
 8007996:	7b7b      	ldrb	r3, [r7, #13]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d11c      	bne.n	80079d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800799c:	7b7a      	ldrb	r2, [r7, #13]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80079a4:	7b7a      	ldrb	r2, [r7, #13]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	; 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d010      	beq.n	80079d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079b4:	7b7a      	ldrb	r2, [r7, #13]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	32ae      	adds	r2, #174	; 0xae
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80079ca:	e004      	b.n	80079d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fc03 	bl	80081da <USBD_CtlError>
              break;
 80079d4:	e000      	b.n	80079d8 <USBD_StdEPReq+0x1c8>
              break;
 80079d6:	bf00      	nop
          }
          break;
 80079d8:	e0ab      	b.n	8007b32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d002      	beq.n	80079ec <USBD_StdEPReq+0x1dc>
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d032      	beq.n	8007a50 <USBD_StdEPReq+0x240>
 80079ea:	e097      	b.n	8007b1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <USBD_StdEPReq+0x1f2>
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b80      	cmp	r3, #128	; 0x80
 80079f6:	d004      	beq.n	8007a02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fbed 	bl	80081da <USBD_CtlError>
                break;
 8007a00:	e091      	b.n	8007b26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da0b      	bge.n	8007a22 <USBD_StdEPReq+0x212>
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a10:	4613      	mov	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	3310      	adds	r3, #16
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3304      	adds	r3, #4
 8007a20:	e00b      	b.n	8007a3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	4413      	add	r3, r2
 8007a38:	3304      	adds	r3, #4
 8007a3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2202      	movs	r2, #2
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fc37 	bl	80082bc <USBD_CtlSendData>
              break;
 8007a4e:	e06a      	b.n	8007b26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	da11      	bge.n	8007a7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	f003 020f 	and.w	r2, r3, #15
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	3324      	adds	r3, #36	; 0x24
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d117      	bne.n	8007aa2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fbb0 	bl	80081da <USBD_CtlError>
                  break;
 8007a7a:	e054      	b.n	8007b26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	f003 020f 	and.w	r2, r3, #15
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d104      	bne.n	8007aa2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fb9d 	bl	80081da <USBD_CtlError>
                  break;
 8007aa0:	e041      	b.n	8007b26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da0b      	bge.n	8007ac2 <USBD_StdEPReq+0x2b2>
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	3310      	adds	r3, #16
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	3304      	adds	r3, #4
 8007ac0:	e00b      	b.n	8007ada <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3304      	adds	r3, #4
 8007ada:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <USBD_StdEPReq+0x2d8>
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	2b80      	cmp	r3, #128	; 0x80
 8007ae6:	d103      	bne.n	8007af0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e00e      	b.n	8007b0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 f897 	bl	8008c28 <USBD_LL_IsStallEP>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2201      	movs	r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2202      	movs	r2, #2
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fbd1 	bl	80082bc <USBD_CtlSendData>
              break;
 8007b1a:	e004      	b.n	8007b26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fb5b 	bl	80081da <USBD_CtlError>
              break;
 8007b24:	bf00      	nop
          }
          break;
 8007b26:	e004      	b.n	8007b32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fb55 	bl	80081da <USBD_CtlError>
          break;
 8007b30:	bf00      	nop
      }
      break;
 8007b32:	e005      	b.n	8007b40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fb4f 	bl	80081da <USBD_CtlError>
      break;
 8007b3c:	e000      	b.n	8007b40 <USBD_StdEPReq+0x330>
      break;
 8007b3e:	bf00      	nop
  }

  return ret;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	885b      	ldrh	r3, [r3, #2]
 8007b66:	0a1b      	lsrs	r3, r3, #8
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	2b06      	cmp	r3, #6
 8007b6e:	f200 8128 	bhi.w	8007dc2 <USBD_GetDescriptor+0x276>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <USBD_GetDescriptor+0x2c>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b95 	.word	0x08007b95
 8007b7c:	08007bad 	.word	0x08007bad
 8007b80:	08007bed 	.word	0x08007bed
 8007b84:	08007dc3 	.word	0x08007dc3
 8007b88:	08007dc3 	.word	0x08007dc3
 8007b8c:	08007d63 	.word	0x08007d63
 8007b90:	08007d8f 	.word	0x08007d8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	7c12      	ldrb	r2, [r2, #16]
 8007ba0:	f107 0108 	add.w	r1, r7, #8
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	60f8      	str	r0, [r7, #12]
      break;
 8007baa:	e112      	b.n	8007dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	7c1b      	ldrb	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10d      	bne.n	8007bd0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	f107 0208 	add.w	r2, r7, #8
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	2202      	movs	r2, #2
 8007bcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007bce:	e100      	b.n	8007dd2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	f107 0208 	add.w	r2, r7, #8
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
 8007be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	2202      	movs	r2, #2
 8007be8:	701a      	strb	r2, [r3, #0]
      break;
 8007bea:	e0f2      	b.n	8007dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	885b      	ldrh	r3, [r3, #2]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	f200 80ac 	bhi.w	8007d50 <USBD_GetDescriptor+0x204>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <USBD_GetDescriptor+0xb4>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c19 	.word	0x08007c19
 8007c04:	08007c4d 	.word	0x08007c4d
 8007c08:	08007c81 	.word	0x08007c81
 8007c0c:	08007cb5 	.word	0x08007cb5
 8007c10:	08007ce9 	.word	0x08007ce9
 8007c14:	08007d1d 	.word	0x08007d1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3a:	e091      	b.n	8007d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 facb 	bl	80081da <USBD_CtlError>
            err++;
 8007c44:	7afb      	ldrb	r3, [r7, #11]
 8007c46:	3301      	adds	r3, #1
 8007c48:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4a:	e089      	b.n	8007d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 0108 	add.w	r1, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6e:	e077      	b.n	8007d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fab1 	bl	80081da <USBD_CtlError>
            err++;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7e:	e06f      	b.n	8007d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca2:	e05d      	b.n	8007d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa97 	bl	80081da <USBD_CtlError>
            err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb2:	e055      	b.n	8007d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e043      	b.n	8007d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa7d 	bl	80081da <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e03b      	b.n	8007d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0a:	e029      	b.n	8007d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa63 	bl	80081da <USBD_CtlError>
            err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1a:	e021      	b.n	8007d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d3e:	e00f      	b.n	8007d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa49 	bl	80081da <USBD_CtlError>
            err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d4e:	e007      	b.n	8007d60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa41 	bl	80081da <USBD_CtlError>
          err++;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d5e:	bf00      	nop
      }
      break;
 8007d60:	e037      	b.n	8007dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7c1b      	ldrb	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d72:	f107 0208 	add.w	r2, r7, #8
 8007d76:	4610      	mov	r0, r2
 8007d78:	4798      	blx	r3
 8007d7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d7c:	e029      	b.n	8007dd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa2a 	bl	80081da <USBD_CtlError>
        err++;
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d8c:	e021      	b.n	8007dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	7c1b      	ldrb	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10d      	bne.n	8007db2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	f107 0208 	add.w	r2, r7, #8
 8007da2:	4610      	mov	r0, r2
 8007da4:	4798      	blx	r3
 8007da6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	2207      	movs	r2, #7
 8007dae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007db0:	e00f      	b.n	8007dd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa10 	bl	80081da <USBD_CtlError>
        err++;
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007dc0:	e007      	b.n	8007dd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa08 	bl	80081da <USBD_CtlError>
      err++;
 8007dca:	7afb      	ldrb	r3, [r7, #11]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	72fb      	strb	r3, [r7, #11]
      break;
 8007dd0:	bf00      	nop
  }

  if (err != 0U)
 8007dd2:	7afb      	ldrb	r3, [r7, #11]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d11e      	bne.n	8007e16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	88db      	ldrh	r3, [r3, #6]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d016      	beq.n	8007e0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007de0:	893b      	ldrh	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00e      	beq.n	8007e04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	88da      	ldrh	r2, [r3, #6]
 8007dea:	893b      	ldrh	r3, [r7, #8]
 8007dec:	4293      	cmp	r3, r2
 8007dee:	bf28      	it	cs
 8007df0:	4613      	movcs	r3, r2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007df6:	893b      	ldrh	r3, [r7, #8]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	68f9      	ldr	r1, [r7, #12]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa5d 	bl	80082bc <USBD_CtlSendData>
 8007e02:	e009      	b.n	8007e18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f9e7 	bl	80081da <USBD_CtlError>
 8007e0c:	e004      	b.n	8007e18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 faae 	bl	8008370 <USBD_CtlSendStatus>
 8007e14:	e000      	b.n	8007e18 <USBD_GetDescriptor+0x2cc>
    return;
 8007e16:	bf00      	nop
  }
}
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop

08007e20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	889b      	ldrh	r3, [r3, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d131      	bne.n	8007e96 <USBD_SetAddress+0x76>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d12d      	bne.n	8007e96 <USBD_SetAddress+0x76>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	885b      	ldrh	r3, [r3, #2]
 8007e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e40:	d829      	bhi.n	8007e96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	885b      	ldrh	r3, [r3, #2]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d104      	bne.n	8007e64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f9bc 	bl	80081da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e62:	e01d      	b.n	8007ea0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	7bfa      	ldrb	r2, [r7, #15]
 8007e68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 ff05 	bl	8008c80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa7a 	bl	8008370 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d004      	beq.n	8007e8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8a:	e009      	b.n	8007ea0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e94:	e004      	b.n	8007ea0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f99e 	bl	80081da <USBD_CtlError>
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	885b      	ldrh	r3, [r3, #2]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	4b4e      	ldr	r3, [pc, #312]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007ebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ec0:	4b4d      	ldr	r3, [pc, #308]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d905      	bls.n	8007ed4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f985 	bl	80081da <USBD_CtlError>
    return USBD_FAIL;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e08c      	b.n	8007fee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d002      	beq.n	8007ee6 <USBD_SetConfig+0x3e>
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d029      	beq.n	8007f38 <USBD_SetConfig+0x90>
 8007ee4:	e075      	b.n	8007fd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ee6:	4b44      	ldr	r3, [pc, #272]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d020      	beq.n	8007f30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007eee:	4b42      	ldr	r3, [pc, #264]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ef8:	4b3f      	ldr	r3, [pc, #252]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7fe ffe7 	bl	8006ed2 <USBD_SetClassConfig>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d008      	beq.n	8007f20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f962 	bl	80081da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f1e:	e065      	b.n	8007fec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa25 	bl	8008370 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2203      	movs	r2, #3
 8007f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f2e:	e05d      	b.n	8007fec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa1d 	bl	8008370 <USBD_CtlSendStatus>
      break;
 8007f36:	e059      	b.n	8007fec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f38:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d112      	bne.n	8007f66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f48:	4b2b      	ldr	r3, [pc, #172]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f52:	4b29      	ldr	r3, [pc, #164]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7fe ffd6 	bl	8006f0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa06 	bl	8008370 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f64:	e042      	b.n	8007fec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f66:	4b24      	ldr	r3, [pc, #144]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d02a      	beq.n	8007fca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7fe ffc4 	bl	8006f0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fe ff9d 	bl	8006ed2 <USBD_SetClassConfig>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00f      	beq.n	8007fc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f918 	bl	80081da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fe ffa9 	bl	8006f0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007fc0:	e014      	b.n	8007fec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f9d4 	bl	8008370 <USBD_CtlSendStatus>
      break;
 8007fc8:	e010      	b.n	8007fec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f9d0 	bl	8008370 <USBD_CtlSendStatus>
      break;
 8007fd0:	e00c      	b.n	8007fec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f900 	bl	80081da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fda:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <USBD_SetConfig+0x150>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7fe ff92 	bl	8006f0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fea:	bf00      	nop
  }

  return ret;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	200004a8 	.word	0x200004a8

08007ffc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	88db      	ldrh	r3, [r3, #6]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d004      	beq.n	8008018 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f8e2 	bl	80081da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008016:	e023      	b.n	8008060 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	dc02      	bgt.n	800802a <USBD_GetConfig+0x2e>
 8008024:	2b00      	cmp	r3, #0
 8008026:	dc03      	bgt.n	8008030 <USBD_GetConfig+0x34>
 8008028:	e015      	b.n	8008056 <USBD_GetConfig+0x5a>
 800802a:	2b03      	cmp	r3, #3
 800802c:	d00b      	beq.n	8008046 <USBD_GetConfig+0x4a>
 800802e:	e012      	b.n	8008056 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3308      	adds	r3, #8
 800803a:	2201      	movs	r2, #1
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f93c 	bl	80082bc <USBD_CtlSendData>
        break;
 8008044:	e00c      	b.n	8008060 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3304      	adds	r3, #4
 800804a:	2201      	movs	r2, #1
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f934 	bl	80082bc <USBD_CtlSendData>
        break;
 8008054:	e004      	b.n	8008060 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f8be 	bl	80081da <USBD_CtlError>
        break;
 800805e:	bf00      	nop
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008078:	b2db      	uxtb	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	2b02      	cmp	r3, #2
 800807e:	d81e      	bhi.n	80080be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	88db      	ldrh	r3, [r3, #6]
 8008084:	2b02      	cmp	r3, #2
 8008086:	d004      	beq.n	8008092 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f8a5 	bl	80081da <USBD_CtlError>
        break;
 8008090:	e01a      	b.n	80080c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f043 0202 	orr.w	r2, r3, #2
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	330c      	adds	r3, #12
 80080b2:	2202      	movs	r2, #2
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f900 	bl	80082bc <USBD_CtlSendData>
      break;
 80080bc:	e004      	b.n	80080c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f88a 	bl	80081da <USBD_CtlError>
      break;
 80080c6:	bf00      	nop
  }
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	885b      	ldrh	r3, [r3, #2]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d107      	bne.n	80080f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f940 	bl	8008370 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80080f0:	e013      	b.n	800811a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	885b      	ldrh	r3, [r3, #2]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d10b      	bne.n	8008112 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	889b      	ldrh	r3, [r3, #4]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	b29b      	uxth	r3, r3
 8008102:	b2da      	uxtb	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f930 	bl	8008370 <USBD_CtlSendStatus>
}
 8008110:	e003      	b.n	800811a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f860 	bl	80081da <USBD_CtlError>
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008132:	b2db      	uxtb	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	2b02      	cmp	r3, #2
 8008138:	d80b      	bhi.n	8008152 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	885b      	ldrh	r3, [r3, #2]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d10c      	bne.n	800815c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f910 	bl	8008370 <USBD_CtlSendStatus>
      }
      break;
 8008150:	e004      	b.n	800815c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f840 	bl	80081da <USBD_CtlError>
      break;
 800815a:	e000      	b.n	800815e <USBD_ClrFeature+0x3c>
      break;
 800815c:	bf00      	nop
  }
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	781a      	ldrb	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	781a      	ldrb	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff fa41 	bl	8007618 <SWAPBYTE>
 8008196:	4603      	mov	r3, r0
 8008198:	461a      	mov	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3301      	adds	r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff fa34 	bl	8007618 <SWAPBYTE>
 80081b0:	4603      	mov	r3, r0
 80081b2:	461a      	mov	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	3301      	adds	r3, #1
 80081bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3301      	adds	r3, #1
 80081c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff fa27 	bl	8007618 <SWAPBYTE>
 80081ca:	4603      	mov	r3, r0
 80081cc:	461a      	mov	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	80da      	strh	r2, [r3, #6]
}
 80081d2:	bf00      	nop
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081e4:	2180      	movs	r1, #128	; 0x80
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fce0 	bl	8008bac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081ec:	2100      	movs	r1, #0
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fcdc 	bl	8008bac <USBD_LL_StallEP>
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d036      	beq.n	8008280 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008216:	6938      	ldr	r0, [r7, #16]
 8008218:	f000 f836 	bl	8008288 <USBD_GetLen>
 800821c:	4603      	mov	r3, r0
 800821e:	3301      	adds	r3, #1
 8008220:	b29b      	uxth	r3, r3
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	b29a      	uxth	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	4413      	add	r3, r2
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	7812      	ldrb	r2, [r2, #0]
 8008234:	701a      	strb	r2, [r3, #0]
  idx++;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	3301      	adds	r3, #1
 800823a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	2203      	movs	r2, #3
 8008244:	701a      	strb	r2, [r3, #0]
  idx++;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	3301      	adds	r3, #1
 800824a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800824c:	e013      	b.n	8008276 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	4413      	add	r3, r2
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3301      	adds	r3, #1
 800825e:	613b      	str	r3, [r7, #16]
    idx++;
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	3301      	adds	r3, #1
 8008264:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	4413      	add	r3, r2
 800826c:	2200      	movs	r2, #0
 800826e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	3301      	adds	r3, #1
 8008274:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e7      	bne.n	800824e <USBD_GetString+0x52>
 800827e:	e000      	b.n	8008282 <USBD_GetString+0x86>
    return;
 8008280:	bf00      	nop
  }
}
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008298:	e005      	b.n	80082a6 <USBD_GetLen+0x1e>
  {
    len++;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	3301      	adds	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f5      	bne.n	800829a <USBD_GetLen+0x12>
  }

  return len;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	2100      	movs	r1, #0
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fceb 	bl	8008cbe <USBD_LL_Transmit>

  return USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	2100      	movs	r1, #0
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 fcda 	bl	8008cbe <USBD_LL_Transmit>

  return USBD_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2203      	movs	r2, #3
 8008324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	2100      	movs	r1, #0
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 fcde 	bl	8008d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	2100      	movs	r1, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fccd 	bl	8008d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2204      	movs	r2, #4
 800837c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008380:	2300      	movs	r3, #0
 8008382:	2200      	movs	r2, #0
 8008384:	2100      	movs	r1, #0
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fc99 	bl	8008cbe <USBD_LL_Transmit>

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2205      	movs	r2, #5
 80083a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083a6:	2300      	movs	r3, #0
 80083a8:	2200      	movs	r2, #0
 80083aa:	2100      	movs	r1, #0
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fca7 	bl	8008d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083c0:	2200      	movs	r2, #0
 80083c2:	4912      	ldr	r1, [pc, #72]	; (800840c <MX_USB_DEVICE_Init+0x50>)
 80083c4:	4812      	ldr	r0, [pc, #72]	; (8008410 <MX_USB_DEVICE_Init+0x54>)
 80083c6:	f7fe fd07 	bl	8006dd8 <USBD_Init>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083d0:	f7f9 fa06 	bl	80017e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083d4:	490f      	ldr	r1, [pc, #60]	; (8008414 <MX_USB_DEVICE_Init+0x58>)
 80083d6:	480e      	ldr	r0, [pc, #56]	; (8008410 <MX_USB_DEVICE_Init+0x54>)
 80083d8:	f7fe fd2e 	bl	8006e38 <USBD_RegisterClass>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083e2:	f7f9 f9fd 	bl	80017e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083e6:	490c      	ldr	r1, [pc, #48]	; (8008418 <MX_USB_DEVICE_Init+0x5c>)
 80083e8:	4809      	ldr	r0, [pc, #36]	; (8008410 <MX_USB_DEVICE_Init+0x54>)
 80083ea:	f7fe fc1f 	bl	8006c2c <USBD_CDC_RegisterInterface>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083f4:	f7f9 f9f4 	bl	80017e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083f8:	4805      	ldr	r0, [pc, #20]	; (8008410 <MX_USB_DEVICE_Init+0x54>)
 80083fa:	f7fe fd53 	bl	8006ea4 <USBD_Start>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008404:	f7f9 f9ec 	bl	80017e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008408:	bf00      	nop
 800840a:	bd80      	pop	{r7, pc}
 800840c:	200000bc 	.word	0x200000bc
 8008410:	200004ac 	.word	0x200004ac
 8008414:	20000028 	.word	0x20000028
 8008418:	200000a8 	.word	0x200000a8

0800841c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008420:	2200      	movs	r2, #0
 8008422:	4905      	ldr	r1, [pc, #20]	; (8008438 <CDC_Init_FS+0x1c>)
 8008424:	4805      	ldr	r0, [pc, #20]	; (800843c <CDC_Init_FS+0x20>)
 8008426:	f7fe fc1b 	bl	8006c60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800842a:	4905      	ldr	r1, [pc, #20]	; (8008440 <CDC_Init_FS+0x24>)
 800842c:	4803      	ldr	r0, [pc, #12]	; (800843c <CDC_Init_FS+0x20>)
 800842e:	f7fe fc39 	bl	8006ca4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008432:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008434:	4618      	mov	r0, r3
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000f88 	.word	0x20000f88
 800843c:	200004ac 	.word	0x200004ac
 8008440:	20000788 	.word	0x20000788

08008444 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008448:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800844a:	4618      	mov	r0, r3
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	71fb      	strb	r3, [r7, #7]
 8008460:	4613      	mov	r3, r2
 8008462:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	2b23      	cmp	r3, #35	; 0x23
 8008468:	d84a      	bhi.n	8008500 <CDC_Control_FS+0xac>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <CDC_Control_FS+0x1c>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008501 	.word	0x08008501
 8008474:	08008501 	.word	0x08008501
 8008478:	08008501 	.word	0x08008501
 800847c:	08008501 	.word	0x08008501
 8008480:	08008501 	.word	0x08008501
 8008484:	08008501 	.word	0x08008501
 8008488:	08008501 	.word	0x08008501
 800848c:	08008501 	.word	0x08008501
 8008490:	08008501 	.word	0x08008501
 8008494:	08008501 	.word	0x08008501
 8008498:	08008501 	.word	0x08008501
 800849c:	08008501 	.word	0x08008501
 80084a0:	08008501 	.word	0x08008501
 80084a4:	08008501 	.word	0x08008501
 80084a8:	08008501 	.word	0x08008501
 80084ac:	08008501 	.word	0x08008501
 80084b0:	08008501 	.word	0x08008501
 80084b4:	08008501 	.word	0x08008501
 80084b8:	08008501 	.word	0x08008501
 80084bc:	08008501 	.word	0x08008501
 80084c0:	08008501 	.word	0x08008501
 80084c4:	08008501 	.word	0x08008501
 80084c8:	08008501 	.word	0x08008501
 80084cc:	08008501 	.word	0x08008501
 80084d0:	08008501 	.word	0x08008501
 80084d4:	08008501 	.word	0x08008501
 80084d8:	08008501 	.word	0x08008501
 80084dc:	08008501 	.word	0x08008501
 80084e0:	08008501 	.word	0x08008501
 80084e4:	08008501 	.word	0x08008501
 80084e8:	08008501 	.word	0x08008501
 80084ec:	08008501 	.word	0x08008501
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008501 	.word	0x08008501
 80084f8:	08008501 	.word	0x08008501
 80084fc:	08008501 	.word	0x08008501
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008500:	bf00      	nop
  }

  return (USBD_OK);
 8008502:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800851a:	6879      	ldr	r1, [r7, #4]
 800851c:	4805      	ldr	r0, [pc, #20]	; (8008534 <CDC_Receive_FS+0x24>)
 800851e:	f7fe fbc1 	bl	8006ca4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008522:	4804      	ldr	r0, [pc, #16]	; (8008534 <CDC_Receive_FS+0x24>)
 8008524:	f7fe fc22 	bl	8006d6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008528:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	200004ac 	.word	0x200004ac

08008538 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008548:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <CDC_Transmit_FS+0x48>)
 800854a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800854e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800855a:	2301      	movs	r3, #1
 800855c:	e00b      	b.n	8008576 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800855e:	887b      	ldrh	r3, [r7, #2]
 8008560:	461a      	mov	r2, r3
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4806      	ldr	r0, [pc, #24]	; (8008580 <CDC_Transmit_FS+0x48>)
 8008566:	f7fe fb7b 	bl	8006c60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800856a:	4805      	ldr	r0, [pc, #20]	; (8008580 <CDC_Transmit_FS+0x48>)
 800856c:	f7fe fbb8 	bl	8006ce0 <USBD_CDC_TransmitPacket>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	200004ac 	.word	0x200004ac

08008584 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4613      	mov	r3, r2
 8008590:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800859a:	4618      	mov	r0, r3
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
	...

080085a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2212      	movs	r2, #18
 80085b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085ba:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	200000d8 	.word	0x200000d8

080085cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2204      	movs	r2, #4
 80085dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085de:	4b03      	ldr	r3, [pc, #12]	; (80085ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	200000ec 	.word	0x200000ec

080085f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	4907      	ldr	r1, [pc, #28]	; (8008624 <USBD_FS_ProductStrDescriptor+0x34>)
 8008606:	4808      	ldr	r0, [pc, #32]	; (8008628 <USBD_FS_ProductStrDescriptor+0x38>)
 8008608:	f7ff fdf8 	bl	80081fc <USBD_GetString>
 800860c:	e004      	b.n	8008618 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <USBD_FS_ProductStrDescriptor+0x34>)
 8008612:	4805      	ldr	r0, [pc, #20]	; (8008628 <USBD_FS_ProductStrDescriptor+0x38>)
 8008614:	f7ff fdf2 	bl	80081fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20001788 	.word	0x20001788
 8008628:	0800bc88 	.word	0x0800bc88

0800862c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	4904      	ldr	r1, [pc, #16]	; (800864c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800863c:	4804      	ldr	r0, [pc, #16]	; (8008650 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800863e:	f7ff fddd 	bl	80081fc <USBD_GetString>
  return USBD_StrDesc;
 8008642:	4b02      	ldr	r3, [pc, #8]	; (800864c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20001788 	.word	0x20001788
 8008650:	0800bca0 	.word	0x0800bca0

08008654 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	221a      	movs	r2, #26
 8008664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008666:	f000 f843 	bl	80086f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800866a:	4b02      	ldr	r3, [pc, #8]	; (8008674 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	200000f0 	.word	0x200000f0

08008678 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	6039      	str	r1, [r7, #0]
 8008682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4907      	ldr	r1, [pc, #28]	; (80086ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800868e:	4808      	ldr	r0, [pc, #32]	; (80086b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008690:	f7ff fdb4 	bl	80081fc <USBD_GetString>
 8008694:	e004      	b.n	80086a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4904      	ldr	r1, [pc, #16]	; (80086ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800869a:	4805      	ldr	r0, [pc, #20]	; (80086b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800869c:	f7ff fdae 	bl	80081fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20001788 	.word	0x20001788
 80086b0:	0800bcb4 	.word	0x0800bcb4

080086b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d105      	bne.n	80086d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	4907      	ldr	r1, [pc, #28]	; (80086e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ca:	4808      	ldr	r0, [pc, #32]	; (80086ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086cc:	f7ff fd96 	bl	80081fc <USBD_GetString>
 80086d0:	e004      	b.n	80086dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	4904      	ldr	r1, [pc, #16]	; (80086e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086d6:	4805      	ldr	r0, [pc, #20]	; (80086ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086d8:	f7ff fd90 	bl	80081fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20001788 	.word	0x20001788
 80086ec:	0800bcc0 	.word	0x0800bcc0

080086f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086f6:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <Get_SerialNum+0x44>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086fc:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <Get_SerialNum+0x48>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008702:	4b0e      	ldr	r3, [pc, #56]	; (800873c <Get_SerialNum+0x4c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008716:	2208      	movs	r2, #8
 8008718:	4909      	ldr	r1, [pc, #36]	; (8008740 <Get_SerialNum+0x50>)
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 f814 	bl	8008748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008720:	2204      	movs	r2, #4
 8008722:	4908      	ldr	r1, [pc, #32]	; (8008744 <Get_SerialNum+0x54>)
 8008724:	68b8      	ldr	r0, [r7, #8]
 8008726:	f000 f80f 	bl	8008748 <IntToUnicode>
  }
}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	1fff7a10 	.word	0x1fff7a10
 8008738:	1fff7a14 	.word	0x1fff7a14
 800873c:	1fff7a18 	.word	0x1fff7a18
 8008740:	200000f2 	.word	0x200000f2
 8008744:	20000102 	.word	0x20000102

08008748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]
 800875e:	e027      	b.n	80087b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	0f1b      	lsrs	r3, r3, #28
 8008764:	2b09      	cmp	r3, #9
 8008766:	d80b      	bhi.n	8008780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	0f1b      	lsrs	r3, r3, #28
 800876c:	b2da      	uxtb	r2, r3
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	4619      	mov	r1, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	440b      	add	r3, r1
 8008778:	3230      	adds	r2, #48	; 0x30
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]
 800877e:	e00a      	b.n	8008796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	0f1b      	lsrs	r3, r3, #28
 8008784:	b2da      	uxtb	r2, r3
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	4619      	mov	r1, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	440b      	add	r3, r1
 8008790:	3237      	adds	r2, #55	; 0x37
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	3301      	adds	r3, #1
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	4413      	add	r3, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	3301      	adds	r3, #1
 80087ae:	75fb      	strb	r3, [r7, #23]
 80087b0:	7dfa      	ldrb	r2, [r7, #23]
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d3d3      	bcc.n	8008760 <IntToUnicode+0x18>
  }
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	; 0x28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d0:	f107 0314 	add.w	r3, r7, #20
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	605a      	str	r2, [r3, #4]
 80087da:	609a      	str	r2, [r3, #8]
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087e8:	d13a      	bne.n	8008860 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ea:	2300      	movs	r3, #0
 80087ec:	613b      	str	r3, [r7, #16]
 80087ee:	4b1e      	ldr	r3, [pc, #120]	; (8008868 <HAL_PCD_MspInit+0xa0>)
 80087f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f2:	4a1d      	ldr	r2, [pc, #116]	; (8008868 <HAL_PCD_MspInit+0xa0>)
 80087f4:	f043 0301 	orr.w	r3, r3, #1
 80087f8:	6313      	str	r3, [r2, #48]	; 0x30
 80087fa:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <HAL_PCD_MspInit+0xa0>)
 80087fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	613b      	str	r3, [r7, #16]
 8008804:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008806:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800880a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800880c:	2302      	movs	r3, #2
 800880e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008810:	2300      	movs	r3, #0
 8008812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008814:	2303      	movs	r3, #3
 8008816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008818:	230a      	movs	r3, #10
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	4619      	mov	r1, r3
 8008822:	4812      	ldr	r0, [pc, #72]	; (800886c <HAL_PCD_MspInit+0xa4>)
 8008824:	f7f9 fb36 	bl	8001e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <HAL_PCD_MspInit+0xa0>)
 800882a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882c:	4a0e      	ldr	r2, [pc, #56]	; (8008868 <HAL_PCD_MspInit+0xa0>)
 800882e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008832:	6353      	str	r3, [r2, #52]	; 0x34
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <HAL_PCD_MspInit+0xa0>)
 800883a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883c:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <HAL_PCD_MspInit+0xa0>)
 800883e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008842:	6453      	str	r3, [r2, #68]	; 0x44
 8008844:	4b08      	ldr	r3, [pc, #32]	; (8008868 <HAL_PCD_MspInit+0xa0>)
 8008846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008850:	2200      	movs	r2, #0
 8008852:	2100      	movs	r1, #0
 8008854:	2043      	movs	r0, #67	; 0x43
 8008856:	f7f9 fae6 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800885a:	2043      	movs	r0, #67	; 0x43
 800885c:	f7f9 faff 	bl	8001e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008860:	bf00      	nop
 8008862:	3728      	adds	r7, #40	; 0x28
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	40023800 	.word	0x40023800
 800886c:	40020000 	.word	0x40020000

08008870 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008884:	4619      	mov	r1, r3
 8008886:	4610      	mov	r0, r2
 8008888:	f7fe fb59 	bl	8006f3e <USBD_LL_SetupStage>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	4619      	mov	r1, r3
 80088be:	f7fe fb93 	bl	8006fe8 <USBD_LL_DataOutStage>
}
 80088c2:	bf00      	nop
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80088dc:	78fa      	ldrb	r2, [r7, #3]
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	4613      	mov	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	334c      	adds	r3, #76	; 0x4c
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	4619      	mov	r1, r3
 80088f2:	f7fe fc2c 	bl	800714e <USBD_LL_DataInStage>
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fd60 	bl	80073d2 <USBD_LL_SOF>
}
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008922:	2301      	movs	r3, #1
 8008924:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d102      	bne.n	8008934 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
 8008932:	e008      	b.n	8008946 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d102      	bne.n	8008942 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
 8008940:	e001      	b.n	8008946 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008942:	f7f8 ff4d 	bl	80017e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800894c:	7bfa      	ldrb	r2, [r7, #15]
 800894e:	4611      	mov	r1, r2
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fd00 	bl	8007356 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe fca8 	bl	80072b2 <USBD_LL_Reset>
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fcfb 	bl	8007376 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6812      	ldr	r2, [r2, #0]
 800898e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089a0:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <HAL_PCD_SuspendCallback+0x48>)
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	4a03      	ldr	r2, [pc, #12]	; (80089b4 <HAL_PCD_SuspendCallback+0x48>)
 80089a6:	f043 0306 	orr.w	r3, r3, #6
 80089aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	e000ed00 	.word	0xe000ed00

080089b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe fceb 	bl	80073a2 <USBD_LL_Resume>
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089e6:	78fa      	ldrb	r2, [r7, #3]
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fd43 	bl	8007476 <USBD_LL_IsoOUTIncomplete>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a0a:	78fa      	ldrb	r2, [r7, #3]
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fcff 	bl	8007412 <USBD_LL_IsoINIncomplete>
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fd55 	bl	80074da <USBD_LL_DevConnected>
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fd52 	bl	80074f0 <USBD_LL_DevDisconnected>
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d13c      	bne.n	8008ade <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a64:	4a20      	ldr	r2, [pc, #128]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a74:	4b1c      	ldr	r3, [pc, #112]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a7e:	2204      	movs	r2, #4
 8008a80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a82:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a84:	2202      	movs	r2, #2
 8008a86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a88:	4b17      	ldr	r3, [pc, #92]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a8e:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a90:	2202      	movs	r2, #2
 8008a92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a94:	4b14      	ldr	r3, [pc, #80]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a9a:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008aa0:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008aa6:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008aac:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ab2:	480d      	ldr	r0, [pc, #52]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008ab4:	f7f9 fbd6 	bl	8002264 <HAL_PCD_Init>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008abe:	f7f8 fe8f 	bl	80017e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ac2:	2180      	movs	r1, #128	; 0x80
 8008ac4:	4808      	ldr	r0, [pc, #32]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008ac6:	f7fa fe2e 	bl	8003726 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008aca:	2240      	movs	r2, #64	; 0x40
 8008acc:	2100      	movs	r1, #0
 8008ace:	4806      	ldr	r0, [pc, #24]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008ad0:	f7fa fde2 	bl	8003698 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ad4:	2280      	movs	r2, #128	; 0x80
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	4803      	ldr	r0, [pc, #12]	; (8008ae8 <USBD_LL_Init+0x94>)
 8008ada:	f7fa fddd 	bl	8003698 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20001988 	.word	0x20001988

08008aec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f9 fccb 	bl	800249e <HAL_PCD_Start>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f942 	bl	8008d98 <USBD_Get_USB_Status>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	70fb      	strb	r3, [r7, #3]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70bb      	strb	r3, [r7, #2]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b4a:	78bb      	ldrb	r3, [r7, #2]
 8008b4c:	883a      	ldrh	r2, [r7, #0]
 8008b4e:	78f9      	ldrb	r1, [r7, #3]
 8008b50:	f7fa f99c 	bl	8002e8c <HAL_PCD_EP_Open>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f91c 	bl	8008d98 <USBD_Get_USB_Status>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fa f9e5 	bl	8002f5c <HAL_PCD_EP_Close>
 8008b92:	4603      	mov	r3, r0
 8008b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f8fd 	bl	8008d98 <USBD_Get_USB_Status>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fa fabd 	bl	800314a <HAL_PCD_EP_SetStall>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 f8de 	bl	8008d98 <USBD_Get_USB_Status>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c04:	78fa      	ldrb	r2, [r7, #3]
 8008c06:	4611      	mov	r1, r2
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fa fb02 	bl	8003212 <HAL_PCD_EP_ClrStall>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f8bf 	bl	8008d98 <USBD_Get_USB_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da0b      	bge.n	8008c5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4a:	68f9      	ldr	r1, [r7, #12]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	333e      	adds	r3, #62	; 0x3e
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	e00b      	b.n	8008c74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	4613      	mov	r3, r2
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008c72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c9a:	78fa      	ldrb	r2, [r7, #3]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fa f8cf 	bl	8002e42 <HAL_PCD_SetAddress>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 f874 	bl	8008d98 <USBD_Get_USB_Status>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b086      	sub	sp, #24
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cdc:	7af9      	ldrb	r1, [r7, #11]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	f7fa f9e8 	bl	80030b6 <HAL_PCD_EP_Transmit>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 f853 	bl	8008d98 <USBD_Get_USB_Status>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d1e:	7af9      	ldrb	r1, [r7, #11]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	f7fa f964 	bl	8002ff0 <HAL_PCD_EP_Receive>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f832 	bl	8008d98 <USBD_Get_USB_Status>
 8008d34:	4603      	mov	r3, r0
 8008d36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d38:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d54:	78fa      	ldrb	r2, [r7, #3]
 8008d56:	4611      	mov	r1, r2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fa f994 	bl	8003086 <HAL_PCD_EP_GetRxCount>
 8008d5e:	4603      	mov	r3, r0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <USBD_static_malloc+0x18>)
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20001e94 	.word	0x20001e94

08008d84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]

}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d817      	bhi.n	8008ddc <USBD_Get_USB_Status+0x44>
 8008dac:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <USBD_Get_USB_Status+0x1c>)
 8008dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db2:	bf00      	nop
 8008db4:	08008dc5 	.word	0x08008dc5
 8008db8:	08008dcb 	.word	0x08008dcb
 8008dbc:	08008dd1 	.word	0x08008dd1
 8008dc0:	08008dd7 	.word	0x08008dd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc8:	e00b      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dce:	e008      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd4:	e005      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dda:	e002      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	73fb      	strb	r3, [r7, #15]
    break;
 8008de0:	bf00      	nop
  }
  return usb_status;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <__errno>:
 8008df0:	4b01      	ldr	r3, [pc, #4]	; (8008df8 <__errno+0x8>)
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	2000010c 	.word	0x2000010c

08008dfc <__libc_init_array>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4d0d      	ldr	r5, [pc, #52]	; (8008e34 <__libc_init_array+0x38>)
 8008e00:	4c0d      	ldr	r4, [pc, #52]	; (8008e38 <__libc_init_array+0x3c>)
 8008e02:	1b64      	subs	r4, r4, r5
 8008e04:	10a4      	asrs	r4, r4, #2
 8008e06:	2600      	movs	r6, #0
 8008e08:	42a6      	cmp	r6, r4
 8008e0a:	d109      	bne.n	8008e20 <__libc_init_array+0x24>
 8008e0c:	4d0b      	ldr	r5, [pc, #44]	; (8008e3c <__libc_init_array+0x40>)
 8008e0e:	4c0c      	ldr	r4, [pc, #48]	; (8008e40 <__libc_init_array+0x44>)
 8008e10:	f002 ff24 	bl	800bc5c <_init>
 8008e14:	1b64      	subs	r4, r4, r5
 8008e16:	10a4      	asrs	r4, r4, #2
 8008e18:	2600      	movs	r6, #0
 8008e1a:	42a6      	cmp	r6, r4
 8008e1c:	d105      	bne.n	8008e2a <__libc_init_array+0x2e>
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e24:	4798      	blx	r3
 8008e26:	3601      	adds	r6, #1
 8008e28:	e7ee      	b.n	8008e08 <__libc_init_array+0xc>
 8008e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2e:	4798      	blx	r3
 8008e30:	3601      	adds	r6, #1
 8008e32:	e7f2      	b.n	8008e1a <__libc_init_array+0x1e>
 8008e34:	0800c0c4 	.word	0x0800c0c4
 8008e38:	0800c0c4 	.word	0x0800c0c4
 8008e3c:	0800c0c4 	.word	0x0800c0c4
 8008e40:	0800c0c8 	.word	0x0800c0c8

08008e44 <memcpy>:
 8008e44:	440a      	add	r2, r1
 8008e46:	4291      	cmp	r1, r2
 8008e48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e4c:	d100      	bne.n	8008e50 <memcpy+0xc>
 8008e4e:	4770      	bx	lr
 8008e50:	b510      	push	{r4, lr}
 8008e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e5a:	4291      	cmp	r1, r2
 8008e5c:	d1f9      	bne.n	8008e52 <memcpy+0xe>
 8008e5e:	bd10      	pop	{r4, pc}

08008e60 <memset>:
 8008e60:	4402      	add	r2, r0
 8008e62:	4603      	mov	r3, r0
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d100      	bne.n	8008e6a <memset+0xa>
 8008e68:	4770      	bx	lr
 8008e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6e:	e7f9      	b.n	8008e64 <memset+0x4>

08008e70 <__cvt>:
 8008e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e74:	ec55 4b10 	vmov	r4, r5, d0
 8008e78:	2d00      	cmp	r5, #0
 8008e7a:	460e      	mov	r6, r1
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	462b      	mov	r3, r5
 8008e80:	bfbb      	ittet	lt
 8008e82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e86:	461d      	movlt	r5, r3
 8008e88:	2300      	movge	r3, #0
 8008e8a:	232d      	movlt	r3, #45	; 0x2d
 8008e8c:	700b      	strb	r3, [r1, #0]
 8008e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e94:	4691      	mov	r9, r2
 8008e96:	f023 0820 	bic.w	r8, r3, #32
 8008e9a:	bfbc      	itt	lt
 8008e9c:	4622      	movlt	r2, r4
 8008e9e:	4614      	movlt	r4, r2
 8008ea0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ea4:	d005      	beq.n	8008eb2 <__cvt+0x42>
 8008ea6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008eaa:	d100      	bne.n	8008eae <__cvt+0x3e>
 8008eac:	3601      	adds	r6, #1
 8008eae:	2102      	movs	r1, #2
 8008eb0:	e000      	b.n	8008eb4 <__cvt+0x44>
 8008eb2:	2103      	movs	r1, #3
 8008eb4:	ab03      	add	r3, sp, #12
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	ab02      	add	r3, sp, #8
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	ec45 4b10 	vmov	d0, r4, r5
 8008ec0:	4653      	mov	r3, sl
 8008ec2:	4632      	mov	r2, r6
 8008ec4:	f000 fd0c 	bl	80098e0 <_dtoa_r>
 8008ec8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ecc:	4607      	mov	r7, r0
 8008ece:	d102      	bne.n	8008ed6 <__cvt+0x66>
 8008ed0:	f019 0f01 	tst.w	r9, #1
 8008ed4:	d022      	beq.n	8008f1c <__cvt+0xac>
 8008ed6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008eda:	eb07 0906 	add.w	r9, r7, r6
 8008ede:	d110      	bne.n	8008f02 <__cvt+0x92>
 8008ee0:	783b      	ldrb	r3, [r7, #0]
 8008ee2:	2b30      	cmp	r3, #48	; 0x30
 8008ee4:	d10a      	bne.n	8008efc <__cvt+0x8c>
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2300      	movs	r3, #0
 8008eea:	4620      	mov	r0, r4
 8008eec:	4629      	mov	r1, r5
 8008eee:	f7f7 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ef2:	b918      	cbnz	r0, 8008efc <__cvt+0x8c>
 8008ef4:	f1c6 0601 	rsb	r6, r6, #1
 8008ef8:	f8ca 6000 	str.w	r6, [sl]
 8008efc:	f8da 3000 	ldr.w	r3, [sl]
 8008f00:	4499      	add	r9, r3
 8008f02:	2200      	movs	r2, #0
 8008f04:	2300      	movs	r3, #0
 8008f06:	4620      	mov	r0, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	f7f7 fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f0e:	b108      	cbz	r0, 8008f14 <__cvt+0xa4>
 8008f10:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f14:	2230      	movs	r2, #48	; 0x30
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	454b      	cmp	r3, r9
 8008f1a:	d307      	bcc.n	8008f2c <__cvt+0xbc>
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f20:	1bdb      	subs	r3, r3, r7
 8008f22:	4638      	mov	r0, r7
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	b004      	add	sp, #16
 8008f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f2c:	1c59      	adds	r1, r3, #1
 8008f2e:	9103      	str	r1, [sp, #12]
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	e7f0      	b.n	8008f16 <__cvt+0xa6>

08008f34 <__exponent>:
 8008f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f36:	4603      	mov	r3, r0
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	bfb8      	it	lt
 8008f3c:	4249      	neglt	r1, r1
 8008f3e:	f803 2b02 	strb.w	r2, [r3], #2
 8008f42:	bfb4      	ite	lt
 8008f44:	222d      	movlt	r2, #45	; 0x2d
 8008f46:	222b      	movge	r2, #43	; 0x2b
 8008f48:	2909      	cmp	r1, #9
 8008f4a:	7042      	strb	r2, [r0, #1]
 8008f4c:	dd2a      	ble.n	8008fa4 <__exponent+0x70>
 8008f4e:	f10d 0407 	add.w	r4, sp, #7
 8008f52:	46a4      	mov	ip, r4
 8008f54:	270a      	movs	r7, #10
 8008f56:	46a6      	mov	lr, r4
 8008f58:	460a      	mov	r2, r1
 8008f5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f5e:	fb07 1516 	mls	r5, r7, r6, r1
 8008f62:	3530      	adds	r5, #48	; 0x30
 8008f64:	2a63      	cmp	r2, #99	; 0x63
 8008f66:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008f6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f6e:	4631      	mov	r1, r6
 8008f70:	dcf1      	bgt.n	8008f56 <__exponent+0x22>
 8008f72:	3130      	adds	r1, #48	; 0x30
 8008f74:	f1ae 0502 	sub.w	r5, lr, #2
 8008f78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f7c:	1c44      	adds	r4, r0, #1
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4561      	cmp	r1, ip
 8008f82:	d30a      	bcc.n	8008f9a <__exponent+0x66>
 8008f84:	f10d 0209 	add.w	r2, sp, #9
 8008f88:	eba2 020e 	sub.w	r2, r2, lr
 8008f8c:	4565      	cmp	r5, ip
 8008f8e:	bf88      	it	hi
 8008f90:	2200      	movhi	r2, #0
 8008f92:	4413      	add	r3, r2
 8008f94:	1a18      	subs	r0, r3, r0
 8008f96:	b003      	add	sp, #12
 8008f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008fa2:	e7ed      	b.n	8008f80 <__exponent+0x4c>
 8008fa4:	2330      	movs	r3, #48	; 0x30
 8008fa6:	3130      	adds	r1, #48	; 0x30
 8008fa8:	7083      	strb	r3, [r0, #2]
 8008faa:	70c1      	strb	r1, [r0, #3]
 8008fac:	1d03      	adds	r3, r0, #4
 8008fae:	e7f1      	b.n	8008f94 <__exponent+0x60>

08008fb0 <_printf_float>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	ed2d 8b02 	vpush	{d8}
 8008fb8:	b08d      	sub	sp, #52	; 0x34
 8008fba:	460c      	mov	r4, r1
 8008fbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	461f      	mov	r7, r3
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	f001 fa79 	bl	800a4bc <_localeconv_r>
 8008fca:	f8d0 a000 	ldr.w	sl, [r0]
 8008fce:	4650      	mov	r0, sl
 8008fd0:	f7f7 f8fe 	bl	80001d0 <strlen>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8008fe0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008fe4:	3307      	adds	r3, #7
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	f103 0208 	add.w	r2, r3, #8
 8008fee:	f8c8 2000 	str.w	r2, [r8]
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ffa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008ffe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009002:	9307      	str	r3, [sp, #28]
 8009004:	f8cd 8018 	str.w	r8, [sp, #24]
 8009008:	ee08 0a10 	vmov	s16, r0
 800900c:	4b9f      	ldr	r3, [pc, #636]	; (800928c <_printf_float+0x2dc>)
 800900e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009016:	f7f7 fd89 	bl	8000b2c <__aeabi_dcmpun>
 800901a:	bb88      	cbnz	r0, 8009080 <_printf_float+0xd0>
 800901c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009020:	4b9a      	ldr	r3, [pc, #616]	; (800928c <_printf_float+0x2dc>)
 8009022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009026:	f7f7 fd63 	bl	8000af0 <__aeabi_dcmple>
 800902a:	bb48      	cbnz	r0, 8009080 <_printf_float+0xd0>
 800902c:	2200      	movs	r2, #0
 800902e:	2300      	movs	r3, #0
 8009030:	4640      	mov	r0, r8
 8009032:	4649      	mov	r1, r9
 8009034:	f7f7 fd52 	bl	8000adc <__aeabi_dcmplt>
 8009038:	b110      	cbz	r0, 8009040 <_printf_float+0x90>
 800903a:	232d      	movs	r3, #45	; 0x2d
 800903c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009040:	4b93      	ldr	r3, [pc, #588]	; (8009290 <_printf_float+0x2e0>)
 8009042:	4894      	ldr	r0, [pc, #592]	; (8009294 <_printf_float+0x2e4>)
 8009044:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009048:	bf94      	ite	ls
 800904a:	4698      	movls	r8, r3
 800904c:	4680      	movhi	r8, r0
 800904e:	2303      	movs	r3, #3
 8009050:	6123      	str	r3, [r4, #16]
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	f023 0204 	bic.w	r2, r3, #4
 8009058:	6022      	str	r2, [r4, #0]
 800905a:	f04f 0900 	mov.w	r9, #0
 800905e:	9700      	str	r7, [sp, #0]
 8009060:	4633      	mov	r3, r6
 8009062:	aa0b      	add	r2, sp, #44	; 0x2c
 8009064:	4621      	mov	r1, r4
 8009066:	4628      	mov	r0, r5
 8009068:	f000 f9d8 	bl	800941c <_printf_common>
 800906c:	3001      	adds	r0, #1
 800906e:	f040 8090 	bne.w	8009192 <_printf_float+0x1e2>
 8009072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009076:	b00d      	add	sp, #52	; 0x34
 8009078:	ecbd 8b02 	vpop	{d8}
 800907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009080:	4642      	mov	r2, r8
 8009082:	464b      	mov	r3, r9
 8009084:	4640      	mov	r0, r8
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 fd50 	bl	8000b2c <__aeabi_dcmpun>
 800908c:	b140      	cbz	r0, 80090a0 <_printf_float+0xf0>
 800908e:	464b      	mov	r3, r9
 8009090:	2b00      	cmp	r3, #0
 8009092:	bfbc      	itt	lt
 8009094:	232d      	movlt	r3, #45	; 0x2d
 8009096:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800909a:	487f      	ldr	r0, [pc, #508]	; (8009298 <_printf_float+0x2e8>)
 800909c:	4b7f      	ldr	r3, [pc, #508]	; (800929c <_printf_float+0x2ec>)
 800909e:	e7d1      	b.n	8009044 <_printf_float+0x94>
 80090a0:	6863      	ldr	r3, [r4, #4]
 80090a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090a6:	9206      	str	r2, [sp, #24]
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	d13f      	bne.n	800912c <_printf_float+0x17c>
 80090ac:	2306      	movs	r3, #6
 80090ae:	6063      	str	r3, [r4, #4]
 80090b0:	9b05      	ldr	r3, [sp, #20]
 80090b2:	6861      	ldr	r1, [r4, #4]
 80090b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80090b8:	2300      	movs	r3, #0
 80090ba:	9303      	str	r3, [sp, #12]
 80090bc:	ab0a      	add	r3, sp, #40	; 0x28
 80090be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80090c2:	ab09      	add	r3, sp, #36	; 0x24
 80090c4:	ec49 8b10 	vmov	d0, r8, r9
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	6022      	str	r2, [r4, #0]
 80090cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090d0:	4628      	mov	r0, r5
 80090d2:	f7ff fecd 	bl	8008e70 <__cvt>
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090da:	2b47      	cmp	r3, #71	; 0x47
 80090dc:	4680      	mov	r8, r0
 80090de:	d108      	bne.n	80090f2 <_printf_float+0x142>
 80090e0:	1cc8      	adds	r0, r1, #3
 80090e2:	db02      	blt.n	80090ea <_printf_float+0x13a>
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	4299      	cmp	r1, r3
 80090e8:	dd41      	ble.n	800916e <_printf_float+0x1be>
 80090ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80090ee:	fa5f fb8b 	uxtb.w	fp, fp
 80090f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090f6:	d820      	bhi.n	800913a <_printf_float+0x18a>
 80090f8:	3901      	subs	r1, #1
 80090fa:	465a      	mov	r2, fp
 80090fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009100:	9109      	str	r1, [sp, #36]	; 0x24
 8009102:	f7ff ff17 	bl	8008f34 <__exponent>
 8009106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009108:	1813      	adds	r3, r2, r0
 800910a:	2a01      	cmp	r2, #1
 800910c:	4681      	mov	r9, r0
 800910e:	6123      	str	r3, [r4, #16]
 8009110:	dc02      	bgt.n	8009118 <_printf_float+0x168>
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	07d2      	lsls	r2, r2, #31
 8009116:	d501      	bpl.n	800911c <_printf_float+0x16c>
 8009118:	3301      	adds	r3, #1
 800911a:	6123      	str	r3, [r4, #16]
 800911c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009120:	2b00      	cmp	r3, #0
 8009122:	d09c      	beq.n	800905e <_printf_float+0xae>
 8009124:	232d      	movs	r3, #45	; 0x2d
 8009126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800912a:	e798      	b.n	800905e <_printf_float+0xae>
 800912c:	9a06      	ldr	r2, [sp, #24]
 800912e:	2a47      	cmp	r2, #71	; 0x47
 8009130:	d1be      	bne.n	80090b0 <_printf_float+0x100>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1bc      	bne.n	80090b0 <_printf_float+0x100>
 8009136:	2301      	movs	r3, #1
 8009138:	e7b9      	b.n	80090ae <_printf_float+0xfe>
 800913a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800913e:	d118      	bne.n	8009172 <_printf_float+0x1c2>
 8009140:	2900      	cmp	r1, #0
 8009142:	6863      	ldr	r3, [r4, #4]
 8009144:	dd0b      	ble.n	800915e <_printf_float+0x1ae>
 8009146:	6121      	str	r1, [r4, #16]
 8009148:	b913      	cbnz	r3, 8009150 <_printf_float+0x1a0>
 800914a:	6822      	ldr	r2, [r4, #0]
 800914c:	07d0      	lsls	r0, r2, #31
 800914e:	d502      	bpl.n	8009156 <_printf_float+0x1a6>
 8009150:	3301      	adds	r3, #1
 8009152:	440b      	add	r3, r1
 8009154:	6123      	str	r3, [r4, #16]
 8009156:	65a1      	str	r1, [r4, #88]	; 0x58
 8009158:	f04f 0900 	mov.w	r9, #0
 800915c:	e7de      	b.n	800911c <_printf_float+0x16c>
 800915e:	b913      	cbnz	r3, 8009166 <_printf_float+0x1b6>
 8009160:	6822      	ldr	r2, [r4, #0]
 8009162:	07d2      	lsls	r2, r2, #31
 8009164:	d501      	bpl.n	800916a <_printf_float+0x1ba>
 8009166:	3302      	adds	r3, #2
 8009168:	e7f4      	b.n	8009154 <_printf_float+0x1a4>
 800916a:	2301      	movs	r3, #1
 800916c:	e7f2      	b.n	8009154 <_printf_float+0x1a4>
 800916e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009174:	4299      	cmp	r1, r3
 8009176:	db05      	blt.n	8009184 <_printf_float+0x1d4>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	6121      	str	r1, [r4, #16]
 800917c:	07d8      	lsls	r0, r3, #31
 800917e:	d5ea      	bpl.n	8009156 <_printf_float+0x1a6>
 8009180:	1c4b      	adds	r3, r1, #1
 8009182:	e7e7      	b.n	8009154 <_printf_float+0x1a4>
 8009184:	2900      	cmp	r1, #0
 8009186:	bfd4      	ite	le
 8009188:	f1c1 0202 	rsble	r2, r1, #2
 800918c:	2201      	movgt	r2, #1
 800918e:	4413      	add	r3, r2
 8009190:	e7e0      	b.n	8009154 <_printf_float+0x1a4>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	055a      	lsls	r2, r3, #21
 8009196:	d407      	bmi.n	80091a8 <_printf_float+0x1f8>
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	4642      	mov	r2, r8
 800919c:	4631      	mov	r1, r6
 800919e:	4628      	mov	r0, r5
 80091a0:	47b8      	blx	r7
 80091a2:	3001      	adds	r0, #1
 80091a4:	d12c      	bne.n	8009200 <_printf_float+0x250>
 80091a6:	e764      	b.n	8009072 <_printf_float+0xc2>
 80091a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091ac:	f240 80e0 	bls.w	8009370 <_printf_float+0x3c0>
 80091b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091b4:	2200      	movs	r2, #0
 80091b6:	2300      	movs	r3, #0
 80091b8:	f7f7 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d034      	beq.n	800922a <_printf_float+0x27a>
 80091c0:	4a37      	ldr	r2, [pc, #220]	; (80092a0 <_printf_float+0x2f0>)
 80091c2:	2301      	movs	r3, #1
 80091c4:	4631      	mov	r1, r6
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	f43f af51 	beq.w	8009072 <_printf_float+0xc2>
 80091d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091d4:	429a      	cmp	r2, r3
 80091d6:	db02      	blt.n	80091de <_printf_float+0x22e>
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	07d8      	lsls	r0, r3, #31
 80091dc:	d510      	bpl.n	8009200 <_printf_float+0x250>
 80091de:	ee18 3a10 	vmov	r3, s16
 80091e2:	4652      	mov	r2, sl
 80091e4:	4631      	mov	r1, r6
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	f43f af41 	beq.w	8009072 <_printf_float+0xc2>
 80091f0:	f04f 0800 	mov.w	r8, #0
 80091f4:	f104 091a 	add.w	r9, r4, #26
 80091f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091fa:	3b01      	subs	r3, #1
 80091fc:	4543      	cmp	r3, r8
 80091fe:	dc09      	bgt.n	8009214 <_printf_float+0x264>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	079b      	lsls	r3, r3, #30
 8009204:	f100 8105 	bmi.w	8009412 <_printf_float+0x462>
 8009208:	68e0      	ldr	r0, [r4, #12]
 800920a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800920c:	4298      	cmp	r0, r3
 800920e:	bfb8      	it	lt
 8009210:	4618      	movlt	r0, r3
 8009212:	e730      	b.n	8009076 <_printf_float+0xc6>
 8009214:	2301      	movs	r3, #1
 8009216:	464a      	mov	r2, r9
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	f43f af27 	beq.w	8009072 <_printf_float+0xc2>
 8009224:	f108 0801 	add.w	r8, r8, #1
 8009228:	e7e6      	b.n	80091f8 <_printf_float+0x248>
 800922a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	dc39      	bgt.n	80092a4 <_printf_float+0x2f4>
 8009230:	4a1b      	ldr	r2, [pc, #108]	; (80092a0 <_printf_float+0x2f0>)
 8009232:	2301      	movs	r3, #1
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	f43f af19 	beq.w	8009072 <_printf_float+0xc2>
 8009240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009244:	4313      	orrs	r3, r2
 8009246:	d102      	bne.n	800924e <_printf_float+0x29e>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	07d9      	lsls	r1, r3, #31
 800924c:	d5d8      	bpl.n	8009200 <_printf_float+0x250>
 800924e:	ee18 3a10 	vmov	r3, s16
 8009252:	4652      	mov	r2, sl
 8009254:	4631      	mov	r1, r6
 8009256:	4628      	mov	r0, r5
 8009258:	47b8      	blx	r7
 800925a:	3001      	adds	r0, #1
 800925c:	f43f af09 	beq.w	8009072 <_printf_float+0xc2>
 8009260:	f04f 0900 	mov.w	r9, #0
 8009264:	f104 0a1a 	add.w	sl, r4, #26
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	425b      	negs	r3, r3
 800926c:	454b      	cmp	r3, r9
 800926e:	dc01      	bgt.n	8009274 <_printf_float+0x2c4>
 8009270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009272:	e792      	b.n	800919a <_printf_float+0x1ea>
 8009274:	2301      	movs	r3, #1
 8009276:	4652      	mov	r2, sl
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f aef7 	beq.w	8009072 <_printf_float+0xc2>
 8009284:	f109 0901 	add.w	r9, r9, #1
 8009288:	e7ee      	b.n	8009268 <_printf_float+0x2b8>
 800928a:	bf00      	nop
 800928c:	7fefffff 	.word	0x7fefffff
 8009290:	0800bce4 	.word	0x0800bce4
 8009294:	0800bce8 	.word	0x0800bce8
 8009298:	0800bcf0 	.word	0x0800bcf0
 800929c:	0800bcec 	.word	0x0800bcec
 80092a0:	0800bcf4 	.word	0x0800bcf4
 80092a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092a8:	429a      	cmp	r2, r3
 80092aa:	bfa8      	it	ge
 80092ac:	461a      	movge	r2, r3
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	4691      	mov	r9, r2
 80092b2:	dc37      	bgt.n	8009324 <_printf_float+0x374>
 80092b4:	f04f 0b00 	mov.w	fp, #0
 80092b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092bc:	f104 021a 	add.w	r2, r4, #26
 80092c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092c2:	9305      	str	r3, [sp, #20]
 80092c4:	eba3 0309 	sub.w	r3, r3, r9
 80092c8:	455b      	cmp	r3, fp
 80092ca:	dc33      	bgt.n	8009334 <_printf_float+0x384>
 80092cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092d0:	429a      	cmp	r2, r3
 80092d2:	db3b      	blt.n	800934c <_printf_float+0x39c>
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	07da      	lsls	r2, r3, #31
 80092d8:	d438      	bmi.n	800934c <_printf_float+0x39c>
 80092da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092dc:	9a05      	ldr	r2, [sp, #20]
 80092de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092e0:	1a9a      	subs	r2, r3, r2
 80092e2:	eba3 0901 	sub.w	r9, r3, r1
 80092e6:	4591      	cmp	r9, r2
 80092e8:	bfa8      	it	ge
 80092ea:	4691      	movge	r9, r2
 80092ec:	f1b9 0f00 	cmp.w	r9, #0
 80092f0:	dc35      	bgt.n	800935e <_printf_float+0x3ae>
 80092f2:	f04f 0800 	mov.w	r8, #0
 80092f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092fa:	f104 0a1a 	add.w	sl, r4, #26
 80092fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	eba3 0309 	sub.w	r3, r3, r9
 8009308:	4543      	cmp	r3, r8
 800930a:	f77f af79 	ble.w	8009200 <_printf_float+0x250>
 800930e:	2301      	movs	r3, #1
 8009310:	4652      	mov	r2, sl
 8009312:	4631      	mov	r1, r6
 8009314:	4628      	mov	r0, r5
 8009316:	47b8      	blx	r7
 8009318:	3001      	adds	r0, #1
 800931a:	f43f aeaa 	beq.w	8009072 <_printf_float+0xc2>
 800931e:	f108 0801 	add.w	r8, r8, #1
 8009322:	e7ec      	b.n	80092fe <_printf_float+0x34e>
 8009324:	4613      	mov	r3, r2
 8009326:	4631      	mov	r1, r6
 8009328:	4642      	mov	r2, r8
 800932a:	4628      	mov	r0, r5
 800932c:	47b8      	blx	r7
 800932e:	3001      	adds	r0, #1
 8009330:	d1c0      	bne.n	80092b4 <_printf_float+0x304>
 8009332:	e69e      	b.n	8009072 <_printf_float+0xc2>
 8009334:	2301      	movs	r3, #1
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	9205      	str	r2, [sp, #20]
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	f43f ae97 	beq.w	8009072 <_printf_float+0xc2>
 8009344:	9a05      	ldr	r2, [sp, #20]
 8009346:	f10b 0b01 	add.w	fp, fp, #1
 800934a:	e7b9      	b.n	80092c0 <_printf_float+0x310>
 800934c:	ee18 3a10 	vmov	r3, s16
 8009350:	4652      	mov	r2, sl
 8009352:	4631      	mov	r1, r6
 8009354:	4628      	mov	r0, r5
 8009356:	47b8      	blx	r7
 8009358:	3001      	adds	r0, #1
 800935a:	d1be      	bne.n	80092da <_printf_float+0x32a>
 800935c:	e689      	b.n	8009072 <_printf_float+0xc2>
 800935e:	9a05      	ldr	r2, [sp, #20]
 8009360:	464b      	mov	r3, r9
 8009362:	4442      	add	r2, r8
 8009364:	4631      	mov	r1, r6
 8009366:	4628      	mov	r0, r5
 8009368:	47b8      	blx	r7
 800936a:	3001      	adds	r0, #1
 800936c:	d1c1      	bne.n	80092f2 <_printf_float+0x342>
 800936e:	e680      	b.n	8009072 <_printf_float+0xc2>
 8009370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009372:	2a01      	cmp	r2, #1
 8009374:	dc01      	bgt.n	800937a <_printf_float+0x3ca>
 8009376:	07db      	lsls	r3, r3, #31
 8009378:	d538      	bpl.n	80093ec <_printf_float+0x43c>
 800937a:	2301      	movs	r3, #1
 800937c:	4642      	mov	r2, r8
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	f43f ae74 	beq.w	8009072 <_printf_float+0xc2>
 800938a:	ee18 3a10 	vmov	r3, s16
 800938e:	4652      	mov	r2, sl
 8009390:	4631      	mov	r1, r6
 8009392:	4628      	mov	r0, r5
 8009394:	47b8      	blx	r7
 8009396:	3001      	adds	r0, #1
 8009398:	f43f ae6b 	beq.w	8009072 <_printf_float+0xc2>
 800939c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093a0:	2200      	movs	r2, #0
 80093a2:	2300      	movs	r3, #0
 80093a4:	f7f7 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 80093a8:	b9d8      	cbnz	r0, 80093e2 <_printf_float+0x432>
 80093aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ac:	f108 0201 	add.w	r2, r8, #1
 80093b0:	3b01      	subs	r3, #1
 80093b2:	4631      	mov	r1, r6
 80093b4:	4628      	mov	r0, r5
 80093b6:	47b8      	blx	r7
 80093b8:	3001      	adds	r0, #1
 80093ba:	d10e      	bne.n	80093da <_printf_float+0x42a>
 80093bc:	e659      	b.n	8009072 <_printf_float+0xc2>
 80093be:	2301      	movs	r3, #1
 80093c0:	4652      	mov	r2, sl
 80093c2:	4631      	mov	r1, r6
 80093c4:	4628      	mov	r0, r5
 80093c6:	47b8      	blx	r7
 80093c8:	3001      	adds	r0, #1
 80093ca:	f43f ae52 	beq.w	8009072 <_printf_float+0xc2>
 80093ce:	f108 0801 	add.w	r8, r8, #1
 80093d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d4:	3b01      	subs	r3, #1
 80093d6:	4543      	cmp	r3, r8
 80093d8:	dcf1      	bgt.n	80093be <_printf_float+0x40e>
 80093da:	464b      	mov	r3, r9
 80093dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093e0:	e6dc      	b.n	800919c <_printf_float+0x1ec>
 80093e2:	f04f 0800 	mov.w	r8, #0
 80093e6:	f104 0a1a 	add.w	sl, r4, #26
 80093ea:	e7f2      	b.n	80093d2 <_printf_float+0x422>
 80093ec:	2301      	movs	r3, #1
 80093ee:	4642      	mov	r2, r8
 80093f0:	e7df      	b.n	80093b2 <_printf_float+0x402>
 80093f2:	2301      	movs	r3, #1
 80093f4:	464a      	mov	r2, r9
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	f43f ae38 	beq.w	8009072 <_printf_float+0xc2>
 8009402:	f108 0801 	add.w	r8, r8, #1
 8009406:	68e3      	ldr	r3, [r4, #12]
 8009408:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800940a:	1a5b      	subs	r3, r3, r1
 800940c:	4543      	cmp	r3, r8
 800940e:	dcf0      	bgt.n	80093f2 <_printf_float+0x442>
 8009410:	e6fa      	b.n	8009208 <_printf_float+0x258>
 8009412:	f04f 0800 	mov.w	r8, #0
 8009416:	f104 0919 	add.w	r9, r4, #25
 800941a:	e7f4      	b.n	8009406 <_printf_float+0x456>

0800941c <_printf_common>:
 800941c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009420:	4616      	mov	r6, r2
 8009422:	4699      	mov	r9, r3
 8009424:	688a      	ldr	r2, [r1, #8]
 8009426:	690b      	ldr	r3, [r1, #16]
 8009428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800942c:	4293      	cmp	r3, r2
 800942e:	bfb8      	it	lt
 8009430:	4613      	movlt	r3, r2
 8009432:	6033      	str	r3, [r6, #0]
 8009434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009438:	4607      	mov	r7, r0
 800943a:	460c      	mov	r4, r1
 800943c:	b10a      	cbz	r2, 8009442 <_printf_common+0x26>
 800943e:	3301      	adds	r3, #1
 8009440:	6033      	str	r3, [r6, #0]
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	0699      	lsls	r1, r3, #26
 8009446:	bf42      	ittt	mi
 8009448:	6833      	ldrmi	r3, [r6, #0]
 800944a:	3302      	addmi	r3, #2
 800944c:	6033      	strmi	r3, [r6, #0]
 800944e:	6825      	ldr	r5, [r4, #0]
 8009450:	f015 0506 	ands.w	r5, r5, #6
 8009454:	d106      	bne.n	8009464 <_printf_common+0x48>
 8009456:	f104 0a19 	add.w	sl, r4, #25
 800945a:	68e3      	ldr	r3, [r4, #12]
 800945c:	6832      	ldr	r2, [r6, #0]
 800945e:	1a9b      	subs	r3, r3, r2
 8009460:	42ab      	cmp	r3, r5
 8009462:	dc26      	bgt.n	80094b2 <_printf_common+0x96>
 8009464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009468:	1e13      	subs	r3, r2, #0
 800946a:	6822      	ldr	r2, [r4, #0]
 800946c:	bf18      	it	ne
 800946e:	2301      	movne	r3, #1
 8009470:	0692      	lsls	r2, r2, #26
 8009472:	d42b      	bmi.n	80094cc <_printf_common+0xb0>
 8009474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009478:	4649      	mov	r1, r9
 800947a:	4638      	mov	r0, r7
 800947c:	47c0      	blx	r8
 800947e:	3001      	adds	r0, #1
 8009480:	d01e      	beq.n	80094c0 <_printf_common+0xa4>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	68e5      	ldr	r5, [r4, #12]
 8009486:	6832      	ldr	r2, [r6, #0]
 8009488:	f003 0306 	and.w	r3, r3, #6
 800948c:	2b04      	cmp	r3, #4
 800948e:	bf08      	it	eq
 8009490:	1aad      	subeq	r5, r5, r2
 8009492:	68a3      	ldr	r3, [r4, #8]
 8009494:	6922      	ldr	r2, [r4, #16]
 8009496:	bf0c      	ite	eq
 8009498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800949c:	2500      	movne	r5, #0
 800949e:	4293      	cmp	r3, r2
 80094a0:	bfc4      	itt	gt
 80094a2:	1a9b      	subgt	r3, r3, r2
 80094a4:	18ed      	addgt	r5, r5, r3
 80094a6:	2600      	movs	r6, #0
 80094a8:	341a      	adds	r4, #26
 80094aa:	42b5      	cmp	r5, r6
 80094ac:	d11a      	bne.n	80094e4 <_printf_common+0xc8>
 80094ae:	2000      	movs	r0, #0
 80094b0:	e008      	b.n	80094c4 <_printf_common+0xa8>
 80094b2:	2301      	movs	r3, #1
 80094b4:	4652      	mov	r2, sl
 80094b6:	4649      	mov	r1, r9
 80094b8:	4638      	mov	r0, r7
 80094ba:	47c0      	blx	r8
 80094bc:	3001      	adds	r0, #1
 80094be:	d103      	bne.n	80094c8 <_printf_common+0xac>
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c8:	3501      	adds	r5, #1
 80094ca:	e7c6      	b.n	800945a <_printf_common+0x3e>
 80094cc:	18e1      	adds	r1, r4, r3
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	2030      	movs	r0, #48	; 0x30
 80094d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094d6:	4422      	add	r2, r4
 80094d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094e0:	3302      	adds	r3, #2
 80094e2:	e7c7      	b.n	8009474 <_printf_common+0x58>
 80094e4:	2301      	movs	r3, #1
 80094e6:	4622      	mov	r2, r4
 80094e8:	4649      	mov	r1, r9
 80094ea:	4638      	mov	r0, r7
 80094ec:	47c0      	blx	r8
 80094ee:	3001      	adds	r0, #1
 80094f0:	d0e6      	beq.n	80094c0 <_printf_common+0xa4>
 80094f2:	3601      	adds	r6, #1
 80094f4:	e7d9      	b.n	80094aa <_printf_common+0x8e>
	...

080094f8 <_printf_i>:
 80094f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	7e0f      	ldrb	r7, [r1, #24]
 80094fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009500:	2f78      	cmp	r7, #120	; 0x78
 8009502:	4691      	mov	r9, r2
 8009504:	4680      	mov	r8, r0
 8009506:	460c      	mov	r4, r1
 8009508:	469a      	mov	sl, r3
 800950a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800950e:	d807      	bhi.n	8009520 <_printf_i+0x28>
 8009510:	2f62      	cmp	r7, #98	; 0x62
 8009512:	d80a      	bhi.n	800952a <_printf_i+0x32>
 8009514:	2f00      	cmp	r7, #0
 8009516:	f000 80d8 	beq.w	80096ca <_printf_i+0x1d2>
 800951a:	2f58      	cmp	r7, #88	; 0x58
 800951c:	f000 80a3 	beq.w	8009666 <_printf_i+0x16e>
 8009520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009528:	e03a      	b.n	80095a0 <_printf_i+0xa8>
 800952a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800952e:	2b15      	cmp	r3, #21
 8009530:	d8f6      	bhi.n	8009520 <_printf_i+0x28>
 8009532:	a101      	add	r1, pc, #4	; (adr r1, 8009538 <_printf_i+0x40>)
 8009534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009538:	08009591 	.word	0x08009591
 800953c:	080095a5 	.word	0x080095a5
 8009540:	08009521 	.word	0x08009521
 8009544:	08009521 	.word	0x08009521
 8009548:	08009521 	.word	0x08009521
 800954c:	08009521 	.word	0x08009521
 8009550:	080095a5 	.word	0x080095a5
 8009554:	08009521 	.word	0x08009521
 8009558:	08009521 	.word	0x08009521
 800955c:	08009521 	.word	0x08009521
 8009560:	08009521 	.word	0x08009521
 8009564:	080096b1 	.word	0x080096b1
 8009568:	080095d5 	.word	0x080095d5
 800956c:	08009693 	.word	0x08009693
 8009570:	08009521 	.word	0x08009521
 8009574:	08009521 	.word	0x08009521
 8009578:	080096d3 	.word	0x080096d3
 800957c:	08009521 	.word	0x08009521
 8009580:	080095d5 	.word	0x080095d5
 8009584:	08009521 	.word	0x08009521
 8009588:	08009521 	.word	0x08009521
 800958c:	0800969b 	.word	0x0800969b
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	1d1a      	adds	r2, r3, #4
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	602a      	str	r2, [r5, #0]
 8009598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800959c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095a0:	2301      	movs	r3, #1
 80095a2:	e0a3      	b.n	80096ec <_printf_i+0x1f4>
 80095a4:	6820      	ldr	r0, [r4, #0]
 80095a6:	6829      	ldr	r1, [r5, #0]
 80095a8:	0606      	lsls	r6, r0, #24
 80095aa:	f101 0304 	add.w	r3, r1, #4
 80095ae:	d50a      	bpl.n	80095c6 <_printf_i+0xce>
 80095b0:	680e      	ldr	r6, [r1, #0]
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	2e00      	cmp	r6, #0
 80095b6:	da03      	bge.n	80095c0 <_printf_i+0xc8>
 80095b8:	232d      	movs	r3, #45	; 0x2d
 80095ba:	4276      	negs	r6, r6
 80095bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c0:	485e      	ldr	r0, [pc, #376]	; (800973c <_printf_i+0x244>)
 80095c2:	230a      	movs	r3, #10
 80095c4:	e019      	b.n	80095fa <_printf_i+0x102>
 80095c6:	680e      	ldr	r6, [r1, #0]
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095ce:	bf18      	it	ne
 80095d0:	b236      	sxthne	r6, r6
 80095d2:	e7ef      	b.n	80095b4 <_printf_i+0xbc>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	6820      	ldr	r0, [r4, #0]
 80095d8:	1d19      	adds	r1, r3, #4
 80095da:	6029      	str	r1, [r5, #0]
 80095dc:	0601      	lsls	r1, r0, #24
 80095de:	d501      	bpl.n	80095e4 <_printf_i+0xec>
 80095e0:	681e      	ldr	r6, [r3, #0]
 80095e2:	e002      	b.n	80095ea <_printf_i+0xf2>
 80095e4:	0646      	lsls	r6, r0, #25
 80095e6:	d5fb      	bpl.n	80095e0 <_printf_i+0xe8>
 80095e8:	881e      	ldrh	r6, [r3, #0]
 80095ea:	4854      	ldr	r0, [pc, #336]	; (800973c <_printf_i+0x244>)
 80095ec:	2f6f      	cmp	r7, #111	; 0x6f
 80095ee:	bf0c      	ite	eq
 80095f0:	2308      	moveq	r3, #8
 80095f2:	230a      	movne	r3, #10
 80095f4:	2100      	movs	r1, #0
 80095f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095fa:	6865      	ldr	r5, [r4, #4]
 80095fc:	60a5      	str	r5, [r4, #8]
 80095fe:	2d00      	cmp	r5, #0
 8009600:	bfa2      	ittt	ge
 8009602:	6821      	ldrge	r1, [r4, #0]
 8009604:	f021 0104 	bicge.w	r1, r1, #4
 8009608:	6021      	strge	r1, [r4, #0]
 800960a:	b90e      	cbnz	r6, 8009610 <_printf_i+0x118>
 800960c:	2d00      	cmp	r5, #0
 800960e:	d04d      	beq.n	80096ac <_printf_i+0x1b4>
 8009610:	4615      	mov	r5, r2
 8009612:	fbb6 f1f3 	udiv	r1, r6, r3
 8009616:	fb03 6711 	mls	r7, r3, r1, r6
 800961a:	5dc7      	ldrb	r7, [r0, r7]
 800961c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009620:	4637      	mov	r7, r6
 8009622:	42bb      	cmp	r3, r7
 8009624:	460e      	mov	r6, r1
 8009626:	d9f4      	bls.n	8009612 <_printf_i+0x11a>
 8009628:	2b08      	cmp	r3, #8
 800962a:	d10b      	bne.n	8009644 <_printf_i+0x14c>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	07de      	lsls	r6, r3, #31
 8009630:	d508      	bpl.n	8009644 <_printf_i+0x14c>
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	6861      	ldr	r1, [r4, #4]
 8009636:	4299      	cmp	r1, r3
 8009638:	bfde      	ittt	le
 800963a:	2330      	movle	r3, #48	; 0x30
 800963c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009640:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009644:	1b52      	subs	r2, r2, r5
 8009646:	6122      	str	r2, [r4, #16]
 8009648:	f8cd a000 	str.w	sl, [sp]
 800964c:	464b      	mov	r3, r9
 800964e:	aa03      	add	r2, sp, #12
 8009650:	4621      	mov	r1, r4
 8009652:	4640      	mov	r0, r8
 8009654:	f7ff fee2 	bl	800941c <_printf_common>
 8009658:	3001      	adds	r0, #1
 800965a:	d14c      	bne.n	80096f6 <_printf_i+0x1fe>
 800965c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009660:	b004      	add	sp, #16
 8009662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009666:	4835      	ldr	r0, [pc, #212]	; (800973c <_printf_i+0x244>)
 8009668:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800966c:	6829      	ldr	r1, [r5, #0]
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	f851 6b04 	ldr.w	r6, [r1], #4
 8009674:	6029      	str	r1, [r5, #0]
 8009676:	061d      	lsls	r5, r3, #24
 8009678:	d514      	bpl.n	80096a4 <_printf_i+0x1ac>
 800967a:	07df      	lsls	r7, r3, #31
 800967c:	bf44      	itt	mi
 800967e:	f043 0320 	orrmi.w	r3, r3, #32
 8009682:	6023      	strmi	r3, [r4, #0]
 8009684:	b91e      	cbnz	r6, 800968e <_printf_i+0x196>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	f023 0320 	bic.w	r3, r3, #32
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	2310      	movs	r3, #16
 8009690:	e7b0      	b.n	80095f4 <_printf_i+0xfc>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f043 0320 	orr.w	r3, r3, #32
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	2378      	movs	r3, #120	; 0x78
 800969c:	4828      	ldr	r0, [pc, #160]	; (8009740 <_printf_i+0x248>)
 800969e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096a2:	e7e3      	b.n	800966c <_printf_i+0x174>
 80096a4:	0659      	lsls	r1, r3, #25
 80096a6:	bf48      	it	mi
 80096a8:	b2b6      	uxthmi	r6, r6
 80096aa:	e7e6      	b.n	800967a <_printf_i+0x182>
 80096ac:	4615      	mov	r5, r2
 80096ae:	e7bb      	b.n	8009628 <_printf_i+0x130>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	6826      	ldr	r6, [r4, #0]
 80096b4:	6961      	ldr	r1, [r4, #20]
 80096b6:	1d18      	adds	r0, r3, #4
 80096b8:	6028      	str	r0, [r5, #0]
 80096ba:	0635      	lsls	r5, r6, #24
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	d501      	bpl.n	80096c4 <_printf_i+0x1cc>
 80096c0:	6019      	str	r1, [r3, #0]
 80096c2:	e002      	b.n	80096ca <_printf_i+0x1d2>
 80096c4:	0670      	lsls	r0, r6, #25
 80096c6:	d5fb      	bpl.n	80096c0 <_printf_i+0x1c8>
 80096c8:	8019      	strh	r1, [r3, #0]
 80096ca:	2300      	movs	r3, #0
 80096cc:	6123      	str	r3, [r4, #16]
 80096ce:	4615      	mov	r5, r2
 80096d0:	e7ba      	b.n	8009648 <_printf_i+0x150>
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	1d1a      	adds	r2, r3, #4
 80096d6:	602a      	str	r2, [r5, #0]
 80096d8:	681d      	ldr	r5, [r3, #0]
 80096da:	6862      	ldr	r2, [r4, #4]
 80096dc:	2100      	movs	r1, #0
 80096de:	4628      	mov	r0, r5
 80096e0:	f7f6 fd7e 	bl	80001e0 <memchr>
 80096e4:	b108      	cbz	r0, 80096ea <_printf_i+0x1f2>
 80096e6:	1b40      	subs	r0, r0, r5
 80096e8:	6060      	str	r0, [r4, #4]
 80096ea:	6863      	ldr	r3, [r4, #4]
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	2300      	movs	r3, #0
 80096f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f4:	e7a8      	b.n	8009648 <_printf_i+0x150>
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	462a      	mov	r2, r5
 80096fa:	4649      	mov	r1, r9
 80096fc:	4640      	mov	r0, r8
 80096fe:	47d0      	blx	sl
 8009700:	3001      	adds	r0, #1
 8009702:	d0ab      	beq.n	800965c <_printf_i+0x164>
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	079b      	lsls	r3, r3, #30
 8009708:	d413      	bmi.n	8009732 <_printf_i+0x23a>
 800970a:	68e0      	ldr	r0, [r4, #12]
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	4298      	cmp	r0, r3
 8009710:	bfb8      	it	lt
 8009712:	4618      	movlt	r0, r3
 8009714:	e7a4      	b.n	8009660 <_printf_i+0x168>
 8009716:	2301      	movs	r3, #1
 8009718:	4632      	mov	r2, r6
 800971a:	4649      	mov	r1, r9
 800971c:	4640      	mov	r0, r8
 800971e:	47d0      	blx	sl
 8009720:	3001      	adds	r0, #1
 8009722:	d09b      	beq.n	800965c <_printf_i+0x164>
 8009724:	3501      	adds	r5, #1
 8009726:	68e3      	ldr	r3, [r4, #12]
 8009728:	9903      	ldr	r1, [sp, #12]
 800972a:	1a5b      	subs	r3, r3, r1
 800972c:	42ab      	cmp	r3, r5
 800972e:	dcf2      	bgt.n	8009716 <_printf_i+0x21e>
 8009730:	e7eb      	b.n	800970a <_printf_i+0x212>
 8009732:	2500      	movs	r5, #0
 8009734:	f104 0619 	add.w	r6, r4, #25
 8009738:	e7f5      	b.n	8009726 <_printf_i+0x22e>
 800973a:	bf00      	nop
 800973c:	0800bcf6 	.word	0x0800bcf6
 8009740:	0800bd07 	.word	0x0800bd07

08009744 <sniprintf>:
 8009744:	b40c      	push	{r2, r3}
 8009746:	b530      	push	{r4, r5, lr}
 8009748:	4b17      	ldr	r3, [pc, #92]	; (80097a8 <sniprintf+0x64>)
 800974a:	1e0c      	subs	r4, r1, #0
 800974c:	681d      	ldr	r5, [r3, #0]
 800974e:	b09d      	sub	sp, #116	; 0x74
 8009750:	da08      	bge.n	8009764 <sniprintf+0x20>
 8009752:	238b      	movs	r3, #139	; 0x8b
 8009754:	602b      	str	r3, [r5, #0]
 8009756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800975a:	b01d      	add	sp, #116	; 0x74
 800975c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009760:	b002      	add	sp, #8
 8009762:	4770      	bx	lr
 8009764:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009768:	f8ad 3014 	strh.w	r3, [sp, #20]
 800976c:	bf14      	ite	ne
 800976e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009772:	4623      	moveq	r3, r4
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800977c:	9002      	str	r0, [sp, #8]
 800977e:	9006      	str	r0, [sp, #24]
 8009780:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009784:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009786:	ab21      	add	r3, sp, #132	; 0x84
 8009788:	a902      	add	r1, sp, #8
 800978a:	4628      	mov	r0, r5
 800978c:	9301      	str	r3, [sp, #4]
 800978e:	f001 fb77 	bl	800ae80 <_svfiprintf_r>
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	bfbc      	itt	lt
 8009796:	238b      	movlt	r3, #139	; 0x8b
 8009798:	602b      	strlt	r3, [r5, #0]
 800979a:	2c00      	cmp	r4, #0
 800979c:	d0dd      	beq.n	800975a <sniprintf+0x16>
 800979e:	9b02      	ldr	r3, [sp, #8]
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]
 80097a4:	e7d9      	b.n	800975a <sniprintf+0x16>
 80097a6:	bf00      	nop
 80097a8:	2000010c 	.word	0x2000010c

080097ac <strcat>:
 80097ac:	b510      	push	{r4, lr}
 80097ae:	4602      	mov	r2, r0
 80097b0:	7814      	ldrb	r4, [r2, #0]
 80097b2:	4613      	mov	r3, r2
 80097b4:	3201      	adds	r2, #1
 80097b6:	2c00      	cmp	r4, #0
 80097b8:	d1fa      	bne.n	80097b0 <strcat+0x4>
 80097ba:	3b01      	subs	r3, #1
 80097bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097c4:	2a00      	cmp	r2, #0
 80097c6:	d1f9      	bne.n	80097bc <strcat+0x10>
 80097c8:	bd10      	pop	{r4, pc}

080097ca <quorem>:
 80097ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ce:	6903      	ldr	r3, [r0, #16]
 80097d0:	690c      	ldr	r4, [r1, #16]
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	4607      	mov	r7, r0
 80097d6:	f2c0 8081 	blt.w	80098dc <quorem+0x112>
 80097da:	3c01      	subs	r4, #1
 80097dc:	f101 0814 	add.w	r8, r1, #20
 80097e0:	f100 0514 	add.w	r5, r0, #20
 80097e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097f2:	3301      	adds	r3, #1
 80097f4:	429a      	cmp	r2, r3
 80097f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8009802:	d331      	bcc.n	8009868 <quorem+0x9e>
 8009804:	f04f 0e00 	mov.w	lr, #0
 8009808:	4640      	mov	r0, r8
 800980a:	46ac      	mov	ip, r5
 800980c:	46f2      	mov	sl, lr
 800980e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009812:	b293      	uxth	r3, r2
 8009814:	fb06 e303 	mla	r3, r6, r3, lr
 8009818:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800981c:	b29b      	uxth	r3, r3
 800981e:	ebaa 0303 	sub.w	r3, sl, r3
 8009822:	f8dc a000 	ldr.w	sl, [ip]
 8009826:	0c12      	lsrs	r2, r2, #16
 8009828:	fa13 f38a 	uxtah	r3, r3, sl
 800982c:	fb06 e202 	mla	r2, r6, r2, lr
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	9b00      	ldr	r3, [sp, #0]
 8009834:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009838:	b292      	uxth	r2, r2
 800983a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800983e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009842:	f8bd 3000 	ldrh.w	r3, [sp]
 8009846:	4581      	cmp	r9, r0
 8009848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800984c:	f84c 3b04 	str.w	r3, [ip], #4
 8009850:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009854:	d2db      	bcs.n	800980e <quorem+0x44>
 8009856:	f855 300b 	ldr.w	r3, [r5, fp]
 800985a:	b92b      	cbnz	r3, 8009868 <quorem+0x9e>
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	3b04      	subs	r3, #4
 8009860:	429d      	cmp	r5, r3
 8009862:	461a      	mov	r2, r3
 8009864:	d32e      	bcc.n	80098c4 <quorem+0xfa>
 8009866:	613c      	str	r4, [r7, #16]
 8009868:	4638      	mov	r0, r7
 800986a:	f001 f8b5 	bl	800a9d8 <__mcmp>
 800986e:	2800      	cmp	r0, #0
 8009870:	db24      	blt.n	80098bc <quorem+0xf2>
 8009872:	3601      	adds	r6, #1
 8009874:	4628      	mov	r0, r5
 8009876:	f04f 0c00 	mov.w	ip, #0
 800987a:	f858 2b04 	ldr.w	r2, [r8], #4
 800987e:	f8d0 e000 	ldr.w	lr, [r0]
 8009882:	b293      	uxth	r3, r2
 8009884:	ebac 0303 	sub.w	r3, ip, r3
 8009888:	0c12      	lsrs	r2, r2, #16
 800988a:	fa13 f38e 	uxtah	r3, r3, lr
 800988e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009892:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009896:	b29b      	uxth	r3, r3
 8009898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800989c:	45c1      	cmp	r9, r8
 800989e:	f840 3b04 	str.w	r3, [r0], #4
 80098a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098a6:	d2e8      	bcs.n	800987a <quorem+0xb0>
 80098a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098b0:	b922      	cbnz	r2, 80098bc <quorem+0xf2>
 80098b2:	3b04      	subs	r3, #4
 80098b4:	429d      	cmp	r5, r3
 80098b6:	461a      	mov	r2, r3
 80098b8:	d30a      	bcc.n	80098d0 <quorem+0x106>
 80098ba:	613c      	str	r4, [r7, #16]
 80098bc:	4630      	mov	r0, r6
 80098be:	b003      	add	sp, #12
 80098c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c4:	6812      	ldr	r2, [r2, #0]
 80098c6:	3b04      	subs	r3, #4
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	d1cc      	bne.n	8009866 <quorem+0x9c>
 80098cc:	3c01      	subs	r4, #1
 80098ce:	e7c7      	b.n	8009860 <quorem+0x96>
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	3b04      	subs	r3, #4
 80098d4:	2a00      	cmp	r2, #0
 80098d6:	d1f0      	bne.n	80098ba <quorem+0xf0>
 80098d8:	3c01      	subs	r4, #1
 80098da:	e7eb      	b.n	80098b4 <quorem+0xea>
 80098dc:	2000      	movs	r0, #0
 80098de:	e7ee      	b.n	80098be <quorem+0xf4>

080098e0 <_dtoa_r>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	ed2d 8b04 	vpush	{d8-d9}
 80098e8:	ec57 6b10 	vmov	r6, r7, d0
 80098ec:	b093      	sub	sp, #76	; 0x4c
 80098ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80098f4:	9106      	str	r1, [sp, #24]
 80098f6:	ee10 aa10 	vmov	sl, s0
 80098fa:	4604      	mov	r4, r0
 80098fc:	9209      	str	r2, [sp, #36]	; 0x24
 80098fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009900:	46bb      	mov	fp, r7
 8009902:	b975      	cbnz	r5, 8009922 <_dtoa_r+0x42>
 8009904:	2010      	movs	r0, #16
 8009906:	f000 fddd 	bl	800a4c4 <malloc>
 800990a:	4602      	mov	r2, r0
 800990c:	6260      	str	r0, [r4, #36]	; 0x24
 800990e:	b920      	cbnz	r0, 800991a <_dtoa_r+0x3a>
 8009910:	4ba7      	ldr	r3, [pc, #668]	; (8009bb0 <_dtoa_r+0x2d0>)
 8009912:	21ea      	movs	r1, #234	; 0xea
 8009914:	48a7      	ldr	r0, [pc, #668]	; (8009bb4 <_dtoa_r+0x2d4>)
 8009916:	f001 fbc3 	bl	800b0a0 <__assert_func>
 800991a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800991e:	6005      	str	r5, [r0, #0]
 8009920:	60c5      	str	r5, [r0, #12]
 8009922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009924:	6819      	ldr	r1, [r3, #0]
 8009926:	b151      	cbz	r1, 800993e <_dtoa_r+0x5e>
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	604a      	str	r2, [r1, #4]
 800992c:	2301      	movs	r3, #1
 800992e:	4093      	lsls	r3, r2
 8009930:	608b      	str	r3, [r1, #8]
 8009932:	4620      	mov	r0, r4
 8009934:	f000 fe0e 	bl	800a554 <_Bfree>
 8009938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800993a:	2200      	movs	r2, #0
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	1e3b      	subs	r3, r7, #0
 8009940:	bfaa      	itet	ge
 8009942:	2300      	movge	r3, #0
 8009944:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009948:	f8c8 3000 	strge.w	r3, [r8]
 800994c:	4b9a      	ldr	r3, [pc, #616]	; (8009bb8 <_dtoa_r+0x2d8>)
 800994e:	bfbc      	itt	lt
 8009950:	2201      	movlt	r2, #1
 8009952:	f8c8 2000 	strlt.w	r2, [r8]
 8009956:	ea33 030b 	bics.w	r3, r3, fp
 800995a:	d11b      	bne.n	8009994 <_dtoa_r+0xb4>
 800995c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800995e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009968:	4333      	orrs	r3, r6
 800996a:	f000 8592 	beq.w	800a492 <_dtoa_r+0xbb2>
 800996e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009970:	b963      	cbnz	r3, 800998c <_dtoa_r+0xac>
 8009972:	4b92      	ldr	r3, [pc, #584]	; (8009bbc <_dtoa_r+0x2dc>)
 8009974:	e022      	b.n	80099bc <_dtoa_r+0xdc>
 8009976:	4b92      	ldr	r3, [pc, #584]	; (8009bc0 <_dtoa_r+0x2e0>)
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	3308      	adds	r3, #8
 800997c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	9801      	ldr	r0, [sp, #4]
 8009982:	b013      	add	sp, #76	; 0x4c
 8009984:	ecbd 8b04 	vpop	{d8-d9}
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	4b8b      	ldr	r3, [pc, #556]	; (8009bbc <_dtoa_r+0x2dc>)
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	3303      	adds	r3, #3
 8009992:	e7f3      	b.n	800997c <_dtoa_r+0x9c>
 8009994:	2200      	movs	r2, #0
 8009996:	2300      	movs	r3, #0
 8009998:	4650      	mov	r0, sl
 800999a:	4659      	mov	r1, fp
 800999c:	f7f7 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80099a0:	ec4b ab19 	vmov	d9, sl, fp
 80099a4:	4680      	mov	r8, r0
 80099a6:	b158      	cbz	r0, 80099c0 <_dtoa_r+0xe0>
 80099a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099aa:	2301      	movs	r3, #1
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 856b 	beq.w	800a48c <_dtoa_r+0xbac>
 80099b6:	4883      	ldr	r0, [pc, #524]	; (8009bc4 <_dtoa_r+0x2e4>)
 80099b8:	6018      	str	r0, [r3, #0]
 80099ba:	1e43      	subs	r3, r0, #1
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	e7df      	b.n	8009980 <_dtoa_r+0xa0>
 80099c0:	ec4b ab10 	vmov	d0, sl, fp
 80099c4:	aa10      	add	r2, sp, #64	; 0x40
 80099c6:	a911      	add	r1, sp, #68	; 0x44
 80099c8:	4620      	mov	r0, r4
 80099ca:	f001 f8ab 	bl	800ab24 <__d2b>
 80099ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80099d2:	ee08 0a10 	vmov	s16, r0
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	f000 8084 	beq.w	8009ae4 <_dtoa_r+0x204>
 80099dc:	ee19 3a90 	vmov	r3, s19
 80099e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80099e8:	4656      	mov	r6, sl
 80099ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80099ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80099f6:	4b74      	ldr	r3, [pc, #464]	; (8009bc8 <_dtoa_r+0x2e8>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f6 fc43 	bl	8000288 <__aeabi_dsub>
 8009a02:	a365      	add	r3, pc, #404	; (adr r3, 8009b98 <_dtoa_r+0x2b8>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f7f6 fdf6 	bl	80005f8 <__aeabi_dmul>
 8009a0c:	a364      	add	r3, pc, #400	; (adr r3, 8009ba0 <_dtoa_r+0x2c0>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f7f6 fc3b 	bl	800028c <__adddf3>
 8009a16:	4606      	mov	r6, r0
 8009a18:	4628      	mov	r0, r5
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	f7f6 fd82 	bl	8000524 <__aeabi_i2d>
 8009a20:	a361      	add	r3, pc, #388	; (adr r3, 8009ba8 <_dtoa_r+0x2c8>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f6 fc2b 	bl	800028c <__adddf3>
 8009a36:	4606      	mov	r6, r0
 8009a38:	460f      	mov	r7, r1
 8009a3a:	f7f7 f88d 	bl	8000b58 <__aeabi_d2iz>
 8009a3e:	2200      	movs	r2, #0
 8009a40:	9000      	str	r0, [sp, #0]
 8009a42:	2300      	movs	r3, #0
 8009a44:	4630      	mov	r0, r6
 8009a46:	4639      	mov	r1, r7
 8009a48:	f7f7 f848 	bl	8000adc <__aeabi_dcmplt>
 8009a4c:	b150      	cbz	r0, 8009a64 <_dtoa_r+0x184>
 8009a4e:	9800      	ldr	r0, [sp, #0]
 8009a50:	f7f6 fd68 	bl	8000524 <__aeabi_i2d>
 8009a54:	4632      	mov	r2, r6
 8009a56:	463b      	mov	r3, r7
 8009a58:	f7f7 f836 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a5c:	b910      	cbnz	r0, 8009a64 <_dtoa_r+0x184>
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	2b16      	cmp	r3, #22
 8009a68:	d85a      	bhi.n	8009b20 <_dtoa_r+0x240>
 8009a6a:	9a00      	ldr	r2, [sp, #0]
 8009a6c:	4b57      	ldr	r3, [pc, #348]	; (8009bcc <_dtoa_r+0x2ec>)
 8009a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	ec51 0b19 	vmov	r0, r1, d9
 8009a7a:	f7f7 f82f 	bl	8000adc <__aeabi_dcmplt>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d050      	beq.n	8009b24 <_dtoa_r+0x244>
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a8e:	1b5d      	subs	r5, r3, r5
 8009a90:	1e6b      	subs	r3, r5, #1
 8009a92:	9305      	str	r3, [sp, #20]
 8009a94:	bf45      	ittet	mi
 8009a96:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a9a:	9304      	strmi	r3, [sp, #16]
 8009a9c:	2300      	movpl	r3, #0
 8009a9e:	2300      	movmi	r3, #0
 8009aa0:	bf4c      	ite	mi
 8009aa2:	9305      	strmi	r3, [sp, #20]
 8009aa4:	9304      	strpl	r3, [sp, #16]
 8009aa6:	9b00      	ldr	r3, [sp, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	db3d      	blt.n	8009b28 <_dtoa_r+0x248>
 8009aac:	9b05      	ldr	r3, [sp, #20]
 8009aae:	9a00      	ldr	r2, [sp, #0]
 8009ab0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ab2:	4413      	add	r3, r2
 8009ab4:	9305      	str	r3, [sp, #20]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9307      	str	r3, [sp, #28]
 8009aba:	9b06      	ldr	r3, [sp, #24]
 8009abc:	2b09      	cmp	r3, #9
 8009abe:	f200 8089 	bhi.w	8009bd4 <_dtoa_r+0x2f4>
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	bfc4      	itt	gt
 8009ac6:	3b04      	subgt	r3, #4
 8009ac8:	9306      	strgt	r3, [sp, #24]
 8009aca:	9b06      	ldr	r3, [sp, #24]
 8009acc:	f1a3 0302 	sub.w	r3, r3, #2
 8009ad0:	bfcc      	ite	gt
 8009ad2:	2500      	movgt	r5, #0
 8009ad4:	2501      	movle	r5, #1
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	f200 8087 	bhi.w	8009bea <_dtoa_r+0x30a>
 8009adc:	e8df f003 	tbb	[pc, r3]
 8009ae0:	59383a2d 	.word	0x59383a2d
 8009ae4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009ae8:	441d      	add	r5, r3
 8009aea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009aee:	2b20      	cmp	r3, #32
 8009af0:	bfc1      	itttt	gt
 8009af2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009af6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009afa:	fa0b f303 	lslgt.w	r3, fp, r3
 8009afe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b02:	bfda      	itte	le
 8009b04:	f1c3 0320 	rsble	r3, r3, #32
 8009b08:	fa06 f003 	lslle.w	r0, r6, r3
 8009b0c:	4318      	orrgt	r0, r3
 8009b0e:	f7f6 fcf9 	bl	8000504 <__aeabi_ui2d>
 8009b12:	2301      	movs	r3, #1
 8009b14:	4606      	mov	r6, r0
 8009b16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b1a:	3d01      	subs	r5, #1
 8009b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b1e:	e76a      	b.n	80099f6 <_dtoa_r+0x116>
 8009b20:	2301      	movs	r3, #1
 8009b22:	e7b2      	b.n	8009a8a <_dtoa_r+0x1aa>
 8009b24:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b26:	e7b1      	b.n	8009a8c <_dtoa_r+0x1ac>
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	9a00      	ldr	r2, [sp, #0]
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	4253      	negs	r3, r2
 8009b32:	9307      	str	r3, [sp, #28]
 8009b34:	2300      	movs	r3, #0
 8009b36:	930a      	str	r3, [sp, #40]	; 0x28
 8009b38:	e7bf      	b.n	8009aba <_dtoa_r+0x1da>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9308      	str	r3, [sp, #32]
 8009b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc55      	bgt.n	8009bf0 <_dtoa_r+0x310>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b4e:	e00c      	b.n	8009b6a <_dtoa_r+0x28a>
 8009b50:	2301      	movs	r3, #1
 8009b52:	e7f3      	b.n	8009b3c <_dtoa_r+0x25c>
 8009b54:	2300      	movs	r3, #0
 8009b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b58:	9308      	str	r3, [sp, #32]
 8009b5a:	9b00      	ldr	r3, [sp, #0]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	3301      	adds	r3, #1
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	bfb8      	it	lt
 8009b68:	2301      	movlt	r3, #1
 8009b6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	6042      	str	r2, [r0, #4]
 8009b70:	2204      	movs	r2, #4
 8009b72:	f102 0614 	add.w	r6, r2, #20
 8009b76:	429e      	cmp	r6, r3
 8009b78:	6841      	ldr	r1, [r0, #4]
 8009b7a:	d93d      	bls.n	8009bf8 <_dtoa_r+0x318>
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fca9 	bl	800a4d4 <_Balloc>
 8009b82:	9001      	str	r0, [sp, #4]
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d13b      	bne.n	8009c00 <_dtoa_r+0x320>
 8009b88:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <_dtoa_r+0x2f0>)
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b90:	e6c0      	b.n	8009914 <_dtoa_r+0x34>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e7df      	b.n	8009b56 <_dtoa_r+0x276>
 8009b96:	bf00      	nop
 8009b98:	636f4361 	.word	0x636f4361
 8009b9c:	3fd287a7 	.word	0x3fd287a7
 8009ba0:	8b60c8b3 	.word	0x8b60c8b3
 8009ba4:	3fc68a28 	.word	0x3fc68a28
 8009ba8:	509f79fb 	.word	0x509f79fb
 8009bac:	3fd34413 	.word	0x3fd34413
 8009bb0:	0800bd25 	.word	0x0800bd25
 8009bb4:	0800bd3c 	.word	0x0800bd3c
 8009bb8:	7ff00000 	.word	0x7ff00000
 8009bbc:	0800bd21 	.word	0x0800bd21
 8009bc0:	0800bd18 	.word	0x0800bd18
 8009bc4:	0800bcf5 	.word	0x0800bcf5
 8009bc8:	3ff80000 	.word	0x3ff80000
 8009bcc:	0800be30 	.word	0x0800be30
 8009bd0:	0800bd97 	.word	0x0800bd97
 8009bd4:	2501      	movs	r5, #1
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9306      	str	r3, [sp, #24]
 8009bda:	9508      	str	r5, [sp, #32]
 8009bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009be0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	2312      	movs	r3, #18
 8009be8:	e7b0      	b.n	8009b4c <_dtoa_r+0x26c>
 8009bea:	2301      	movs	r3, #1
 8009bec:	9308      	str	r3, [sp, #32]
 8009bee:	e7f5      	b.n	8009bdc <_dtoa_r+0x2fc>
 8009bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bf6:	e7b8      	b.n	8009b6a <_dtoa_r+0x28a>
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	6041      	str	r1, [r0, #4]
 8009bfc:	0052      	lsls	r2, r2, #1
 8009bfe:	e7b8      	b.n	8009b72 <_dtoa_r+0x292>
 8009c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c02:	9a01      	ldr	r2, [sp, #4]
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	2b0e      	cmp	r3, #14
 8009c0a:	f200 809d 	bhi.w	8009d48 <_dtoa_r+0x468>
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	f000 809a 	beq.w	8009d48 <_dtoa_r+0x468>
 8009c14:	9b00      	ldr	r3, [sp, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dd32      	ble.n	8009c80 <_dtoa_r+0x3a0>
 8009c1a:	4ab7      	ldr	r2, [pc, #732]	; (8009ef8 <_dtoa_r+0x618>)
 8009c1c:	f003 030f 	and.w	r3, r3, #15
 8009c20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c28:	9b00      	ldr	r3, [sp, #0]
 8009c2a:	05d8      	lsls	r0, r3, #23
 8009c2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009c30:	d516      	bpl.n	8009c60 <_dtoa_r+0x380>
 8009c32:	4bb2      	ldr	r3, [pc, #712]	; (8009efc <_dtoa_r+0x61c>)
 8009c34:	ec51 0b19 	vmov	r0, r1, d9
 8009c38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c3c:	f7f6 fe06 	bl	800084c <__aeabi_ddiv>
 8009c40:	f007 070f 	and.w	r7, r7, #15
 8009c44:	4682      	mov	sl, r0
 8009c46:	468b      	mov	fp, r1
 8009c48:	2503      	movs	r5, #3
 8009c4a:	4eac      	ldr	r6, [pc, #688]	; (8009efc <_dtoa_r+0x61c>)
 8009c4c:	b957      	cbnz	r7, 8009c64 <_dtoa_r+0x384>
 8009c4e:	4642      	mov	r2, r8
 8009c50:	464b      	mov	r3, r9
 8009c52:	4650      	mov	r0, sl
 8009c54:	4659      	mov	r1, fp
 8009c56:	f7f6 fdf9 	bl	800084c <__aeabi_ddiv>
 8009c5a:	4682      	mov	sl, r0
 8009c5c:	468b      	mov	fp, r1
 8009c5e:	e028      	b.n	8009cb2 <_dtoa_r+0x3d2>
 8009c60:	2502      	movs	r5, #2
 8009c62:	e7f2      	b.n	8009c4a <_dtoa_r+0x36a>
 8009c64:	07f9      	lsls	r1, r7, #31
 8009c66:	d508      	bpl.n	8009c7a <_dtoa_r+0x39a>
 8009c68:	4640      	mov	r0, r8
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c70:	f7f6 fcc2 	bl	80005f8 <__aeabi_dmul>
 8009c74:	3501      	adds	r5, #1
 8009c76:	4680      	mov	r8, r0
 8009c78:	4689      	mov	r9, r1
 8009c7a:	107f      	asrs	r7, r7, #1
 8009c7c:	3608      	adds	r6, #8
 8009c7e:	e7e5      	b.n	8009c4c <_dtoa_r+0x36c>
 8009c80:	f000 809b 	beq.w	8009dba <_dtoa_r+0x4da>
 8009c84:	9b00      	ldr	r3, [sp, #0]
 8009c86:	4f9d      	ldr	r7, [pc, #628]	; (8009efc <_dtoa_r+0x61c>)
 8009c88:	425e      	negs	r6, r3
 8009c8a:	4b9b      	ldr	r3, [pc, #620]	; (8009ef8 <_dtoa_r+0x618>)
 8009c8c:	f006 020f 	and.w	r2, r6, #15
 8009c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	ec51 0b19 	vmov	r0, r1, d9
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	1136      	asrs	r6, r6, #4
 8009ca2:	4682      	mov	sl, r0
 8009ca4:	468b      	mov	fp, r1
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	2502      	movs	r5, #2
 8009caa:	2e00      	cmp	r6, #0
 8009cac:	d17a      	bne.n	8009da4 <_dtoa_r+0x4c4>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1d3      	bne.n	8009c5a <_dtoa_r+0x37a>
 8009cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8082 	beq.w	8009dbe <_dtoa_r+0x4de>
 8009cba:	4b91      	ldr	r3, [pc, #580]	; (8009f00 <_dtoa_r+0x620>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	4659      	mov	r1, fp
 8009cc2:	f7f6 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d079      	beq.n	8009dbe <_dtoa_r+0x4de>
 8009cca:	9b03      	ldr	r3, [sp, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d076      	beq.n	8009dbe <_dtoa_r+0x4de>
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dd36      	ble.n	8009d44 <_dtoa_r+0x464>
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	4650      	mov	r0, sl
 8009cda:	4659      	mov	r1, fp
 8009cdc:	1e5f      	subs	r7, r3, #1
 8009cde:	2200      	movs	r2, #0
 8009ce0:	4b88      	ldr	r3, [pc, #544]	; (8009f04 <_dtoa_r+0x624>)
 8009ce2:	f7f6 fc89 	bl	80005f8 <__aeabi_dmul>
 8009ce6:	9e02      	ldr	r6, [sp, #8]
 8009ce8:	4682      	mov	sl, r0
 8009cea:	468b      	mov	fp, r1
 8009cec:	3501      	adds	r5, #1
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f7f6 fc18 	bl	8000524 <__aeabi_i2d>
 8009cf4:	4652      	mov	r2, sl
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	f7f6 fc7e 	bl	80005f8 <__aeabi_dmul>
 8009cfc:	4b82      	ldr	r3, [pc, #520]	; (8009f08 <_dtoa_r+0x628>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f7f6 fac4 	bl	800028c <__adddf3>
 8009d04:	46d0      	mov	r8, sl
 8009d06:	46d9      	mov	r9, fp
 8009d08:	4682      	mov	sl, r0
 8009d0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	d158      	bne.n	8009dc4 <_dtoa_r+0x4e4>
 8009d12:	4b7e      	ldr	r3, [pc, #504]	; (8009f0c <_dtoa_r+0x62c>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	4640      	mov	r0, r8
 8009d18:	4649      	mov	r1, r9
 8009d1a:	f7f6 fab5 	bl	8000288 <__aeabi_dsub>
 8009d1e:	4652      	mov	r2, sl
 8009d20:	465b      	mov	r3, fp
 8009d22:	4680      	mov	r8, r0
 8009d24:	4689      	mov	r9, r1
 8009d26:	f7f6 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f040 8295 	bne.w	800a25a <_dtoa_r+0x97a>
 8009d30:	4652      	mov	r2, sl
 8009d32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d36:	4640      	mov	r0, r8
 8009d38:	4649      	mov	r1, r9
 8009d3a:	f7f6 fecf 	bl	8000adc <__aeabi_dcmplt>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f040 8289 	bne.w	800a256 <_dtoa_r+0x976>
 8009d44:	ec5b ab19 	vmov	sl, fp, d9
 8009d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f2c0 8148 	blt.w	8009fe0 <_dtoa_r+0x700>
 8009d50:	9a00      	ldr	r2, [sp, #0]
 8009d52:	2a0e      	cmp	r2, #14
 8009d54:	f300 8144 	bgt.w	8009fe0 <_dtoa_r+0x700>
 8009d58:	4b67      	ldr	r3, [pc, #412]	; (8009ef8 <_dtoa_r+0x618>)
 8009d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f280 80d5 	bge.w	8009f14 <_dtoa_r+0x634>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f300 80d1 	bgt.w	8009f14 <_dtoa_r+0x634>
 8009d72:	f040 826f 	bne.w	800a254 <_dtoa_r+0x974>
 8009d76:	4b65      	ldr	r3, [pc, #404]	; (8009f0c <_dtoa_r+0x62c>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	f7f6 fc3b 	bl	80005f8 <__aeabi_dmul>
 8009d82:	4652      	mov	r2, sl
 8009d84:	465b      	mov	r3, fp
 8009d86:	f7f6 febd 	bl	8000b04 <__aeabi_dcmpge>
 8009d8a:	9e03      	ldr	r6, [sp, #12]
 8009d8c:	4637      	mov	r7, r6
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f040 8245 	bne.w	800a21e <_dtoa_r+0x93e>
 8009d94:	9d01      	ldr	r5, [sp, #4]
 8009d96:	2331      	movs	r3, #49	; 0x31
 8009d98:	f805 3b01 	strb.w	r3, [r5], #1
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	e240      	b.n	800a226 <_dtoa_r+0x946>
 8009da4:	07f2      	lsls	r2, r6, #31
 8009da6:	d505      	bpl.n	8009db4 <_dtoa_r+0x4d4>
 8009da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	3501      	adds	r5, #1
 8009db2:	2301      	movs	r3, #1
 8009db4:	1076      	asrs	r6, r6, #1
 8009db6:	3708      	adds	r7, #8
 8009db8:	e777      	b.n	8009caa <_dtoa_r+0x3ca>
 8009dba:	2502      	movs	r5, #2
 8009dbc:	e779      	b.n	8009cb2 <_dtoa_r+0x3d2>
 8009dbe:	9f00      	ldr	r7, [sp, #0]
 8009dc0:	9e03      	ldr	r6, [sp, #12]
 8009dc2:	e794      	b.n	8009cee <_dtoa_r+0x40e>
 8009dc4:	9901      	ldr	r1, [sp, #4]
 8009dc6:	4b4c      	ldr	r3, [pc, #304]	; (8009ef8 <_dtoa_r+0x618>)
 8009dc8:	4431      	add	r1, r6
 8009dca:	910d      	str	r1, [sp, #52]	; 0x34
 8009dcc:	9908      	ldr	r1, [sp, #32]
 8009dce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009dd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009dd6:	2900      	cmp	r1, #0
 8009dd8:	d043      	beq.n	8009e62 <_dtoa_r+0x582>
 8009dda:	494d      	ldr	r1, [pc, #308]	; (8009f10 <_dtoa_r+0x630>)
 8009ddc:	2000      	movs	r0, #0
 8009dde:	f7f6 fd35 	bl	800084c <__aeabi_ddiv>
 8009de2:	4652      	mov	r2, sl
 8009de4:	465b      	mov	r3, fp
 8009de6:	f7f6 fa4f 	bl	8000288 <__aeabi_dsub>
 8009dea:	9d01      	ldr	r5, [sp, #4]
 8009dec:	4682      	mov	sl, r0
 8009dee:	468b      	mov	fp, r1
 8009df0:	4649      	mov	r1, r9
 8009df2:	4640      	mov	r0, r8
 8009df4:	f7f6 feb0 	bl	8000b58 <__aeabi_d2iz>
 8009df8:	4606      	mov	r6, r0
 8009dfa:	f7f6 fb93 	bl	8000524 <__aeabi_i2d>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 fa3f 	bl	8000288 <__aeabi_dsub>
 8009e0a:	3630      	adds	r6, #48	; 0x30
 8009e0c:	f805 6b01 	strb.w	r6, [r5], #1
 8009e10:	4652      	mov	r2, sl
 8009e12:	465b      	mov	r3, fp
 8009e14:	4680      	mov	r8, r0
 8009e16:	4689      	mov	r9, r1
 8009e18:	f7f6 fe60 	bl	8000adc <__aeabi_dcmplt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d163      	bne.n	8009ee8 <_dtoa_r+0x608>
 8009e20:	4642      	mov	r2, r8
 8009e22:	464b      	mov	r3, r9
 8009e24:	4936      	ldr	r1, [pc, #216]	; (8009f00 <_dtoa_r+0x620>)
 8009e26:	2000      	movs	r0, #0
 8009e28:	f7f6 fa2e 	bl	8000288 <__aeabi_dsub>
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	465b      	mov	r3, fp
 8009e30:	f7f6 fe54 	bl	8000adc <__aeabi_dcmplt>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f040 80b5 	bne.w	8009fa4 <_dtoa_r+0x6c4>
 8009e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e3c:	429d      	cmp	r5, r3
 8009e3e:	d081      	beq.n	8009d44 <_dtoa_r+0x464>
 8009e40:	4b30      	ldr	r3, [pc, #192]	; (8009f04 <_dtoa_r+0x624>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	4650      	mov	r0, sl
 8009e46:	4659      	mov	r1, fp
 8009e48:	f7f6 fbd6 	bl	80005f8 <__aeabi_dmul>
 8009e4c:	4b2d      	ldr	r3, [pc, #180]	; (8009f04 <_dtoa_r+0x624>)
 8009e4e:	4682      	mov	sl, r0
 8009e50:	468b      	mov	fp, r1
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	2200      	movs	r2, #0
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	4689      	mov	r9, r1
 8009e60:	e7c6      	b.n	8009df0 <_dtoa_r+0x510>
 8009e62:	4650      	mov	r0, sl
 8009e64:	4659      	mov	r1, fp
 8009e66:	f7f6 fbc7 	bl	80005f8 <__aeabi_dmul>
 8009e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e6c:	9d01      	ldr	r5, [sp, #4]
 8009e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e70:	4682      	mov	sl, r0
 8009e72:	468b      	mov	fp, r1
 8009e74:	4649      	mov	r1, r9
 8009e76:	4640      	mov	r0, r8
 8009e78:	f7f6 fe6e 	bl	8000b58 <__aeabi_d2iz>
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	f7f6 fb51 	bl	8000524 <__aeabi_i2d>
 8009e82:	3630      	adds	r6, #48	; 0x30
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4640      	mov	r0, r8
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	f7f6 f9fc 	bl	8000288 <__aeabi_dsub>
 8009e90:	f805 6b01 	strb.w	r6, [r5], #1
 8009e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e96:	429d      	cmp	r5, r3
 8009e98:	4680      	mov	r8, r0
 8009e9a:	4689      	mov	r9, r1
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	d124      	bne.n	8009eec <_dtoa_r+0x60c>
 8009ea2:	4b1b      	ldr	r3, [pc, #108]	; (8009f10 <_dtoa_r+0x630>)
 8009ea4:	4650      	mov	r0, sl
 8009ea6:	4659      	mov	r1, fp
 8009ea8:	f7f6 f9f0 	bl	800028c <__adddf3>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	f7f6 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d173      	bne.n	8009fa4 <_dtoa_r+0x6c4>
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	465b      	mov	r3, fp
 8009ec0:	4913      	ldr	r1, [pc, #76]	; (8009f10 <_dtoa_r+0x630>)
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	f7f6 f9e0 	bl	8000288 <__aeabi_dsub>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 fe04 	bl	8000adc <__aeabi_dcmplt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f43f af35 	beq.w	8009d44 <_dtoa_r+0x464>
 8009eda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009edc:	1e6b      	subs	r3, r5, #1
 8009ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ee0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ee4:	2b30      	cmp	r3, #48	; 0x30
 8009ee6:	d0f8      	beq.n	8009eda <_dtoa_r+0x5fa>
 8009ee8:	9700      	str	r7, [sp, #0]
 8009eea:	e049      	b.n	8009f80 <_dtoa_r+0x6a0>
 8009eec:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <_dtoa_r+0x624>)
 8009eee:	f7f6 fb83 	bl	80005f8 <__aeabi_dmul>
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	4689      	mov	r9, r1
 8009ef6:	e7bd      	b.n	8009e74 <_dtoa_r+0x594>
 8009ef8:	0800be30 	.word	0x0800be30
 8009efc:	0800be08 	.word	0x0800be08
 8009f00:	3ff00000 	.word	0x3ff00000
 8009f04:	40240000 	.word	0x40240000
 8009f08:	401c0000 	.word	0x401c0000
 8009f0c:	40140000 	.word	0x40140000
 8009f10:	3fe00000 	.word	0x3fe00000
 8009f14:	9d01      	ldr	r5, [sp, #4]
 8009f16:	4656      	mov	r6, sl
 8009f18:	465f      	mov	r7, fp
 8009f1a:	4642      	mov	r2, r8
 8009f1c:	464b      	mov	r3, r9
 8009f1e:	4630      	mov	r0, r6
 8009f20:	4639      	mov	r1, r7
 8009f22:	f7f6 fc93 	bl	800084c <__aeabi_ddiv>
 8009f26:	f7f6 fe17 	bl	8000b58 <__aeabi_d2iz>
 8009f2a:	4682      	mov	sl, r0
 8009f2c:	f7f6 fafa 	bl	8000524 <__aeabi_i2d>
 8009f30:	4642      	mov	r2, r8
 8009f32:	464b      	mov	r3, r9
 8009f34:	f7f6 fb60 	bl	80005f8 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009f44:	f7f6 f9a0 	bl	8000288 <__aeabi_dsub>
 8009f48:	f805 6b01 	strb.w	r6, [r5], #1
 8009f4c:	9e01      	ldr	r6, [sp, #4]
 8009f4e:	9f03      	ldr	r7, [sp, #12]
 8009f50:	1bae      	subs	r6, r5, r6
 8009f52:	42b7      	cmp	r7, r6
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	d135      	bne.n	8009fc6 <_dtoa_r+0x6e6>
 8009f5a:	f7f6 f997 	bl	800028c <__adddf3>
 8009f5e:	4642      	mov	r2, r8
 8009f60:	464b      	mov	r3, r9
 8009f62:	4606      	mov	r6, r0
 8009f64:	460f      	mov	r7, r1
 8009f66:	f7f6 fdd7 	bl	8000b18 <__aeabi_dcmpgt>
 8009f6a:	b9d0      	cbnz	r0, 8009fa2 <_dtoa_r+0x6c2>
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	464b      	mov	r3, r9
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f78:	b110      	cbz	r0, 8009f80 <_dtoa_r+0x6a0>
 8009f7a:	f01a 0f01 	tst.w	sl, #1
 8009f7e:	d110      	bne.n	8009fa2 <_dtoa_r+0x6c2>
 8009f80:	4620      	mov	r0, r4
 8009f82:	ee18 1a10 	vmov	r1, s16
 8009f86:	f000 fae5 	bl	800a554 <_Bfree>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9800      	ldr	r0, [sp, #0]
 8009f8e:	702b      	strb	r3, [r5, #0]
 8009f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f92:	3001      	adds	r0, #1
 8009f94:	6018      	str	r0, [r3, #0]
 8009f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f43f acf1 	beq.w	8009980 <_dtoa_r+0xa0>
 8009f9e:	601d      	str	r5, [r3, #0]
 8009fa0:	e4ee      	b.n	8009980 <_dtoa_r+0xa0>
 8009fa2:	9f00      	ldr	r7, [sp, #0]
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	461d      	mov	r5, r3
 8009fa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fac:	2a39      	cmp	r2, #57	; 0x39
 8009fae:	d106      	bne.n	8009fbe <_dtoa_r+0x6de>
 8009fb0:	9a01      	ldr	r2, [sp, #4]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d1f7      	bne.n	8009fa6 <_dtoa_r+0x6c6>
 8009fb6:	9901      	ldr	r1, [sp, #4]
 8009fb8:	2230      	movs	r2, #48	; 0x30
 8009fba:	3701      	adds	r7, #1
 8009fbc:	700a      	strb	r2, [r1, #0]
 8009fbe:	781a      	ldrb	r2, [r3, #0]
 8009fc0:	3201      	adds	r2, #1
 8009fc2:	701a      	strb	r2, [r3, #0]
 8009fc4:	e790      	b.n	8009ee8 <_dtoa_r+0x608>
 8009fc6:	4ba6      	ldr	r3, [pc, #664]	; (800a260 <_dtoa_r+0x980>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460f      	mov	r7, r1
 8009fd6:	f7f6 fd77 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d09d      	beq.n	8009f1a <_dtoa_r+0x63a>
 8009fde:	e7cf      	b.n	8009f80 <_dtoa_r+0x6a0>
 8009fe0:	9a08      	ldr	r2, [sp, #32]
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	f000 80d7 	beq.w	800a196 <_dtoa_r+0x8b6>
 8009fe8:	9a06      	ldr	r2, [sp, #24]
 8009fea:	2a01      	cmp	r2, #1
 8009fec:	f300 80ba 	bgt.w	800a164 <_dtoa_r+0x884>
 8009ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	f000 80b2 	beq.w	800a15c <_dtoa_r+0x87c>
 8009ff8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ffc:	9e07      	ldr	r6, [sp, #28]
 8009ffe:	9d04      	ldr	r5, [sp, #16]
 800a000:	9a04      	ldr	r2, [sp, #16]
 800a002:	441a      	add	r2, r3
 800a004:	9204      	str	r2, [sp, #16]
 800a006:	9a05      	ldr	r2, [sp, #20]
 800a008:	2101      	movs	r1, #1
 800a00a:	441a      	add	r2, r3
 800a00c:	4620      	mov	r0, r4
 800a00e:	9205      	str	r2, [sp, #20]
 800a010:	f000 fb58 	bl	800a6c4 <__i2b>
 800a014:	4607      	mov	r7, r0
 800a016:	2d00      	cmp	r5, #0
 800a018:	dd0c      	ble.n	800a034 <_dtoa_r+0x754>
 800a01a:	9b05      	ldr	r3, [sp, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	dd09      	ble.n	800a034 <_dtoa_r+0x754>
 800a020:	42ab      	cmp	r3, r5
 800a022:	9a04      	ldr	r2, [sp, #16]
 800a024:	bfa8      	it	ge
 800a026:	462b      	movge	r3, r5
 800a028:	1ad2      	subs	r2, r2, r3
 800a02a:	9204      	str	r2, [sp, #16]
 800a02c:	9a05      	ldr	r2, [sp, #20]
 800a02e:	1aed      	subs	r5, r5, r3
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	9305      	str	r3, [sp, #20]
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	b31b      	cbz	r3, 800a080 <_dtoa_r+0x7a0>
 800a038:	9b08      	ldr	r3, [sp, #32]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 80af 	beq.w	800a19e <_dtoa_r+0x8be>
 800a040:	2e00      	cmp	r6, #0
 800a042:	dd13      	ble.n	800a06c <_dtoa_r+0x78c>
 800a044:	4639      	mov	r1, r7
 800a046:	4632      	mov	r2, r6
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fbfb 	bl	800a844 <__pow5mult>
 800a04e:	ee18 2a10 	vmov	r2, s16
 800a052:	4601      	mov	r1, r0
 800a054:	4607      	mov	r7, r0
 800a056:	4620      	mov	r0, r4
 800a058:	f000 fb4a 	bl	800a6f0 <__multiply>
 800a05c:	ee18 1a10 	vmov	r1, s16
 800a060:	4680      	mov	r8, r0
 800a062:	4620      	mov	r0, r4
 800a064:	f000 fa76 	bl	800a554 <_Bfree>
 800a068:	ee08 8a10 	vmov	s16, r8
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	1b9a      	subs	r2, r3, r6
 800a070:	d006      	beq.n	800a080 <_dtoa_r+0x7a0>
 800a072:	ee18 1a10 	vmov	r1, s16
 800a076:	4620      	mov	r0, r4
 800a078:	f000 fbe4 	bl	800a844 <__pow5mult>
 800a07c:	ee08 0a10 	vmov	s16, r0
 800a080:	2101      	movs	r1, #1
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fb1e 	bl	800a6c4 <__i2b>
 800a088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	4606      	mov	r6, r0
 800a08e:	f340 8088 	ble.w	800a1a2 <_dtoa_r+0x8c2>
 800a092:	461a      	mov	r2, r3
 800a094:	4601      	mov	r1, r0
 800a096:	4620      	mov	r0, r4
 800a098:	f000 fbd4 	bl	800a844 <__pow5mult>
 800a09c:	9b06      	ldr	r3, [sp, #24]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	f340 8081 	ble.w	800a1a8 <_dtoa_r+0x8c8>
 800a0a6:	f04f 0800 	mov.w	r8, #0
 800a0aa:	6933      	ldr	r3, [r6, #16]
 800a0ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f000 fab7 	bl	800a624 <__hi0bits>
 800a0b6:	f1c0 0020 	rsb	r0, r0, #32
 800a0ba:	9b05      	ldr	r3, [sp, #20]
 800a0bc:	4418      	add	r0, r3
 800a0be:	f010 001f 	ands.w	r0, r0, #31
 800a0c2:	f000 8092 	beq.w	800a1ea <_dtoa_r+0x90a>
 800a0c6:	f1c0 0320 	rsb	r3, r0, #32
 800a0ca:	2b04      	cmp	r3, #4
 800a0cc:	f340 808a 	ble.w	800a1e4 <_dtoa_r+0x904>
 800a0d0:	f1c0 001c 	rsb	r0, r0, #28
 800a0d4:	9b04      	ldr	r3, [sp, #16]
 800a0d6:	4403      	add	r3, r0
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	9b05      	ldr	r3, [sp, #20]
 800a0dc:	4403      	add	r3, r0
 800a0de:	4405      	add	r5, r0
 800a0e0:	9305      	str	r3, [sp, #20]
 800a0e2:	9b04      	ldr	r3, [sp, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd07      	ble.n	800a0f8 <_dtoa_r+0x818>
 800a0e8:	ee18 1a10 	vmov	r1, s16
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 fc02 	bl	800a8f8 <__lshift>
 800a0f4:	ee08 0a10 	vmov	s16, r0
 800a0f8:	9b05      	ldr	r3, [sp, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	dd05      	ble.n	800a10a <_dtoa_r+0x82a>
 800a0fe:	4631      	mov	r1, r6
 800a100:	461a      	mov	r2, r3
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fbf8 	bl	800a8f8 <__lshift>
 800a108:	4606      	mov	r6, r0
 800a10a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d06e      	beq.n	800a1ee <_dtoa_r+0x90e>
 800a110:	ee18 0a10 	vmov	r0, s16
 800a114:	4631      	mov	r1, r6
 800a116:	f000 fc5f 	bl	800a9d8 <__mcmp>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	da67      	bge.n	800a1ee <_dtoa_r+0x90e>
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	3b01      	subs	r3, #1
 800a122:	ee18 1a10 	vmov	r1, s16
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	220a      	movs	r2, #10
 800a12a:	2300      	movs	r3, #0
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 fa33 	bl	800a598 <__multadd>
 800a132:	9b08      	ldr	r3, [sp, #32]
 800a134:	ee08 0a10 	vmov	s16, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 81b1 	beq.w	800a4a0 <_dtoa_r+0xbc0>
 800a13e:	2300      	movs	r3, #0
 800a140:	4639      	mov	r1, r7
 800a142:	220a      	movs	r2, #10
 800a144:	4620      	mov	r0, r4
 800a146:	f000 fa27 	bl	800a598 <__multadd>
 800a14a:	9b02      	ldr	r3, [sp, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	4607      	mov	r7, r0
 800a150:	f300 808e 	bgt.w	800a270 <_dtoa_r+0x990>
 800a154:	9b06      	ldr	r3, [sp, #24]
 800a156:	2b02      	cmp	r3, #2
 800a158:	dc51      	bgt.n	800a1fe <_dtoa_r+0x91e>
 800a15a:	e089      	b.n	800a270 <_dtoa_r+0x990>
 800a15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a15e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a162:	e74b      	b.n	8009ffc <_dtoa_r+0x71c>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	1e5e      	subs	r6, r3, #1
 800a168:	9b07      	ldr	r3, [sp, #28]
 800a16a:	42b3      	cmp	r3, r6
 800a16c:	bfbf      	itttt	lt
 800a16e:	9b07      	ldrlt	r3, [sp, #28]
 800a170:	9607      	strlt	r6, [sp, #28]
 800a172:	1af2      	sublt	r2, r6, r3
 800a174:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a176:	bfb6      	itet	lt
 800a178:	189b      	addlt	r3, r3, r2
 800a17a:	1b9e      	subge	r6, r3, r6
 800a17c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	bfb8      	it	lt
 800a182:	2600      	movlt	r6, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfb7      	itett	lt
 800a188:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a18c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a190:	1a9d      	sublt	r5, r3, r2
 800a192:	2300      	movlt	r3, #0
 800a194:	e734      	b.n	800a000 <_dtoa_r+0x720>
 800a196:	9e07      	ldr	r6, [sp, #28]
 800a198:	9d04      	ldr	r5, [sp, #16]
 800a19a:	9f08      	ldr	r7, [sp, #32]
 800a19c:	e73b      	b.n	800a016 <_dtoa_r+0x736>
 800a19e:	9a07      	ldr	r2, [sp, #28]
 800a1a0:	e767      	b.n	800a072 <_dtoa_r+0x792>
 800a1a2:	9b06      	ldr	r3, [sp, #24]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	dc18      	bgt.n	800a1da <_dtoa_r+0x8fa>
 800a1a8:	f1ba 0f00 	cmp.w	sl, #0
 800a1ac:	d115      	bne.n	800a1da <_dtoa_r+0x8fa>
 800a1ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1b2:	b993      	cbnz	r3, 800a1da <_dtoa_r+0x8fa>
 800a1b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1b8:	0d1b      	lsrs	r3, r3, #20
 800a1ba:	051b      	lsls	r3, r3, #20
 800a1bc:	b183      	cbz	r3, 800a1e0 <_dtoa_r+0x900>
 800a1be:	9b04      	ldr	r3, [sp, #16]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	9304      	str	r3, [sp, #16]
 800a1c4:	9b05      	ldr	r3, [sp, #20]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	9305      	str	r3, [sp, #20]
 800a1ca:	f04f 0801 	mov.w	r8, #1
 800a1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f47f af6a 	bne.w	800a0aa <_dtoa_r+0x7ca>
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	e76f      	b.n	800a0ba <_dtoa_r+0x7da>
 800a1da:	f04f 0800 	mov.w	r8, #0
 800a1de:	e7f6      	b.n	800a1ce <_dtoa_r+0x8ee>
 800a1e0:	4698      	mov	r8, r3
 800a1e2:	e7f4      	b.n	800a1ce <_dtoa_r+0x8ee>
 800a1e4:	f43f af7d 	beq.w	800a0e2 <_dtoa_r+0x802>
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	301c      	adds	r0, #28
 800a1ec:	e772      	b.n	800a0d4 <_dtoa_r+0x7f4>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dc37      	bgt.n	800a264 <_dtoa_r+0x984>
 800a1f4:	9b06      	ldr	r3, [sp, #24]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	dd34      	ble.n	800a264 <_dtoa_r+0x984>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	9302      	str	r3, [sp, #8]
 800a1fe:	9b02      	ldr	r3, [sp, #8]
 800a200:	b96b      	cbnz	r3, 800a21e <_dtoa_r+0x93e>
 800a202:	4631      	mov	r1, r6
 800a204:	2205      	movs	r2, #5
 800a206:	4620      	mov	r0, r4
 800a208:	f000 f9c6 	bl	800a598 <__multadd>
 800a20c:	4601      	mov	r1, r0
 800a20e:	4606      	mov	r6, r0
 800a210:	ee18 0a10 	vmov	r0, s16
 800a214:	f000 fbe0 	bl	800a9d8 <__mcmp>
 800a218:	2800      	cmp	r0, #0
 800a21a:	f73f adbb 	bgt.w	8009d94 <_dtoa_r+0x4b4>
 800a21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a220:	9d01      	ldr	r5, [sp, #4]
 800a222:	43db      	mvns	r3, r3
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	f04f 0800 	mov.w	r8, #0
 800a22a:	4631      	mov	r1, r6
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 f991 	bl	800a554 <_Bfree>
 800a232:	2f00      	cmp	r7, #0
 800a234:	f43f aea4 	beq.w	8009f80 <_dtoa_r+0x6a0>
 800a238:	f1b8 0f00 	cmp.w	r8, #0
 800a23c:	d005      	beq.n	800a24a <_dtoa_r+0x96a>
 800a23e:	45b8      	cmp	r8, r7
 800a240:	d003      	beq.n	800a24a <_dtoa_r+0x96a>
 800a242:	4641      	mov	r1, r8
 800a244:	4620      	mov	r0, r4
 800a246:	f000 f985 	bl	800a554 <_Bfree>
 800a24a:	4639      	mov	r1, r7
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 f981 	bl	800a554 <_Bfree>
 800a252:	e695      	b.n	8009f80 <_dtoa_r+0x6a0>
 800a254:	2600      	movs	r6, #0
 800a256:	4637      	mov	r7, r6
 800a258:	e7e1      	b.n	800a21e <_dtoa_r+0x93e>
 800a25a:	9700      	str	r7, [sp, #0]
 800a25c:	4637      	mov	r7, r6
 800a25e:	e599      	b.n	8009d94 <_dtoa_r+0x4b4>
 800a260:	40240000 	.word	0x40240000
 800a264:	9b08      	ldr	r3, [sp, #32]
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 80ca 	beq.w	800a400 <_dtoa_r+0xb20>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	9302      	str	r3, [sp, #8]
 800a270:	2d00      	cmp	r5, #0
 800a272:	dd05      	ble.n	800a280 <_dtoa_r+0x9a0>
 800a274:	4639      	mov	r1, r7
 800a276:	462a      	mov	r2, r5
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fb3d 	bl	800a8f8 <__lshift>
 800a27e:	4607      	mov	r7, r0
 800a280:	f1b8 0f00 	cmp.w	r8, #0
 800a284:	d05b      	beq.n	800a33e <_dtoa_r+0xa5e>
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 f923 	bl	800a4d4 <_Balloc>
 800a28e:	4605      	mov	r5, r0
 800a290:	b928      	cbnz	r0, 800a29e <_dtoa_r+0x9be>
 800a292:	4b87      	ldr	r3, [pc, #540]	; (800a4b0 <_dtoa_r+0xbd0>)
 800a294:	4602      	mov	r2, r0
 800a296:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a29a:	f7ff bb3b 	b.w	8009914 <_dtoa_r+0x34>
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	3202      	adds	r2, #2
 800a2a2:	0092      	lsls	r2, r2, #2
 800a2a4:	f107 010c 	add.w	r1, r7, #12
 800a2a8:	300c      	adds	r0, #12
 800a2aa:	f7fe fdcb 	bl	8008e44 <memcpy>
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 fb20 	bl	800a8f8 <__lshift>
 800a2b8:	9b01      	ldr	r3, [sp, #4]
 800a2ba:	f103 0901 	add.w	r9, r3, #1
 800a2be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	9305      	str	r3, [sp, #20]
 800a2c6:	f00a 0301 	and.w	r3, sl, #1
 800a2ca:	46b8      	mov	r8, r7
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	ee18 0a10 	vmov	r0, s16
 800a2d6:	f7ff fa78 	bl	80097ca <quorem>
 800a2da:	4641      	mov	r1, r8
 800a2dc:	9002      	str	r0, [sp, #8]
 800a2de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a2e2:	ee18 0a10 	vmov	r0, s16
 800a2e6:	f000 fb77 	bl	800a9d8 <__mcmp>
 800a2ea:	463a      	mov	r2, r7
 800a2ec:	9003      	str	r0, [sp, #12]
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 fb8d 	bl	800aa10 <__mdiff>
 800a2f6:	68c2      	ldr	r2, [r0, #12]
 800a2f8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	bb02      	cbnz	r2, 800a342 <_dtoa_r+0xa62>
 800a300:	4601      	mov	r1, r0
 800a302:	ee18 0a10 	vmov	r0, s16
 800a306:	f000 fb67 	bl	800a9d8 <__mcmp>
 800a30a:	4602      	mov	r2, r0
 800a30c:	4629      	mov	r1, r5
 800a30e:	4620      	mov	r0, r4
 800a310:	9207      	str	r2, [sp, #28]
 800a312:	f000 f91f 	bl	800a554 <_Bfree>
 800a316:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a31a:	ea43 0102 	orr.w	r1, r3, r2
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	430b      	orrs	r3, r1
 800a322:	464d      	mov	r5, r9
 800a324:	d10f      	bne.n	800a346 <_dtoa_r+0xa66>
 800a326:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a32a:	d02a      	beq.n	800a382 <_dtoa_r+0xaa2>
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	dd02      	ble.n	800a338 <_dtoa_r+0xa58>
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a338:	f88b a000 	strb.w	sl, [fp]
 800a33c:	e775      	b.n	800a22a <_dtoa_r+0x94a>
 800a33e:	4638      	mov	r0, r7
 800a340:	e7ba      	b.n	800a2b8 <_dtoa_r+0x9d8>
 800a342:	2201      	movs	r2, #1
 800a344:	e7e2      	b.n	800a30c <_dtoa_r+0xa2c>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	db04      	blt.n	800a356 <_dtoa_r+0xa76>
 800a34c:	9906      	ldr	r1, [sp, #24]
 800a34e:	430b      	orrs	r3, r1
 800a350:	9904      	ldr	r1, [sp, #16]
 800a352:	430b      	orrs	r3, r1
 800a354:	d122      	bne.n	800a39c <_dtoa_r+0xabc>
 800a356:	2a00      	cmp	r2, #0
 800a358:	ddee      	ble.n	800a338 <_dtoa_r+0xa58>
 800a35a:	ee18 1a10 	vmov	r1, s16
 800a35e:	2201      	movs	r2, #1
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fac9 	bl	800a8f8 <__lshift>
 800a366:	4631      	mov	r1, r6
 800a368:	ee08 0a10 	vmov	s16, r0
 800a36c:	f000 fb34 	bl	800a9d8 <__mcmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	dc03      	bgt.n	800a37c <_dtoa_r+0xa9c>
 800a374:	d1e0      	bne.n	800a338 <_dtoa_r+0xa58>
 800a376:	f01a 0f01 	tst.w	sl, #1
 800a37a:	d0dd      	beq.n	800a338 <_dtoa_r+0xa58>
 800a37c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a380:	d1d7      	bne.n	800a332 <_dtoa_r+0xa52>
 800a382:	2339      	movs	r3, #57	; 0x39
 800a384:	f88b 3000 	strb.w	r3, [fp]
 800a388:	462b      	mov	r3, r5
 800a38a:	461d      	mov	r5, r3
 800a38c:	3b01      	subs	r3, #1
 800a38e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a392:	2a39      	cmp	r2, #57	; 0x39
 800a394:	d071      	beq.n	800a47a <_dtoa_r+0xb9a>
 800a396:	3201      	adds	r2, #1
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	e746      	b.n	800a22a <_dtoa_r+0x94a>
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	dd07      	ble.n	800a3b0 <_dtoa_r+0xad0>
 800a3a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3a4:	d0ed      	beq.n	800a382 <_dtoa_r+0xaa2>
 800a3a6:	f10a 0301 	add.w	r3, sl, #1
 800a3aa:	f88b 3000 	strb.w	r3, [fp]
 800a3ae:	e73c      	b.n	800a22a <_dtoa_r+0x94a>
 800a3b0:	9b05      	ldr	r3, [sp, #20]
 800a3b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a3b6:	4599      	cmp	r9, r3
 800a3b8:	d047      	beq.n	800a44a <_dtoa_r+0xb6a>
 800a3ba:	ee18 1a10 	vmov	r1, s16
 800a3be:	2300      	movs	r3, #0
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 f8e8 	bl	800a598 <__multadd>
 800a3c8:	45b8      	cmp	r8, r7
 800a3ca:	ee08 0a10 	vmov	s16, r0
 800a3ce:	f04f 0300 	mov.w	r3, #0
 800a3d2:	f04f 020a 	mov.w	r2, #10
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	4620      	mov	r0, r4
 800a3da:	d106      	bne.n	800a3ea <_dtoa_r+0xb0a>
 800a3dc:	f000 f8dc 	bl	800a598 <__multadd>
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	4607      	mov	r7, r0
 800a3e4:	f109 0901 	add.w	r9, r9, #1
 800a3e8:	e772      	b.n	800a2d0 <_dtoa_r+0x9f0>
 800a3ea:	f000 f8d5 	bl	800a598 <__multadd>
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	220a      	movs	r2, #10
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 f8ce 	bl	800a598 <__multadd>
 800a3fc:	4607      	mov	r7, r0
 800a3fe:	e7f1      	b.n	800a3e4 <_dtoa_r+0xb04>
 800a400:	9b03      	ldr	r3, [sp, #12]
 800a402:	9302      	str	r3, [sp, #8]
 800a404:	9d01      	ldr	r5, [sp, #4]
 800a406:	ee18 0a10 	vmov	r0, s16
 800a40a:	4631      	mov	r1, r6
 800a40c:	f7ff f9dd 	bl	80097ca <quorem>
 800a410:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	f805 ab01 	strb.w	sl, [r5], #1
 800a41a:	1aea      	subs	r2, r5, r3
 800a41c:	9b02      	ldr	r3, [sp, #8]
 800a41e:	4293      	cmp	r3, r2
 800a420:	dd09      	ble.n	800a436 <_dtoa_r+0xb56>
 800a422:	ee18 1a10 	vmov	r1, s16
 800a426:	2300      	movs	r3, #0
 800a428:	220a      	movs	r2, #10
 800a42a:	4620      	mov	r0, r4
 800a42c:	f000 f8b4 	bl	800a598 <__multadd>
 800a430:	ee08 0a10 	vmov	s16, r0
 800a434:	e7e7      	b.n	800a406 <_dtoa_r+0xb26>
 800a436:	9b02      	ldr	r3, [sp, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	bfc8      	it	gt
 800a43c:	461d      	movgt	r5, r3
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	bfd8      	it	le
 800a442:	2501      	movle	r5, #1
 800a444:	441d      	add	r5, r3
 800a446:	f04f 0800 	mov.w	r8, #0
 800a44a:	ee18 1a10 	vmov	r1, s16
 800a44e:	2201      	movs	r2, #1
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fa51 	bl	800a8f8 <__lshift>
 800a456:	4631      	mov	r1, r6
 800a458:	ee08 0a10 	vmov	s16, r0
 800a45c:	f000 fabc 	bl	800a9d8 <__mcmp>
 800a460:	2800      	cmp	r0, #0
 800a462:	dc91      	bgt.n	800a388 <_dtoa_r+0xaa8>
 800a464:	d102      	bne.n	800a46c <_dtoa_r+0xb8c>
 800a466:	f01a 0f01 	tst.w	sl, #1
 800a46a:	d18d      	bne.n	800a388 <_dtoa_r+0xaa8>
 800a46c:	462b      	mov	r3, r5
 800a46e:	461d      	mov	r5, r3
 800a470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a474:	2a30      	cmp	r2, #48	; 0x30
 800a476:	d0fa      	beq.n	800a46e <_dtoa_r+0xb8e>
 800a478:	e6d7      	b.n	800a22a <_dtoa_r+0x94a>
 800a47a:	9a01      	ldr	r2, [sp, #4]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d184      	bne.n	800a38a <_dtoa_r+0xaaa>
 800a480:	9b00      	ldr	r3, [sp, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	2331      	movs	r3, #49	; 0x31
 800a488:	7013      	strb	r3, [r2, #0]
 800a48a:	e6ce      	b.n	800a22a <_dtoa_r+0x94a>
 800a48c:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <_dtoa_r+0xbd4>)
 800a48e:	f7ff ba95 	b.w	80099bc <_dtoa_r+0xdc>
 800a492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a494:	2b00      	cmp	r3, #0
 800a496:	f47f aa6e 	bne.w	8009976 <_dtoa_r+0x96>
 800a49a:	4b07      	ldr	r3, [pc, #28]	; (800a4b8 <_dtoa_r+0xbd8>)
 800a49c:	f7ff ba8e 	b.w	80099bc <_dtoa_r+0xdc>
 800a4a0:	9b02      	ldr	r3, [sp, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dcae      	bgt.n	800a404 <_dtoa_r+0xb24>
 800a4a6:	9b06      	ldr	r3, [sp, #24]
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	f73f aea8 	bgt.w	800a1fe <_dtoa_r+0x91e>
 800a4ae:	e7a9      	b.n	800a404 <_dtoa_r+0xb24>
 800a4b0:	0800bd97 	.word	0x0800bd97
 800a4b4:	0800bcf4 	.word	0x0800bcf4
 800a4b8:	0800bd18 	.word	0x0800bd18

0800a4bc <_localeconv_r>:
 800a4bc:	4800      	ldr	r0, [pc, #0]	; (800a4c0 <_localeconv_r+0x4>)
 800a4be:	4770      	bx	lr
 800a4c0:	20000260 	.word	0x20000260

0800a4c4 <malloc>:
 800a4c4:	4b02      	ldr	r3, [pc, #8]	; (800a4d0 <malloc+0xc>)
 800a4c6:	4601      	mov	r1, r0
 800a4c8:	6818      	ldr	r0, [r3, #0]
 800a4ca:	f000 bc09 	b.w	800ace0 <_malloc_r>
 800a4ce:	bf00      	nop
 800a4d0:	2000010c 	.word	0x2000010c

0800a4d4 <_Balloc>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4d8:	4604      	mov	r4, r0
 800a4da:	460d      	mov	r5, r1
 800a4dc:	b976      	cbnz	r6, 800a4fc <_Balloc+0x28>
 800a4de:	2010      	movs	r0, #16
 800a4e0:	f7ff fff0 	bl	800a4c4 <malloc>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	6260      	str	r0, [r4, #36]	; 0x24
 800a4e8:	b920      	cbnz	r0, 800a4f4 <_Balloc+0x20>
 800a4ea:	4b18      	ldr	r3, [pc, #96]	; (800a54c <_Balloc+0x78>)
 800a4ec:	4818      	ldr	r0, [pc, #96]	; (800a550 <_Balloc+0x7c>)
 800a4ee:	2166      	movs	r1, #102	; 0x66
 800a4f0:	f000 fdd6 	bl	800b0a0 <__assert_func>
 800a4f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4f8:	6006      	str	r6, [r0, #0]
 800a4fa:	60c6      	str	r6, [r0, #12]
 800a4fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4fe:	68f3      	ldr	r3, [r6, #12]
 800a500:	b183      	cbz	r3, 800a524 <_Balloc+0x50>
 800a502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a50a:	b9b8      	cbnz	r0, 800a53c <_Balloc+0x68>
 800a50c:	2101      	movs	r1, #1
 800a50e:	fa01 f605 	lsl.w	r6, r1, r5
 800a512:	1d72      	adds	r2, r6, #5
 800a514:	0092      	lsls	r2, r2, #2
 800a516:	4620      	mov	r0, r4
 800a518:	f000 fb60 	bl	800abdc <_calloc_r>
 800a51c:	b160      	cbz	r0, 800a538 <_Balloc+0x64>
 800a51e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a522:	e00e      	b.n	800a542 <_Balloc+0x6e>
 800a524:	2221      	movs	r2, #33	; 0x21
 800a526:	2104      	movs	r1, #4
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fb57 	bl	800abdc <_calloc_r>
 800a52e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a530:	60f0      	str	r0, [r6, #12]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e4      	bne.n	800a502 <_Balloc+0x2e>
 800a538:	2000      	movs	r0, #0
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	6802      	ldr	r2, [r0, #0]
 800a53e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a542:	2300      	movs	r3, #0
 800a544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a548:	e7f7      	b.n	800a53a <_Balloc+0x66>
 800a54a:	bf00      	nop
 800a54c:	0800bd25 	.word	0x0800bd25
 800a550:	0800bda8 	.word	0x0800bda8

0800a554 <_Bfree>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	b976      	cbnz	r6, 800a57c <_Bfree+0x28>
 800a55e:	2010      	movs	r0, #16
 800a560:	f7ff ffb0 	bl	800a4c4 <malloc>
 800a564:	4602      	mov	r2, r0
 800a566:	6268      	str	r0, [r5, #36]	; 0x24
 800a568:	b920      	cbnz	r0, 800a574 <_Bfree+0x20>
 800a56a:	4b09      	ldr	r3, [pc, #36]	; (800a590 <_Bfree+0x3c>)
 800a56c:	4809      	ldr	r0, [pc, #36]	; (800a594 <_Bfree+0x40>)
 800a56e:	218a      	movs	r1, #138	; 0x8a
 800a570:	f000 fd96 	bl	800b0a0 <__assert_func>
 800a574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a578:	6006      	str	r6, [r0, #0]
 800a57a:	60c6      	str	r6, [r0, #12]
 800a57c:	b13c      	cbz	r4, 800a58e <_Bfree+0x3a>
 800a57e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a580:	6862      	ldr	r2, [r4, #4]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a588:	6021      	str	r1, [r4, #0]
 800a58a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	0800bd25 	.word	0x0800bd25
 800a594:	0800bda8 	.word	0x0800bda8

0800a598 <__multadd>:
 800a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59c:	690d      	ldr	r5, [r1, #16]
 800a59e:	4607      	mov	r7, r0
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	461e      	mov	r6, r3
 800a5a4:	f101 0c14 	add.w	ip, r1, #20
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f8dc 3000 	ldr.w	r3, [ip]
 800a5ae:	b299      	uxth	r1, r3
 800a5b0:	fb02 6101 	mla	r1, r2, r1, r6
 800a5b4:	0c1e      	lsrs	r6, r3, #16
 800a5b6:	0c0b      	lsrs	r3, r1, #16
 800a5b8:	fb02 3306 	mla	r3, r2, r6, r3
 800a5bc:	b289      	uxth	r1, r1
 800a5be:	3001      	adds	r0, #1
 800a5c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5c4:	4285      	cmp	r5, r0
 800a5c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a5ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5ce:	dcec      	bgt.n	800a5aa <__multadd+0x12>
 800a5d0:	b30e      	cbz	r6, 800a616 <__multadd+0x7e>
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	42ab      	cmp	r3, r5
 800a5d6:	dc19      	bgt.n	800a60c <__multadd+0x74>
 800a5d8:	6861      	ldr	r1, [r4, #4]
 800a5da:	4638      	mov	r0, r7
 800a5dc:	3101      	adds	r1, #1
 800a5de:	f7ff ff79 	bl	800a4d4 <_Balloc>
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	b928      	cbnz	r0, 800a5f2 <__multadd+0x5a>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b0c      	ldr	r3, [pc, #48]	; (800a61c <__multadd+0x84>)
 800a5ea:	480d      	ldr	r0, [pc, #52]	; (800a620 <__multadd+0x88>)
 800a5ec:	21b5      	movs	r1, #181	; 0xb5
 800a5ee:	f000 fd57 	bl	800b0a0 <__assert_func>
 800a5f2:	6922      	ldr	r2, [r4, #16]
 800a5f4:	3202      	adds	r2, #2
 800a5f6:	f104 010c 	add.w	r1, r4, #12
 800a5fa:	0092      	lsls	r2, r2, #2
 800a5fc:	300c      	adds	r0, #12
 800a5fe:	f7fe fc21 	bl	8008e44 <memcpy>
 800a602:	4621      	mov	r1, r4
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff ffa5 	bl	800a554 <_Bfree>
 800a60a:	4644      	mov	r4, r8
 800a60c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a610:	3501      	adds	r5, #1
 800a612:	615e      	str	r6, [r3, #20]
 800a614:	6125      	str	r5, [r4, #16]
 800a616:	4620      	mov	r0, r4
 800a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61c:	0800bd97 	.word	0x0800bd97
 800a620:	0800bda8 	.word	0x0800bda8

0800a624 <__hi0bits>:
 800a624:	0c03      	lsrs	r3, r0, #16
 800a626:	041b      	lsls	r3, r3, #16
 800a628:	b9d3      	cbnz	r3, 800a660 <__hi0bits+0x3c>
 800a62a:	0400      	lsls	r0, r0, #16
 800a62c:	2310      	movs	r3, #16
 800a62e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a632:	bf04      	itt	eq
 800a634:	0200      	lsleq	r0, r0, #8
 800a636:	3308      	addeq	r3, #8
 800a638:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a63c:	bf04      	itt	eq
 800a63e:	0100      	lsleq	r0, r0, #4
 800a640:	3304      	addeq	r3, #4
 800a642:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a646:	bf04      	itt	eq
 800a648:	0080      	lsleq	r0, r0, #2
 800a64a:	3302      	addeq	r3, #2
 800a64c:	2800      	cmp	r0, #0
 800a64e:	db05      	blt.n	800a65c <__hi0bits+0x38>
 800a650:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a654:	f103 0301 	add.w	r3, r3, #1
 800a658:	bf08      	it	eq
 800a65a:	2320      	moveq	r3, #32
 800a65c:	4618      	mov	r0, r3
 800a65e:	4770      	bx	lr
 800a660:	2300      	movs	r3, #0
 800a662:	e7e4      	b.n	800a62e <__hi0bits+0xa>

0800a664 <__lo0bits>:
 800a664:	6803      	ldr	r3, [r0, #0]
 800a666:	f013 0207 	ands.w	r2, r3, #7
 800a66a:	4601      	mov	r1, r0
 800a66c:	d00b      	beq.n	800a686 <__lo0bits+0x22>
 800a66e:	07da      	lsls	r2, r3, #31
 800a670:	d423      	bmi.n	800a6ba <__lo0bits+0x56>
 800a672:	0798      	lsls	r0, r3, #30
 800a674:	bf49      	itett	mi
 800a676:	085b      	lsrmi	r3, r3, #1
 800a678:	089b      	lsrpl	r3, r3, #2
 800a67a:	2001      	movmi	r0, #1
 800a67c:	600b      	strmi	r3, [r1, #0]
 800a67e:	bf5c      	itt	pl
 800a680:	600b      	strpl	r3, [r1, #0]
 800a682:	2002      	movpl	r0, #2
 800a684:	4770      	bx	lr
 800a686:	b298      	uxth	r0, r3
 800a688:	b9a8      	cbnz	r0, 800a6b6 <__lo0bits+0x52>
 800a68a:	0c1b      	lsrs	r3, r3, #16
 800a68c:	2010      	movs	r0, #16
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	b90a      	cbnz	r2, 800a696 <__lo0bits+0x32>
 800a692:	3008      	adds	r0, #8
 800a694:	0a1b      	lsrs	r3, r3, #8
 800a696:	071a      	lsls	r2, r3, #28
 800a698:	bf04      	itt	eq
 800a69a:	091b      	lsreq	r3, r3, #4
 800a69c:	3004      	addeq	r0, #4
 800a69e:	079a      	lsls	r2, r3, #30
 800a6a0:	bf04      	itt	eq
 800a6a2:	089b      	lsreq	r3, r3, #2
 800a6a4:	3002      	addeq	r0, #2
 800a6a6:	07da      	lsls	r2, r3, #31
 800a6a8:	d403      	bmi.n	800a6b2 <__lo0bits+0x4e>
 800a6aa:	085b      	lsrs	r3, r3, #1
 800a6ac:	f100 0001 	add.w	r0, r0, #1
 800a6b0:	d005      	beq.n	800a6be <__lo0bits+0x5a>
 800a6b2:	600b      	str	r3, [r1, #0]
 800a6b4:	4770      	bx	lr
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	e7e9      	b.n	800a68e <__lo0bits+0x2a>
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	4770      	bx	lr
 800a6be:	2020      	movs	r0, #32
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <__i2b>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	f7ff ff03 	bl	800a4d4 <_Balloc>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	b928      	cbnz	r0, 800a6de <__i2b+0x1a>
 800a6d2:	4b05      	ldr	r3, [pc, #20]	; (800a6e8 <__i2b+0x24>)
 800a6d4:	4805      	ldr	r0, [pc, #20]	; (800a6ec <__i2b+0x28>)
 800a6d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a6da:	f000 fce1 	bl	800b0a0 <__assert_func>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	6144      	str	r4, [r0, #20]
 800a6e2:	6103      	str	r3, [r0, #16]
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800bd97 	.word	0x0800bd97
 800a6ec:	0800bda8 	.word	0x0800bda8

0800a6f0 <__multiply>:
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	4691      	mov	r9, r2
 800a6f6:	690a      	ldr	r2, [r1, #16]
 800a6f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	bfb8      	it	lt
 800a700:	460b      	movlt	r3, r1
 800a702:	460c      	mov	r4, r1
 800a704:	bfbc      	itt	lt
 800a706:	464c      	movlt	r4, r9
 800a708:	4699      	movlt	r9, r3
 800a70a:	6927      	ldr	r7, [r4, #16]
 800a70c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a710:	68a3      	ldr	r3, [r4, #8]
 800a712:	6861      	ldr	r1, [r4, #4]
 800a714:	eb07 060a 	add.w	r6, r7, sl
 800a718:	42b3      	cmp	r3, r6
 800a71a:	b085      	sub	sp, #20
 800a71c:	bfb8      	it	lt
 800a71e:	3101      	addlt	r1, #1
 800a720:	f7ff fed8 	bl	800a4d4 <_Balloc>
 800a724:	b930      	cbnz	r0, 800a734 <__multiply+0x44>
 800a726:	4602      	mov	r2, r0
 800a728:	4b44      	ldr	r3, [pc, #272]	; (800a83c <__multiply+0x14c>)
 800a72a:	4845      	ldr	r0, [pc, #276]	; (800a840 <__multiply+0x150>)
 800a72c:	f240 115d 	movw	r1, #349	; 0x15d
 800a730:	f000 fcb6 	bl	800b0a0 <__assert_func>
 800a734:	f100 0514 	add.w	r5, r0, #20
 800a738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a73c:	462b      	mov	r3, r5
 800a73e:	2200      	movs	r2, #0
 800a740:	4543      	cmp	r3, r8
 800a742:	d321      	bcc.n	800a788 <__multiply+0x98>
 800a744:	f104 0314 	add.w	r3, r4, #20
 800a748:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a74c:	f109 0314 	add.w	r3, r9, #20
 800a750:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a754:	9202      	str	r2, [sp, #8]
 800a756:	1b3a      	subs	r2, r7, r4
 800a758:	3a15      	subs	r2, #21
 800a75a:	f022 0203 	bic.w	r2, r2, #3
 800a75e:	3204      	adds	r2, #4
 800a760:	f104 0115 	add.w	r1, r4, #21
 800a764:	428f      	cmp	r7, r1
 800a766:	bf38      	it	cc
 800a768:	2204      	movcc	r2, #4
 800a76a:	9201      	str	r2, [sp, #4]
 800a76c:	9a02      	ldr	r2, [sp, #8]
 800a76e:	9303      	str	r3, [sp, #12]
 800a770:	429a      	cmp	r2, r3
 800a772:	d80c      	bhi.n	800a78e <__multiply+0x9e>
 800a774:	2e00      	cmp	r6, #0
 800a776:	dd03      	ble.n	800a780 <__multiply+0x90>
 800a778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d05a      	beq.n	800a836 <__multiply+0x146>
 800a780:	6106      	str	r6, [r0, #16]
 800a782:	b005      	add	sp, #20
 800a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a788:	f843 2b04 	str.w	r2, [r3], #4
 800a78c:	e7d8      	b.n	800a740 <__multiply+0x50>
 800a78e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a792:	f1ba 0f00 	cmp.w	sl, #0
 800a796:	d024      	beq.n	800a7e2 <__multiply+0xf2>
 800a798:	f104 0e14 	add.w	lr, r4, #20
 800a79c:	46a9      	mov	r9, r5
 800a79e:	f04f 0c00 	mov.w	ip, #0
 800a7a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a7a6:	f8d9 1000 	ldr.w	r1, [r9]
 800a7aa:	fa1f fb82 	uxth.w	fp, r2
 800a7ae:	b289      	uxth	r1, r1
 800a7b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a7b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a7b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a7bc:	4461      	add	r1, ip
 800a7be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a7c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a7ca:	b289      	uxth	r1, r1
 800a7cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7d0:	4577      	cmp	r7, lr
 800a7d2:	f849 1b04 	str.w	r1, [r9], #4
 800a7d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7da:	d8e2      	bhi.n	800a7a2 <__multiply+0xb2>
 800a7dc:	9a01      	ldr	r2, [sp, #4]
 800a7de:	f845 c002 	str.w	ip, [r5, r2]
 800a7e2:	9a03      	ldr	r2, [sp, #12]
 800a7e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	f1b9 0f00 	cmp.w	r9, #0
 800a7ee:	d020      	beq.n	800a832 <__multiply+0x142>
 800a7f0:	6829      	ldr	r1, [r5, #0]
 800a7f2:	f104 0c14 	add.w	ip, r4, #20
 800a7f6:	46ae      	mov	lr, r5
 800a7f8:	f04f 0a00 	mov.w	sl, #0
 800a7fc:	f8bc b000 	ldrh.w	fp, [ip]
 800a800:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a804:	fb09 220b 	mla	r2, r9, fp, r2
 800a808:	4492      	add	sl, r2
 800a80a:	b289      	uxth	r1, r1
 800a80c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a810:	f84e 1b04 	str.w	r1, [lr], #4
 800a814:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a818:	f8be 1000 	ldrh.w	r1, [lr]
 800a81c:	0c12      	lsrs	r2, r2, #16
 800a81e:	fb09 1102 	mla	r1, r9, r2, r1
 800a822:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a826:	4567      	cmp	r7, ip
 800a828:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a82c:	d8e6      	bhi.n	800a7fc <__multiply+0x10c>
 800a82e:	9a01      	ldr	r2, [sp, #4]
 800a830:	50a9      	str	r1, [r5, r2]
 800a832:	3504      	adds	r5, #4
 800a834:	e79a      	b.n	800a76c <__multiply+0x7c>
 800a836:	3e01      	subs	r6, #1
 800a838:	e79c      	b.n	800a774 <__multiply+0x84>
 800a83a:	bf00      	nop
 800a83c:	0800bd97 	.word	0x0800bd97
 800a840:	0800bda8 	.word	0x0800bda8

0800a844 <__pow5mult>:
 800a844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a848:	4615      	mov	r5, r2
 800a84a:	f012 0203 	ands.w	r2, r2, #3
 800a84e:	4606      	mov	r6, r0
 800a850:	460f      	mov	r7, r1
 800a852:	d007      	beq.n	800a864 <__pow5mult+0x20>
 800a854:	4c25      	ldr	r4, [pc, #148]	; (800a8ec <__pow5mult+0xa8>)
 800a856:	3a01      	subs	r2, #1
 800a858:	2300      	movs	r3, #0
 800a85a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a85e:	f7ff fe9b 	bl	800a598 <__multadd>
 800a862:	4607      	mov	r7, r0
 800a864:	10ad      	asrs	r5, r5, #2
 800a866:	d03d      	beq.n	800a8e4 <__pow5mult+0xa0>
 800a868:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a86a:	b97c      	cbnz	r4, 800a88c <__pow5mult+0x48>
 800a86c:	2010      	movs	r0, #16
 800a86e:	f7ff fe29 	bl	800a4c4 <malloc>
 800a872:	4602      	mov	r2, r0
 800a874:	6270      	str	r0, [r6, #36]	; 0x24
 800a876:	b928      	cbnz	r0, 800a884 <__pow5mult+0x40>
 800a878:	4b1d      	ldr	r3, [pc, #116]	; (800a8f0 <__pow5mult+0xac>)
 800a87a:	481e      	ldr	r0, [pc, #120]	; (800a8f4 <__pow5mult+0xb0>)
 800a87c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a880:	f000 fc0e 	bl	800b0a0 <__assert_func>
 800a884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a888:	6004      	str	r4, [r0, #0]
 800a88a:	60c4      	str	r4, [r0, #12]
 800a88c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a894:	b94c      	cbnz	r4, 800a8aa <__pow5mult+0x66>
 800a896:	f240 2171 	movw	r1, #625	; 0x271
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7ff ff12 	bl	800a6c4 <__i2b>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	6003      	str	r3, [r0, #0]
 800a8aa:	f04f 0900 	mov.w	r9, #0
 800a8ae:	07eb      	lsls	r3, r5, #31
 800a8b0:	d50a      	bpl.n	800a8c8 <__pow5mult+0x84>
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f7ff ff1a 	bl	800a6f0 <__multiply>
 800a8bc:	4639      	mov	r1, r7
 800a8be:	4680      	mov	r8, r0
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f7ff fe47 	bl	800a554 <_Bfree>
 800a8c6:	4647      	mov	r7, r8
 800a8c8:	106d      	asrs	r5, r5, #1
 800a8ca:	d00b      	beq.n	800a8e4 <__pow5mult+0xa0>
 800a8cc:	6820      	ldr	r0, [r4, #0]
 800a8ce:	b938      	cbnz	r0, 800a8e0 <__pow5mult+0x9c>
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f7ff ff0b 	bl	800a6f0 <__multiply>
 800a8da:	6020      	str	r0, [r4, #0]
 800a8dc:	f8c0 9000 	str.w	r9, [r0]
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	e7e4      	b.n	800a8ae <__pow5mult+0x6a>
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0800bef8 	.word	0x0800bef8
 800a8f0:	0800bd25 	.word	0x0800bd25
 800a8f4:	0800bda8 	.word	0x0800bda8

0800a8f8 <__lshift>:
 800a8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	6849      	ldr	r1, [r1, #4]
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a906:	68a3      	ldr	r3, [r4, #8]
 800a908:	4607      	mov	r7, r0
 800a90a:	4691      	mov	r9, r2
 800a90c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a910:	f108 0601 	add.w	r6, r8, #1
 800a914:	42b3      	cmp	r3, r6
 800a916:	db0b      	blt.n	800a930 <__lshift+0x38>
 800a918:	4638      	mov	r0, r7
 800a91a:	f7ff fddb 	bl	800a4d4 <_Balloc>
 800a91e:	4605      	mov	r5, r0
 800a920:	b948      	cbnz	r0, 800a936 <__lshift+0x3e>
 800a922:	4602      	mov	r2, r0
 800a924:	4b2a      	ldr	r3, [pc, #168]	; (800a9d0 <__lshift+0xd8>)
 800a926:	482b      	ldr	r0, [pc, #172]	; (800a9d4 <__lshift+0xdc>)
 800a928:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a92c:	f000 fbb8 	bl	800b0a0 <__assert_func>
 800a930:	3101      	adds	r1, #1
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	e7ee      	b.n	800a914 <__lshift+0x1c>
 800a936:	2300      	movs	r3, #0
 800a938:	f100 0114 	add.w	r1, r0, #20
 800a93c:	f100 0210 	add.w	r2, r0, #16
 800a940:	4618      	mov	r0, r3
 800a942:	4553      	cmp	r3, sl
 800a944:	db37      	blt.n	800a9b6 <__lshift+0xbe>
 800a946:	6920      	ldr	r0, [r4, #16]
 800a948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a94c:	f104 0314 	add.w	r3, r4, #20
 800a950:	f019 091f 	ands.w	r9, r9, #31
 800a954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a958:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a95c:	d02f      	beq.n	800a9be <__lshift+0xc6>
 800a95e:	f1c9 0e20 	rsb	lr, r9, #32
 800a962:	468a      	mov	sl, r1
 800a964:	f04f 0c00 	mov.w	ip, #0
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	fa02 f209 	lsl.w	r2, r2, r9
 800a96e:	ea42 020c 	orr.w	r2, r2, ip
 800a972:	f84a 2b04 	str.w	r2, [sl], #4
 800a976:	f853 2b04 	ldr.w	r2, [r3], #4
 800a97a:	4298      	cmp	r0, r3
 800a97c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a980:	d8f2      	bhi.n	800a968 <__lshift+0x70>
 800a982:	1b03      	subs	r3, r0, r4
 800a984:	3b15      	subs	r3, #21
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	3304      	adds	r3, #4
 800a98c:	f104 0215 	add.w	r2, r4, #21
 800a990:	4290      	cmp	r0, r2
 800a992:	bf38      	it	cc
 800a994:	2304      	movcc	r3, #4
 800a996:	f841 c003 	str.w	ip, [r1, r3]
 800a99a:	f1bc 0f00 	cmp.w	ip, #0
 800a99e:	d001      	beq.n	800a9a4 <__lshift+0xac>
 800a9a0:	f108 0602 	add.w	r6, r8, #2
 800a9a4:	3e01      	subs	r6, #1
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	612e      	str	r6, [r5, #16]
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	f7ff fdd2 	bl	800a554 <_Bfree>
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	e7c1      	b.n	800a942 <__lshift+0x4a>
 800a9be:	3904      	subs	r1, #4
 800a9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9c8:	4298      	cmp	r0, r3
 800a9ca:	d8f9      	bhi.n	800a9c0 <__lshift+0xc8>
 800a9cc:	e7ea      	b.n	800a9a4 <__lshift+0xac>
 800a9ce:	bf00      	nop
 800a9d0:	0800bd97 	.word	0x0800bd97
 800a9d4:	0800bda8 	.word	0x0800bda8

0800a9d8 <__mcmp>:
 800a9d8:	b530      	push	{r4, r5, lr}
 800a9da:	6902      	ldr	r2, [r0, #16]
 800a9dc:	690c      	ldr	r4, [r1, #16]
 800a9de:	1b12      	subs	r2, r2, r4
 800a9e0:	d10e      	bne.n	800aa00 <__mcmp+0x28>
 800a9e2:	f100 0314 	add.w	r3, r0, #20
 800a9e6:	3114      	adds	r1, #20
 800a9e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a9ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a9f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9f8:	42a5      	cmp	r5, r4
 800a9fa:	d003      	beq.n	800aa04 <__mcmp+0x2c>
 800a9fc:	d305      	bcc.n	800aa0a <__mcmp+0x32>
 800a9fe:	2201      	movs	r2, #1
 800aa00:	4610      	mov	r0, r2
 800aa02:	bd30      	pop	{r4, r5, pc}
 800aa04:	4283      	cmp	r3, r0
 800aa06:	d3f3      	bcc.n	800a9f0 <__mcmp+0x18>
 800aa08:	e7fa      	b.n	800aa00 <__mcmp+0x28>
 800aa0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa0e:	e7f7      	b.n	800aa00 <__mcmp+0x28>

0800aa10 <__mdiff>:
 800aa10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	460c      	mov	r4, r1
 800aa16:	4606      	mov	r6, r0
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4690      	mov	r8, r2
 800aa1e:	f7ff ffdb 	bl	800a9d8 <__mcmp>
 800aa22:	1e05      	subs	r5, r0, #0
 800aa24:	d110      	bne.n	800aa48 <__mdiff+0x38>
 800aa26:	4629      	mov	r1, r5
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f7ff fd53 	bl	800a4d4 <_Balloc>
 800aa2e:	b930      	cbnz	r0, 800aa3e <__mdiff+0x2e>
 800aa30:	4b3a      	ldr	r3, [pc, #232]	; (800ab1c <__mdiff+0x10c>)
 800aa32:	4602      	mov	r2, r0
 800aa34:	f240 2132 	movw	r1, #562	; 0x232
 800aa38:	4839      	ldr	r0, [pc, #228]	; (800ab20 <__mdiff+0x110>)
 800aa3a:	f000 fb31 	bl	800b0a0 <__assert_func>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa48:	bfa4      	itt	ge
 800aa4a:	4643      	movge	r3, r8
 800aa4c:	46a0      	movge	r8, r4
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa54:	bfa6      	itte	ge
 800aa56:	461c      	movge	r4, r3
 800aa58:	2500      	movge	r5, #0
 800aa5a:	2501      	movlt	r5, #1
 800aa5c:	f7ff fd3a 	bl	800a4d4 <_Balloc>
 800aa60:	b920      	cbnz	r0, 800aa6c <__mdiff+0x5c>
 800aa62:	4b2e      	ldr	r3, [pc, #184]	; (800ab1c <__mdiff+0x10c>)
 800aa64:	4602      	mov	r2, r0
 800aa66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa6a:	e7e5      	b.n	800aa38 <__mdiff+0x28>
 800aa6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa70:	6926      	ldr	r6, [r4, #16]
 800aa72:	60c5      	str	r5, [r0, #12]
 800aa74:	f104 0914 	add.w	r9, r4, #20
 800aa78:	f108 0514 	add.w	r5, r8, #20
 800aa7c:	f100 0e14 	add.w	lr, r0, #20
 800aa80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa88:	f108 0210 	add.w	r2, r8, #16
 800aa8c:	46f2      	mov	sl, lr
 800aa8e:	2100      	movs	r1, #0
 800aa90:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa98:	fa1f f883 	uxth.w	r8, r3
 800aa9c:	fa11 f18b 	uxtah	r1, r1, fp
 800aaa0:	0c1b      	lsrs	r3, r3, #16
 800aaa2:	eba1 0808 	sub.w	r8, r1, r8
 800aaa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aaaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aaae:	fa1f f888 	uxth.w	r8, r8
 800aab2:	1419      	asrs	r1, r3, #16
 800aab4:	454e      	cmp	r6, r9
 800aab6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aaba:	f84a 3b04 	str.w	r3, [sl], #4
 800aabe:	d8e7      	bhi.n	800aa90 <__mdiff+0x80>
 800aac0:	1b33      	subs	r3, r6, r4
 800aac2:	3b15      	subs	r3, #21
 800aac4:	f023 0303 	bic.w	r3, r3, #3
 800aac8:	3304      	adds	r3, #4
 800aaca:	3415      	adds	r4, #21
 800aacc:	42a6      	cmp	r6, r4
 800aace:	bf38      	it	cc
 800aad0:	2304      	movcc	r3, #4
 800aad2:	441d      	add	r5, r3
 800aad4:	4473      	add	r3, lr
 800aad6:	469e      	mov	lr, r3
 800aad8:	462e      	mov	r6, r5
 800aada:	4566      	cmp	r6, ip
 800aadc:	d30e      	bcc.n	800aafc <__mdiff+0xec>
 800aade:	f10c 0203 	add.w	r2, ip, #3
 800aae2:	1b52      	subs	r2, r2, r5
 800aae4:	f022 0203 	bic.w	r2, r2, #3
 800aae8:	3d03      	subs	r5, #3
 800aaea:	45ac      	cmp	ip, r5
 800aaec:	bf38      	it	cc
 800aaee:	2200      	movcc	r2, #0
 800aaf0:	441a      	add	r2, r3
 800aaf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aaf6:	b17b      	cbz	r3, 800ab18 <__mdiff+0x108>
 800aaf8:	6107      	str	r7, [r0, #16]
 800aafa:	e7a3      	b.n	800aa44 <__mdiff+0x34>
 800aafc:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab00:	fa11 f288 	uxtah	r2, r1, r8
 800ab04:	1414      	asrs	r4, r2, #16
 800ab06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab0a:	b292      	uxth	r2, r2
 800ab0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab10:	f84e 2b04 	str.w	r2, [lr], #4
 800ab14:	1421      	asrs	r1, r4, #16
 800ab16:	e7e0      	b.n	800aada <__mdiff+0xca>
 800ab18:	3f01      	subs	r7, #1
 800ab1a:	e7ea      	b.n	800aaf2 <__mdiff+0xe2>
 800ab1c:	0800bd97 	.word	0x0800bd97
 800ab20:	0800bda8 	.word	0x0800bda8

0800ab24 <__d2b>:
 800ab24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	4689      	mov	r9, r1
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	ec57 6b10 	vmov	r6, r7, d0
 800ab30:	4690      	mov	r8, r2
 800ab32:	f7ff fccf 	bl	800a4d4 <_Balloc>
 800ab36:	4604      	mov	r4, r0
 800ab38:	b930      	cbnz	r0, 800ab48 <__d2b+0x24>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	4b25      	ldr	r3, [pc, #148]	; (800abd4 <__d2b+0xb0>)
 800ab3e:	4826      	ldr	r0, [pc, #152]	; (800abd8 <__d2b+0xb4>)
 800ab40:	f240 310a 	movw	r1, #778	; 0x30a
 800ab44:	f000 faac 	bl	800b0a0 <__assert_func>
 800ab48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab50:	bb35      	cbnz	r5, 800aba0 <__d2b+0x7c>
 800ab52:	2e00      	cmp	r6, #0
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	d028      	beq.n	800abaa <__d2b+0x86>
 800ab58:	4668      	mov	r0, sp
 800ab5a:	9600      	str	r6, [sp, #0]
 800ab5c:	f7ff fd82 	bl	800a664 <__lo0bits>
 800ab60:	9900      	ldr	r1, [sp, #0]
 800ab62:	b300      	cbz	r0, 800aba6 <__d2b+0x82>
 800ab64:	9a01      	ldr	r2, [sp, #4]
 800ab66:	f1c0 0320 	rsb	r3, r0, #32
 800ab6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	40c2      	lsrs	r2, r0
 800ab72:	6163      	str	r3, [r4, #20]
 800ab74:	9201      	str	r2, [sp, #4]
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	61a3      	str	r3, [r4, #24]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	bf14      	ite	ne
 800ab7e:	2202      	movne	r2, #2
 800ab80:	2201      	moveq	r2, #1
 800ab82:	6122      	str	r2, [r4, #16]
 800ab84:	b1d5      	cbz	r5, 800abbc <__d2b+0x98>
 800ab86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab8a:	4405      	add	r5, r0
 800ab8c:	f8c9 5000 	str.w	r5, [r9]
 800ab90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab94:	f8c8 0000 	str.w	r0, [r8]
 800ab98:	4620      	mov	r0, r4
 800ab9a:	b003      	add	sp, #12
 800ab9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aba4:	e7d5      	b.n	800ab52 <__d2b+0x2e>
 800aba6:	6161      	str	r1, [r4, #20]
 800aba8:	e7e5      	b.n	800ab76 <__d2b+0x52>
 800abaa:	a801      	add	r0, sp, #4
 800abac:	f7ff fd5a 	bl	800a664 <__lo0bits>
 800abb0:	9b01      	ldr	r3, [sp, #4]
 800abb2:	6163      	str	r3, [r4, #20]
 800abb4:	2201      	movs	r2, #1
 800abb6:	6122      	str	r2, [r4, #16]
 800abb8:	3020      	adds	r0, #32
 800abba:	e7e3      	b.n	800ab84 <__d2b+0x60>
 800abbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abc4:	f8c9 0000 	str.w	r0, [r9]
 800abc8:	6918      	ldr	r0, [r3, #16]
 800abca:	f7ff fd2b 	bl	800a624 <__hi0bits>
 800abce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abd2:	e7df      	b.n	800ab94 <__d2b+0x70>
 800abd4:	0800bd97 	.word	0x0800bd97
 800abd8:	0800bda8 	.word	0x0800bda8

0800abdc <_calloc_r>:
 800abdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abde:	fba1 2402 	umull	r2, r4, r1, r2
 800abe2:	b94c      	cbnz	r4, 800abf8 <_calloc_r+0x1c>
 800abe4:	4611      	mov	r1, r2
 800abe6:	9201      	str	r2, [sp, #4]
 800abe8:	f000 f87a 	bl	800ace0 <_malloc_r>
 800abec:	9a01      	ldr	r2, [sp, #4]
 800abee:	4605      	mov	r5, r0
 800abf0:	b930      	cbnz	r0, 800ac00 <_calloc_r+0x24>
 800abf2:	4628      	mov	r0, r5
 800abf4:	b003      	add	sp, #12
 800abf6:	bd30      	pop	{r4, r5, pc}
 800abf8:	220c      	movs	r2, #12
 800abfa:	6002      	str	r2, [r0, #0]
 800abfc:	2500      	movs	r5, #0
 800abfe:	e7f8      	b.n	800abf2 <_calloc_r+0x16>
 800ac00:	4621      	mov	r1, r4
 800ac02:	f7fe f92d 	bl	8008e60 <memset>
 800ac06:	e7f4      	b.n	800abf2 <_calloc_r+0x16>

0800ac08 <_free_r>:
 800ac08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac0a:	2900      	cmp	r1, #0
 800ac0c:	d044      	beq.n	800ac98 <_free_r+0x90>
 800ac0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac12:	9001      	str	r0, [sp, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f1a1 0404 	sub.w	r4, r1, #4
 800ac1a:	bfb8      	it	lt
 800ac1c:	18e4      	addlt	r4, r4, r3
 800ac1e:	f000 fa9b 	bl	800b158 <__malloc_lock>
 800ac22:	4a1e      	ldr	r2, [pc, #120]	; (800ac9c <_free_r+0x94>)
 800ac24:	9801      	ldr	r0, [sp, #4]
 800ac26:	6813      	ldr	r3, [r2, #0]
 800ac28:	b933      	cbnz	r3, 800ac38 <_free_r+0x30>
 800ac2a:	6063      	str	r3, [r4, #4]
 800ac2c:	6014      	str	r4, [r2, #0]
 800ac2e:	b003      	add	sp, #12
 800ac30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac34:	f000 ba96 	b.w	800b164 <__malloc_unlock>
 800ac38:	42a3      	cmp	r3, r4
 800ac3a:	d908      	bls.n	800ac4e <_free_r+0x46>
 800ac3c:	6825      	ldr	r5, [r4, #0]
 800ac3e:	1961      	adds	r1, r4, r5
 800ac40:	428b      	cmp	r3, r1
 800ac42:	bf01      	itttt	eq
 800ac44:	6819      	ldreq	r1, [r3, #0]
 800ac46:	685b      	ldreq	r3, [r3, #4]
 800ac48:	1949      	addeq	r1, r1, r5
 800ac4a:	6021      	streq	r1, [r4, #0]
 800ac4c:	e7ed      	b.n	800ac2a <_free_r+0x22>
 800ac4e:	461a      	mov	r2, r3
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	b10b      	cbz	r3, 800ac58 <_free_r+0x50>
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	d9fa      	bls.n	800ac4e <_free_r+0x46>
 800ac58:	6811      	ldr	r1, [r2, #0]
 800ac5a:	1855      	adds	r5, r2, r1
 800ac5c:	42a5      	cmp	r5, r4
 800ac5e:	d10b      	bne.n	800ac78 <_free_r+0x70>
 800ac60:	6824      	ldr	r4, [r4, #0]
 800ac62:	4421      	add	r1, r4
 800ac64:	1854      	adds	r4, r2, r1
 800ac66:	42a3      	cmp	r3, r4
 800ac68:	6011      	str	r1, [r2, #0]
 800ac6a:	d1e0      	bne.n	800ac2e <_free_r+0x26>
 800ac6c:	681c      	ldr	r4, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	6053      	str	r3, [r2, #4]
 800ac72:	4421      	add	r1, r4
 800ac74:	6011      	str	r1, [r2, #0]
 800ac76:	e7da      	b.n	800ac2e <_free_r+0x26>
 800ac78:	d902      	bls.n	800ac80 <_free_r+0x78>
 800ac7a:	230c      	movs	r3, #12
 800ac7c:	6003      	str	r3, [r0, #0]
 800ac7e:	e7d6      	b.n	800ac2e <_free_r+0x26>
 800ac80:	6825      	ldr	r5, [r4, #0]
 800ac82:	1961      	adds	r1, r4, r5
 800ac84:	428b      	cmp	r3, r1
 800ac86:	bf04      	itt	eq
 800ac88:	6819      	ldreq	r1, [r3, #0]
 800ac8a:	685b      	ldreq	r3, [r3, #4]
 800ac8c:	6063      	str	r3, [r4, #4]
 800ac8e:	bf04      	itt	eq
 800ac90:	1949      	addeq	r1, r1, r5
 800ac92:	6021      	streq	r1, [r4, #0]
 800ac94:	6054      	str	r4, [r2, #4]
 800ac96:	e7ca      	b.n	800ac2e <_free_r+0x26>
 800ac98:	b003      	add	sp, #12
 800ac9a:	bd30      	pop	{r4, r5, pc}
 800ac9c:	200020b4 	.word	0x200020b4

0800aca0 <sbrk_aligned>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	4e0e      	ldr	r6, [pc, #56]	; (800acdc <sbrk_aligned+0x3c>)
 800aca4:	460c      	mov	r4, r1
 800aca6:	6831      	ldr	r1, [r6, #0]
 800aca8:	4605      	mov	r5, r0
 800acaa:	b911      	cbnz	r1, 800acb2 <sbrk_aligned+0x12>
 800acac:	f000 f9e8 	bl	800b080 <_sbrk_r>
 800acb0:	6030      	str	r0, [r6, #0]
 800acb2:	4621      	mov	r1, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f000 f9e3 	bl	800b080 <_sbrk_r>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	d00a      	beq.n	800acd4 <sbrk_aligned+0x34>
 800acbe:	1cc4      	adds	r4, r0, #3
 800acc0:	f024 0403 	bic.w	r4, r4, #3
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d007      	beq.n	800acd8 <sbrk_aligned+0x38>
 800acc8:	1a21      	subs	r1, r4, r0
 800acca:	4628      	mov	r0, r5
 800accc:	f000 f9d8 	bl	800b080 <_sbrk_r>
 800acd0:	3001      	adds	r0, #1
 800acd2:	d101      	bne.n	800acd8 <sbrk_aligned+0x38>
 800acd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800acd8:	4620      	mov	r0, r4
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	200020b8 	.word	0x200020b8

0800ace0 <_malloc_r>:
 800ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace4:	1ccd      	adds	r5, r1, #3
 800ace6:	f025 0503 	bic.w	r5, r5, #3
 800acea:	3508      	adds	r5, #8
 800acec:	2d0c      	cmp	r5, #12
 800acee:	bf38      	it	cc
 800acf0:	250c      	movcc	r5, #12
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	4607      	mov	r7, r0
 800acf6:	db01      	blt.n	800acfc <_malloc_r+0x1c>
 800acf8:	42a9      	cmp	r1, r5
 800acfa:	d905      	bls.n	800ad08 <_malloc_r+0x28>
 800acfc:	230c      	movs	r3, #12
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	2600      	movs	r6, #0
 800ad02:	4630      	mov	r0, r6
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad08:	4e2e      	ldr	r6, [pc, #184]	; (800adc4 <_malloc_r+0xe4>)
 800ad0a:	f000 fa25 	bl	800b158 <__malloc_lock>
 800ad0e:	6833      	ldr	r3, [r6, #0]
 800ad10:	461c      	mov	r4, r3
 800ad12:	bb34      	cbnz	r4, 800ad62 <_malloc_r+0x82>
 800ad14:	4629      	mov	r1, r5
 800ad16:	4638      	mov	r0, r7
 800ad18:	f7ff ffc2 	bl	800aca0 <sbrk_aligned>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	4604      	mov	r4, r0
 800ad20:	d14d      	bne.n	800adbe <_malloc_r+0xde>
 800ad22:	6834      	ldr	r4, [r6, #0]
 800ad24:	4626      	mov	r6, r4
 800ad26:	2e00      	cmp	r6, #0
 800ad28:	d140      	bne.n	800adac <_malloc_r+0xcc>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4638      	mov	r0, r7
 800ad30:	eb04 0803 	add.w	r8, r4, r3
 800ad34:	f000 f9a4 	bl	800b080 <_sbrk_r>
 800ad38:	4580      	cmp	r8, r0
 800ad3a:	d13a      	bne.n	800adb2 <_malloc_r+0xd2>
 800ad3c:	6821      	ldr	r1, [r4, #0]
 800ad3e:	3503      	adds	r5, #3
 800ad40:	1a6d      	subs	r5, r5, r1
 800ad42:	f025 0503 	bic.w	r5, r5, #3
 800ad46:	3508      	adds	r5, #8
 800ad48:	2d0c      	cmp	r5, #12
 800ad4a:	bf38      	it	cc
 800ad4c:	250c      	movcc	r5, #12
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff ffa5 	bl	800aca0 <sbrk_aligned>
 800ad56:	3001      	adds	r0, #1
 800ad58:	d02b      	beq.n	800adb2 <_malloc_r+0xd2>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	442b      	add	r3, r5
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	e00e      	b.n	800ad80 <_malloc_r+0xa0>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	1b52      	subs	r2, r2, r5
 800ad66:	d41e      	bmi.n	800ada6 <_malloc_r+0xc6>
 800ad68:	2a0b      	cmp	r2, #11
 800ad6a:	d916      	bls.n	800ad9a <_malloc_r+0xba>
 800ad6c:	1961      	adds	r1, r4, r5
 800ad6e:	42a3      	cmp	r3, r4
 800ad70:	6025      	str	r5, [r4, #0]
 800ad72:	bf18      	it	ne
 800ad74:	6059      	strne	r1, [r3, #4]
 800ad76:	6863      	ldr	r3, [r4, #4]
 800ad78:	bf08      	it	eq
 800ad7a:	6031      	streq	r1, [r6, #0]
 800ad7c:	5162      	str	r2, [r4, r5]
 800ad7e:	604b      	str	r3, [r1, #4]
 800ad80:	4638      	mov	r0, r7
 800ad82:	f104 060b 	add.w	r6, r4, #11
 800ad86:	f000 f9ed 	bl	800b164 <__malloc_unlock>
 800ad8a:	f026 0607 	bic.w	r6, r6, #7
 800ad8e:	1d23      	adds	r3, r4, #4
 800ad90:	1af2      	subs	r2, r6, r3
 800ad92:	d0b6      	beq.n	800ad02 <_malloc_r+0x22>
 800ad94:	1b9b      	subs	r3, r3, r6
 800ad96:	50a3      	str	r3, [r4, r2]
 800ad98:	e7b3      	b.n	800ad02 <_malloc_r+0x22>
 800ad9a:	6862      	ldr	r2, [r4, #4]
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	bf0c      	ite	eq
 800ada0:	6032      	streq	r2, [r6, #0]
 800ada2:	605a      	strne	r2, [r3, #4]
 800ada4:	e7ec      	b.n	800ad80 <_malloc_r+0xa0>
 800ada6:	4623      	mov	r3, r4
 800ada8:	6864      	ldr	r4, [r4, #4]
 800adaa:	e7b2      	b.n	800ad12 <_malloc_r+0x32>
 800adac:	4634      	mov	r4, r6
 800adae:	6876      	ldr	r6, [r6, #4]
 800adb0:	e7b9      	b.n	800ad26 <_malloc_r+0x46>
 800adb2:	230c      	movs	r3, #12
 800adb4:	603b      	str	r3, [r7, #0]
 800adb6:	4638      	mov	r0, r7
 800adb8:	f000 f9d4 	bl	800b164 <__malloc_unlock>
 800adbc:	e7a1      	b.n	800ad02 <_malloc_r+0x22>
 800adbe:	6025      	str	r5, [r4, #0]
 800adc0:	e7de      	b.n	800ad80 <_malloc_r+0xa0>
 800adc2:	bf00      	nop
 800adc4:	200020b4 	.word	0x200020b4

0800adc8 <__ssputs_r>:
 800adc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adcc:	688e      	ldr	r6, [r1, #8]
 800adce:	429e      	cmp	r6, r3
 800add0:	4682      	mov	sl, r0
 800add2:	460c      	mov	r4, r1
 800add4:	4690      	mov	r8, r2
 800add6:	461f      	mov	r7, r3
 800add8:	d838      	bhi.n	800ae4c <__ssputs_r+0x84>
 800adda:	898a      	ldrh	r2, [r1, #12]
 800addc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ade0:	d032      	beq.n	800ae48 <__ssputs_r+0x80>
 800ade2:	6825      	ldr	r5, [r4, #0]
 800ade4:	6909      	ldr	r1, [r1, #16]
 800ade6:	eba5 0901 	sub.w	r9, r5, r1
 800adea:	6965      	ldr	r5, [r4, #20]
 800adec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adf4:	3301      	adds	r3, #1
 800adf6:	444b      	add	r3, r9
 800adf8:	106d      	asrs	r5, r5, #1
 800adfa:	429d      	cmp	r5, r3
 800adfc:	bf38      	it	cc
 800adfe:	461d      	movcc	r5, r3
 800ae00:	0553      	lsls	r3, r2, #21
 800ae02:	d531      	bpl.n	800ae68 <__ssputs_r+0xa0>
 800ae04:	4629      	mov	r1, r5
 800ae06:	f7ff ff6b 	bl	800ace0 <_malloc_r>
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	b950      	cbnz	r0, 800ae24 <__ssputs_r+0x5c>
 800ae0e:	230c      	movs	r3, #12
 800ae10:	f8ca 3000 	str.w	r3, [sl]
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae24:	6921      	ldr	r1, [r4, #16]
 800ae26:	464a      	mov	r2, r9
 800ae28:	f7fe f80c 	bl	8008e44 <memcpy>
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae36:	81a3      	strh	r3, [r4, #12]
 800ae38:	6126      	str	r6, [r4, #16]
 800ae3a:	6165      	str	r5, [r4, #20]
 800ae3c:	444e      	add	r6, r9
 800ae3e:	eba5 0509 	sub.w	r5, r5, r9
 800ae42:	6026      	str	r6, [r4, #0]
 800ae44:	60a5      	str	r5, [r4, #8]
 800ae46:	463e      	mov	r6, r7
 800ae48:	42be      	cmp	r6, r7
 800ae4a:	d900      	bls.n	800ae4e <__ssputs_r+0x86>
 800ae4c:	463e      	mov	r6, r7
 800ae4e:	6820      	ldr	r0, [r4, #0]
 800ae50:	4632      	mov	r2, r6
 800ae52:	4641      	mov	r1, r8
 800ae54:	f000 f966 	bl	800b124 <memmove>
 800ae58:	68a3      	ldr	r3, [r4, #8]
 800ae5a:	1b9b      	subs	r3, r3, r6
 800ae5c:	60a3      	str	r3, [r4, #8]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	4433      	add	r3, r6
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	2000      	movs	r0, #0
 800ae66:	e7db      	b.n	800ae20 <__ssputs_r+0x58>
 800ae68:	462a      	mov	r2, r5
 800ae6a:	f000 f981 	bl	800b170 <_realloc_r>
 800ae6e:	4606      	mov	r6, r0
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d1e1      	bne.n	800ae38 <__ssputs_r+0x70>
 800ae74:	6921      	ldr	r1, [r4, #16]
 800ae76:	4650      	mov	r0, sl
 800ae78:	f7ff fec6 	bl	800ac08 <_free_r>
 800ae7c:	e7c7      	b.n	800ae0e <__ssputs_r+0x46>
	...

0800ae80 <_svfiprintf_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	4698      	mov	r8, r3
 800ae86:	898b      	ldrh	r3, [r1, #12]
 800ae88:	061b      	lsls	r3, r3, #24
 800ae8a:	b09d      	sub	sp, #116	; 0x74
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	d50e      	bpl.n	800aeb2 <_svfiprintf_r+0x32>
 800ae94:	690b      	ldr	r3, [r1, #16]
 800ae96:	b963      	cbnz	r3, 800aeb2 <_svfiprintf_r+0x32>
 800ae98:	2140      	movs	r1, #64	; 0x40
 800ae9a:	f7ff ff21 	bl	800ace0 <_malloc_r>
 800ae9e:	6028      	str	r0, [r5, #0]
 800aea0:	6128      	str	r0, [r5, #16]
 800aea2:	b920      	cbnz	r0, 800aeae <_svfiprintf_r+0x2e>
 800aea4:	230c      	movs	r3, #12
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeac:	e0d1      	b.n	800b052 <_svfiprintf_r+0x1d2>
 800aeae:	2340      	movs	r3, #64	; 0x40
 800aeb0:	616b      	str	r3, [r5, #20]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb6:	2320      	movs	r3, #32
 800aeb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec0:	2330      	movs	r3, #48	; 0x30
 800aec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b06c <_svfiprintf_r+0x1ec>
 800aec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeca:	f04f 0901 	mov.w	r9, #1
 800aece:	4623      	mov	r3, r4
 800aed0:	469a      	mov	sl, r3
 800aed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed6:	b10a      	cbz	r2, 800aedc <_svfiprintf_r+0x5c>
 800aed8:	2a25      	cmp	r2, #37	; 0x25
 800aeda:	d1f9      	bne.n	800aed0 <_svfiprintf_r+0x50>
 800aedc:	ebba 0b04 	subs.w	fp, sl, r4
 800aee0:	d00b      	beq.n	800aefa <_svfiprintf_r+0x7a>
 800aee2:	465b      	mov	r3, fp
 800aee4:	4622      	mov	r2, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	4638      	mov	r0, r7
 800aeea:	f7ff ff6d 	bl	800adc8 <__ssputs_r>
 800aeee:	3001      	adds	r0, #1
 800aef0:	f000 80aa 	beq.w	800b048 <_svfiprintf_r+0x1c8>
 800aef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef6:	445a      	add	r2, fp
 800aef8:	9209      	str	r2, [sp, #36]	; 0x24
 800aefa:	f89a 3000 	ldrb.w	r3, [sl]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 80a2 	beq.w	800b048 <_svfiprintf_r+0x1c8>
 800af04:	2300      	movs	r3, #0
 800af06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af0e:	f10a 0a01 	add.w	sl, sl, #1
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	9307      	str	r3, [sp, #28]
 800af16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af1a:	931a      	str	r3, [sp, #104]	; 0x68
 800af1c:	4654      	mov	r4, sl
 800af1e:	2205      	movs	r2, #5
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	4851      	ldr	r0, [pc, #324]	; (800b06c <_svfiprintf_r+0x1ec>)
 800af26:	f7f5 f95b 	bl	80001e0 <memchr>
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	b9d8      	cbnz	r0, 800af66 <_svfiprintf_r+0xe6>
 800af2e:	06d0      	lsls	r0, r2, #27
 800af30:	bf44      	itt	mi
 800af32:	2320      	movmi	r3, #32
 800af34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af38:	0711      	lsls	r1, r2, #28
 800af3a:	bf44      	itt	mi
 800af3c:	232b      	movmi	r3, #43	; 0x2b
 800af3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af42:	f89a 3000 	ldrb.w	r3, [sl]
 800af46:	2b2a      	cmp	r3, #42	; 0x2a
 800af48:	d015      	beq.n	800af76 <_svfiprintf_r+0xf6>
 800af4a:	9a07      	ldr	r2, [sp, #28]
 800af4c:	4654      	mov	r4, sl
 800af4e:	2000      	movs	r0, #0
 800af50:	f04f 0c0a 	mov.w	ip, #10
 800af54:	4621      	mov	r1, r4
 800af56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5a:	3b30      	subs	r3, #48	; 0x30
 800af5c:	2b09      	cmp	r3, #9
 800af5e:	d94e      	bls.n	800affe <_svfiprintf_r+0x17e>
 800af60:	b1b0      	cbz	r0, 800af90 <_svfiprintf_r+0x110>
 800af62:	9207      	str	r2, [sp, #28]
 800af64:	e014      	b.n	800af90 <_svfiprintf_r+0x110>
 800af66:	eba0 0308 	sub.w	r3, r0, r8
 800af6a:	fa09 f303 	lsl.w	r3, r9, r3
 800af6e:	4313      	orrs	r3, r2
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	46a2      	mov	sl, r4
 800af74:	e7d2      	b.n	800af1c <_svfiprintf_r+0x9c>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	1d19      	adds	r1, r3, #4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	9103      	str	r1, [sp, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfbb      	ittet	lt
 800af82:	425b      	neglt	r3, r3
 800af84:	f042 0202 	orrlt.w	r2, r2, #2
 800af88:	9307      	strge	r3, [sp, #28]
 800af8a:	9307      	strlt	r3, [sp, #28]
 800af8c:	bfb8      	it	lt
 800af8e:	9204      	strlt	r2, [sp, #16]
 800af90:	7823      	ldrb	r3, [r4, #0]
 800af92:	2b2e      	cmp	r3, #46	; 0x2e
 800af94:	d10c      	bne.n	800afb0 <_svfiprintf_r+0x130>
 800af96:	7863      	ldrb	r3, [r4, #1]
 800af98:	2b2a      	cmp	r3, #42	; 0x2a
 800af9a:	d135      	bne.n	800b008 <_svfiprintf_r+0x188>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	1d1a      	adds	r2, r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	9203      	str	r2, [sp, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfb8      	it	lt
 800afa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afac:	3402      	adds	r4, #2
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b07c <_svfiprintf_r+0x1fc>
 800afb4:	7821      	ldrb	r1, [r4, #0]
 800afb6:	2203      	movs	r2, #3
 800afb8:	4650      	mov	r0, sl
 800afba:	f7f5 f911 	bl	80001e0 <memchr>
 800afbe:	b140      	cbz	r0, 800afd2 <_svfiprintf_r+0x152>
 800afc0:	2340      	movs	r3, #64	; 0x40
 800afc2:	eba0 000a 	sub.w	r0, r0, sl
 800afc6:	fa03 f000 	lsl.w	r0, r3, r0
 800afca:	9b04      	ldr	r3, [sp, #16]
 800afcc:	4303      	orrs	r3, r0
 800afce:	3401      	adds	r4, #1
 800afd0:	9304      	str	r3, [sp, #16]
 800afd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd6:	4826      	ldr	r0, [pc, #152]	; (800b070 <_svfiprintf_r+0x1f0>)
 800afd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afdc:	2206      	movs	r2, #6
 800afde:	f7f5 f8ff 	bl	80001e0 <memchr>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d038      	beq.n	800b058 <_svfiprintf_r+0x1d8>
 800afe6:	4b23      	ldr	r3, [pc, #140]	; (800b074 <_svfiprintf_r+0x1f4>)
 800afe8:	bb1b      	cbnz	r3, 800b032 <_svfiprintf_r+0x1b2>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	3307      	adds	r3, #7
 800afee:	f023 0307 	bic.w	r3, r3, #7
 800aff2:	3308      	adds	r3, #8
 800aff4:	9303      	str	r3, [sp, #12]
 800aff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff8:	4433      	add	r3, r6
 800affa:	9309      	str	r3, [sp, #36]	; 0x24
 800affc:	e767      	b.n	800aece <_svfiprintf_r+0x4e>
 800affe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b002:	460c      	mov	r4, r1
 800b004:	2001      	movs	r0, #1
 800b006:	e7a5      	b.n	800af54 <_svfiprintf_r+0xd4>
 800b008:	2300      	movs	r3, #0
 800b00a:	3401      	adds	r4, #1
 800b00c:	9305      	str	r3, [sp, #20]
 800b00e:	4619      	mov	r1, r3
 800b010:	f04f 0c0a 	mov.w	ip, #10
 800b014:	4620      	mov	r0, r4
 800b016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b01a:	3a30      	subs	r2, #48	; 0x30
 800b01c:	2a09      	cmp	r2, #9
 800b01e:	d903      	bls.n	800b028 <_svfiprintf_r+0x1a8>
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0c5      	beq.n	800afb0 <_svfiprintf_r+0x130>
 800b024:	9105      	str	r1, [sp, #20]
 800b026:	e7c3      	b.n	800afb0 <_svfiprintf_r+0x130>
 800b028:	fb0c 2101 	mla	r1, ip, r1, r2
 800b02c:	4604      	mov	r4, r0
 800b02e:	2301      	movs	r3, #1
 800b030:	e7f0      	b.n	800b014 <_svfiprintf_r+0x194>
 800b032:	ab03      	add	r3, sp, #12
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	462a      	mov	r2, r5
 800b038:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <_svfiprintf_r+0x1f8>)
 800b03a:	a904      	add	r1, sp, #16
 800b03c:	4638      	mov	r0, r7
 800b03e:	f7fd ffb7 	bl	8008fb0 <_printf_float>
 800b042:	1c42      	adds	r2, r0, #1
 800b044:	4606      	mov	r6, r0
 800b046:	d1d6      	bne.n	800aff6 <_svfiprintf_r+0x176>
 800b048:	89ab      	ldrh	r3, [r5, #12]
 800b04a:	065b      	lsls	r3, r3, #25
 800b04c:	f53f af2c 	bmi.w	800aea8 <_svfiprintf_r+0x28>
 800b050:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b052:	b01d      	add	sp, #116	; 0x74
 800b054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b058:	ab03      	add	r3, sp, #12
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	462a      	mov	r2, r5
 800b05e:	4b06      	ldr	r3, [pc, #24]	; (800b078 <_svfiprintf_r+0x1f8>)
 800b060:	a904      	add	r1, sp, #16
 800b062:	4638      	mov	r0, r7
 800b064:	f7fe fa48 	bl	80094f8 <_printf_i>
 800b068:	e7eb      	b.n	800b042 <_svfiprintf_r+0x1c2>
 800b06a:	bf00      	nop
 800b06c:	0800bf04 	.word	0x0800bf04
 800b070:	0800bf0e 	.word	0x0800bf0e
 800b074:	08008fb1 	.word	0x08008fb1
 800b078:	0800adc9 	.word	0x0800adc9
 800b07c:	0800bf0a 	.word	0x0800bf0a

0800b080 <_sbrk_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4d06      	ldr	r5, [pc, #24]	; (800b09c <_sbrk_r+0x1c>)
 800b084:	2300      	movs	r3, #0
 800b086:	4604      	mov	r4, r0
 800b088:	4608      	mov	r0, r1
 800b08a:	602b      	str	r3, [r5, #0]
 800b08c:	f7f6 fce8 	bl	8001a60 <_sbrk>
 800b090:	1c43      	adds	r3, r0, #1
 800b092:	d102      	bne.n	800b09a <_sbrk_r+0x1a>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	b103      	cbz	r3, 800b09a <_sbrk_r+0x1a>
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	200020bc 	.word	0x200020bc

0800b0a0 <__assert_func>:
 800b0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0a2:	4614      	mov	r4, r2
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <__assert_func+0x2c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	68d8      	ldr	r0, [r3, #12]
 800b0ae:	b14c      	cbz	r4, 800b0c4 <__assert_func+0x24>
 800b0b0:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <__assert_func+0x30>)
 800b0b2:	9100      	str	r1, [sp, #0]
 800b0b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0b8:	4906      	ldr	r1, [pc, #24]	; (800b0d4 <__assert_func+0x34>)
 800b0ba:	462b      	mov	r3, r5
 800b0bc:	f000 f80e 	bl	800b0dc <fiprintf>
 800b0c0:	f000 faac 	bl	800b61c <abort>
 800b0c4:	4b04      	ldr	r3, [pc, #16]	; (800b0d8 <__assert_func+0x38>)
 800b0c6:	461c      	mov	r4, r3
 800b0c8:	e7f3      	b.n	800b0b2 <__assert_func+0x12>
 800b0ca:	bf00      	nop
 800b0cc:	2000010c 	.word	0x2000010c
 800b0d0:	0800bf15 	.word	0x0800bf15
 800b0d4:	0800bf22 	.word	0x0800bf22
 800b0d8:	0800bf50 	.word	0x0800bf50

0800b0dc <fiprintf>:
 800b0dc:	b40e      	push	{r1, r2, r3}
 800b0de:	b503      	push	{r0, r1, lr}
 800b0e0:	4601      	mov	r1, r0
 800b0e2:	ab03      	add	r3, sp, #12
 800b0e4:	4805      	ldr	r0, [pc, #20]	; (800b0fc <fiprintf+0x20>)
 800b0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	f000 f897 	bl	800b220 <_vfiprintf_r>
 800b0f2:	b002      	add	sp, #8
 800b0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0f8:	b003      	add	sp, #12
 800b0fa:	4770      	bx	lr
 800b0fc:	2000010c 	.word	0x2000010c

0800b100 <__ascii_mbtowc>:
 800b100:	b082      	sub	sp, #8
 800b102:	b901      	cbnz	r1, 800b106 <__ascii_mbtowc+0x6>
 800b104:	a901      	add	r1, sp, #4
 800b106:	b142      	cbz	r2, 800b11a <__ascii_mbtowc+0x1a>
 800b108:	b14b      	cbz	r3, 800b11e <__ascii_mbtowc+0x1e>
 800b10a:	7813      	ldrb	r3, [r2, #0]
 800b10c:	600b      	str	r3, [r1, #0]
 800b10e:	7812      	ldrb	r2, [r2, #0]
 800b110:	1e10      	subs	r0, r2, #0
 800b112:	bf18      	it	ne
 800b114:	2001      	movne	r0, #1
 800b116:	b002      	add	sp, #8
 800b118:	4770      	bx	lr
 800b11a:	4610      	mov	r0, r2
 800b11c:	e7fb      	b.n	800b116 <__ascii_mbtowc+0x16>
 800b11e:	f06f 0001 	mvn.w	r0, #1
 800b122:	e7f8      	b.n	800b116 <__ascii_mbtowc+0x16>

0800b124 <memmove>:
 800b124:	4288      	cmp	r0, r1
 800b126:	b510      	push	{r4, lr}
 800b128:	eb01 0402 	add.w	r4, r1, r2
 800b12c:	d902      	bls.n	800b134 <memmove+0x10>
 800b12e:	4284      	cmp	r4, r0
 800b130:	4623      	mov	r3, r4
 800b132:	d807      	bhi.n	800b144 <memmove+0x20>
 800b134:	1e43      	subs	r3, r0, #1
 800b136:	42a1      	cmp	r1, r4
 800b138:	d008      	beq.n	800b14c <memmove+0x28>
 800b13a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b13e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b142:	e7f8      	b.n	800b136 <memmove+0x12>
 800b144:	4402      	add	r2, r0
 800b146:	4601      	mov	r1, r0
 800b148:	428a      	cmp	r2, r1
 800b14a:	d100      	bne.n	800b14e <memmove+0x2a>
 800b14c:	bd10      	pop	{r4, pc}
 800b14e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b156:	e7f7      	b.n	800b148 <memmove+0x24>

0800b158 <__malloc_lock>:
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <__malloc_lock+0x8>)
 800b15a:	f000 bc1f 	b.w	800b99c <__retarget_lock_acquire_recursive>
 800b15e:	bf00      	nop
 800b160:	200020c0 	.word	0x200020c0

0800b164 <__malloc_unlock>:
 800b164:	4801      	ldr	r0, [pc, #4]	; (800b16c <__malloc_unlock+0x8>)
 800b166:	f000 bc1a 	b.w	800b99e <__retarget_lock_release_recursive>
 800b16a:	bf00      	nop
 800b16c:	200020c0 	.word	0x200020c0

0800b170 <_realloc_r>:
 800b170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b174:	4680      	mov	r8, r0
 800b176:	4614      	mov	r4, r2
 800b178:	460e      	mov	r6, r1
 800b17a:	b921      	cbnz	r1, 800b186 <_realloc_r+0x16>
 800b17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b180:	4611      	mov	r1, r2
 800b182:	f7ff bdad 	b.w	800ace0 <_malloc_r>
 800b186:	b92a      	cbnz	r2, 800b194 <_realloc_r+0x24>
 800b188:	f7ff fd3e 	bl	800ac08 <_free_r>
 800b18c:	4625      	mov	r5, r4
 800b18e:	4628      	mov	r0, r5
 800b190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b194:	f000 fc6a 	bl	800ba6c <_malloc_usable_size_r>
 800b198:	4284      	cmp	r4, r0
 800b19a:	4607      	mov	r7, r0
 800b19c:	d802      	bhi.n	800b1a4 <_realloc_r+0x34>
 800b19e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1a2:	d812      	bhi.n	800b1ca <_realloc_r+0x5a>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4640      	mov	r0, r8
 800b1a8:	f7ff fd9a 	bl	800ace0 <_malloc_r>
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d0ed      	beq.n	800b18e <_realloc_r+0x1e>
 800b1b2:	42bc      	cmp	r4, r7
 800b1b4:	4622      	mov	r2, r4
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	bf28      	it	cs
 800b1ba:	463a      	movcs	r2, r7
 800b1bc:	f7fd fe42 	bl	8008e44 <memcpy>
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	f7ff fd20 	bl	800ac08 <_free_r>
 800b1c8:	e7e1      	b.n	800b18e <_realloc_r+0x1e>
 800b1ca:	4635      	mov	r5, r6
 800b1cc:	e7df      	b.n	800b18e <_realloc_r+0x1e>

0800b1ce <__sfputc_r>:
 800b1ce:	6893      	ldr	r3, [r2, #8]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	b410      	push	{r4}
 800b1d6:	6093      	str	r3, [r2, #8]
 800b1d8:	da08      	bge.n	800b1ec <__sfputc_r+0x1e>
 800b1da:	6994      	ldr	r4, [r2, #24]
 800b1dc:	42a3      	cmp	r3, r4
 800b1de:	db01      	blt.n	800b1e4 <__sfputc_r+0x16>
 800b1e0:	290a      	cmp	r1, #10
 800b1e2:	d103      	bne.n	800b1ec <__sfputc_r+0x1e>
 800b1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1e8:	f000 b94a 	b.w	800b480 <__swbuf_r>
 800b1ec:	6813      	ldr	r3, [r2, #0]
 800b1ee:	1c58      	adds	r0, r3, #1
 800b1f0:	6010      	str	r0, [r2, #0]
 800b1f2:	7019      	strb	r1, [r3, #0]
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <__sfputs_r>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	4606      	mov	r6, r0
 800b200:	460f      	mov	r7, r1
 800b202:	4614      	mov	r4, r2
 800b204:	18d5      	adds	r5, r2, r3
 800b206:	42ac      	cmp	r4, r5
 800b208:	d101      	bne.n	800b20e <__sfputs_r+0x12>
 800b20a:	2000      	movs	r0, #0
 800b20c:	e007      	b.n	800b21e <__sfputs_r+0x22>
 800b20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b212:	463a      	mov	r2, r7
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff ffda 	bl	800b1ce <__sfputc_r>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d1f3      	bne.n	800b206 <__sfputs_r+0xa>
 800b21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b220 <_vfiprintf_r>:
 800b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	460d      	mov	r5, r1
 800b226:	b09d      	sub	sp, #116	; 0x74
 800b228:	4614      	mov	r4, r2
 800b22a:	4698      	mov	r8, r3
 800b22c:	4606      	mov	r6, r0
 800b22e:	b118      	cbz	r0, 800b238 <_vfiprintf_r+0x18>
 800b230:	6983      	ldr	r3, [r0, #24]
 800b232:	b90b      	cbnz	r3, 800b238 <_vfiprintf_r+0x18>
 800b234:	f000 fb14 	bl	800b860 <__sinit>
 800b238:	4b89      	ldr	r3, [pc, #548]	; (800b460 <_vfiprintf_r+0x240>)
 800b23a:	429d      	cmp	r5, r3
 800b23c:	d11b      	bne.n	800b276 <_vfiprintf_r+0x56>
 800b23e:	6875      	ldr	r5, [r6, #4]
 800b240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b242:	07d9      	lsls	r1, r3, #31
 800b244:	d405      	bmi.n	800b252 <_vfiprintf_r+0x32>
 800b246:	89ab      	ldrh	r3, [r5, #12]
 800b248:	059a      	lsls	r2, r3, #22
 800b24a:	d402      	bmi.n	800b252 <_vfiprintf_r+0x32>
 800b24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24e:	f000 fba5 	bl	800b99c <__retarget_lock_acquire_recursive>
 800b252:	89ab      	ldrh	r3, [r5, #12]
 800b254:	071b      	lsls	r3, r3, #28
 800b256:	d501      	bpl.n	800b25c <_vfiprintf_r+0x3c>
 800b258:	692b      	ldr	r3, [r5, #16]
 800b25a:	b9eb      	cbnz	r3, 800b298 <_vfiprintf_r+0x78>
 800b25c:	4629      	mov	r1, r5
 800b25e:	4630      	mov	r0, r6
 800b260:	f000 f96e 	bl	800b540 <__swsetup_r>
 800b264:	b1c0      	cbz	r0, 800b298 <_vfiprintf_r+0x78>
 800b266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b268:	07dc      	lsls	r4, r3, #31
 800b26a:	d50e      	bpl.n	800b28a <_vfiprintf_r+0x6a>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b270:	b01d      	add	sp, #116	; 0x74
 800b272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b276:	4b7b      	ldr	r3, [pc, #492]	; (800b464 <_vfiprintf_r+0x244>)
 800b278:	429d      	cmp	r5, r3
 800b27a:	d101      	bne.n	800b280 <_vfiprintf_r+0x60>
 800b27c:	68b5      	ldr	r5, [r6, #8]
 800b27e:	e7df      	b.n	800b240 <_vfiprintf_r+0x20>
 800b280:	4b79      	ldr	r3, [pc, #484]	; (800b468 <_vfiprintf_r+0x248>)
 800b282:	429d      	cmp	r5, r3
 800b284:	bf08      	it	eq
 800b286:	68f5      	ldreq	r5, [r6, #12]
 800b288:	e7da      	b.n	800b240 <_vfiprintf_r+0x20>
 800b28a:	89ab      	ldrh	r3, [r5, #12]
 800b28c:	0598      	lsls	r0, r3, #22
 800b28e:	d4ed      	bmi.n	800b26c <_vfiprintf_r+0x4c>
 800b290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b292:	f000 fb84 	bl	800b99e <__retarget_lock_release_recursive>
 800b296:	e7e9      	b.n	800b26c <_vfiprintf_r+0x4c>
 800b298:	2300      	movs	r3, #0
 800b29a:	9309      	str	r3, [sp, #36]	; 0x24
 800b29c:	2320      	movs	r3, #32
 800b29e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a6:	2330      	movs	r3, #48	; 0x30
 800b2a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b46c <_vfiprintf_r+0x24c>
 800b2ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2b0:	f04f 0901 	mov.w	r9, #1
 800b2b4:	4623      	mov	r3, r4
 800b2b6:	469a      	mov	sl, r3
 800b2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2bc:	b10a      	cbz	r2, 800b2c2 <_vfiprintf_r+0xa2>
 800b2be:	2a25      	cmp	r2, #37	; 0x25
 800b2c0:	d1f9      	bne.n	800b2b6 <_vfiprintf_r+0x96>
 800b2c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c6:	d00b      	beq.n	800b2e0 <_vfiprintf_r+0xc0>
 800b2c8:	465b      	mov	r3, fp
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f7ff ff94 	bl	800b1fc <__sfputs_r>
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	f000 80aa 	beq.w	800b42e <_vfiprintf_r+0x20e>
 800b2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2dc:	445a      	add	r2, fp
 800b2de:	9209      	str	r2, [sp, #36]	; 0x24
 800b2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 80a2 	beq.w	800b42e <_vfiprintf_r+0x20e>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f4:	f10a 0a01 	add.w	sl, sl, #1
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	9307      	str	r3, [sp, #28]
 800b2fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b300:	931a      	str	r3, [sp, #104]	; 0x68
 800b302:	4654      	mov	r4, sl
 800b304:	2205      	movs	r2, #5
 800b306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30a:	4858      	ldr	r0, [pc, #352]	; (800b46c <_vfiprintf_r+0x24c>)
 800b30c:	f7f4 ff68 	bl	80001e0 <memchr>
 800b310:	9a04      	ldr	r2, [sp, #16]
 800b312:	b9d8      	cbnz	r0, 800b34c <_vfiprintf_r+0x12c>
 800b314:	06d1      	lsls	r1, r2, #27
 800b316:	bf44      	itt	mi
 800b318:	2320      	movmi	r3, #32
 800b31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b31e:	0713      	lsls	r3, r2, #28
 800b320:	bf44      	itt	mi
 800b322:	232b      	movmi	r3, #43	; 0x2b
 800b324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b328:	f89a 3000 	ldrb.w	r3, [sl]
 800b32c:	2b2a      	cmp	r3, #42	; 0x2a
 800b32e:	d015      	beq.n	800b35c <_vfiprintf_r+0x13c>
 800b330:	9a07      	ldr	r2, [sp, #28]
 800b332:	4654      	mov	r4, sl
 800b334:	2000      	movs	r0, #0
 800b336:	f04f 0c0a 	mov.w	ip, #10
 800b33a:	4621      	mov	r1, r4
 800b33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b340:	3b30      	subs	r3, #48	; 0x30
 800b342:	2b09      	cmp	r3, #9
 800b344:	d94e      	bls.n	800b3e4 <_vfiprintf_r+0x1c4>
 800b346:	b1b0      	cbz	r0, 800b376 <_vfiprintf_r+0x156>
 800b348:	9207      	str	r2, [sp, #28]
 800b34a:	e014      	b.n	800b376 <_vfiprintf_r+0x156>
 800b34c:	eba0 0308 	sub.w	r3, r0, r8
 800b350:	fa09 f303 	lsl.w	r3, r9, r3
 800b354:	4313      	orrs	r3, r2
 800b356:	9304      	str	r3, [sp, #16]
 800b358:	46a2      	mov	sl, r4
 800b35a:	e7d2      	b.n	800b302 <_vfiprintf_r+0xe2>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	1d19      	adds	r1, r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	9103      	str	r1, [sp, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfbb      	ittet	lt
 800b368:	425b      	neglt	r3, r3
 800b36a:	f042 0202 	orrlt.w	r2, r2, #2
 800b36e:	9307      	strge	r3, [sp, #28]
 800b370:	9307      	strlt	r3, [sp, #28]
 800b372:	bfb8      	it	lt
 800b374:	9204      	strlt	r2, [sp, #16]
 800b376:	7823      	ldrb	r3, [r4, #0]
 800b378:	2b2e      	cmp	r3, #46	; 0x2e
 800b37a:	d10c      	bne.n	800b396 <_vfiprintf_r+0x176>
 800b37c:	7863      	ldrb	r3, [r4, #1]
 800b37e:	2b2a      	cmp	r3, #42	; 0x2a
 800b380:	d135      	bne.n	800b3ee <_vfiprintf_r+0x1ce>
 800b382:	9b03      	ldr	r3, [sp, #12]
 800b384:	1d1a      	adds	r2, r3, #4
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	9203      	str	r2, [sp, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	bfb8      	it	lt
 800b38e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b392:	3402      	adds	r4, #2
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b47c <_vfiprintf_r+0x25c>
 800b39a:	7821      	ldrb	r1, [r4, #0]
 800b39c:	2203      	movs	r2, #3
 800b39e:	4650      	mov	r0, sl
 800b3a0:	f7f4 ff1e 	bl	80001e0 <memchr>
 800b3a4:	b140      	cbz	r0, 800b3b8 <_vfiprintf_r+0x198>
 800b3a6:	2340      	movs	r3, #64	; 0x40
 800b3a8:	eba0 000a 	sub.w	r0, r0, sl
 800b3ac:	fa03 f000 	lsl.w	r0, r3, r0
 800b3b0:	9b04      	ldr	r3, [sp, #16]
 800b3b2:	4303      	orrs	r3, r0
 800b3b4:	3401      	adds	r4, #1
 800b3b6:	9304      	str	r3, [sp, #16]
 800b3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3bc:	482c      	ldr	r0, [pc, #176]	; (800b470 <_vfiprintf_r+0x250>)
 800b3be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3c2:	2206      	movs	r2, #6
 800b3c4:	f7f4 ff0c 	bl	80001e0 <memchr>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d03f      	beq.n	800b44c <_vfiprintf_r+0x22c>
 800b3cc:	4b29      	ldr	r3, [pc, #164]	; (800b474 <_vfiprintf_r+0x254>)
 800b3ce:	bb1b      	cbnz	r3, 800b418 <_vfiprintf_r+0x1f8>
 800b3d0:	9b03      	ldr	r3, [sp, #12]
 800b3d2:	3307      	adds	r3, #7
 800b3d4:	f023 0307 	bic.w	r3, r3, #7
 800b3d8:	3308      	adds	r3, #8
 800b3da:	9303      	str	r3, [sp, #12]
 800b3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3de:	443b      	add	r3, r7
 800b3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e2:	e767      	b.n	800b2b4 <_vfiprintf_r+0x94>
 800b3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	e7a5      	b.n	800b33a <_vfiprintf_r+0x11a>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	3401      	adds	r4, #1
 800b3f2:	9305      	str	r3, [sp, #20]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	f04f 0c0a 	mov.w	ip, #10
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b400:	3a30      	subs	r2, #48	; 0x30
 800b402:	2a09      	cmp	r2, #9
 800b404:	d903      	bls.n	800b40e <_vfiprintf_r+0x1ee>
 800b406:	2b00      	cmp	r3, #0
 800b408:	d0c5      	beq.n	800b396 <_vfiprintf_r+0x176>
 800b40a:	9105      	str	r1, [sp, #20]
 800b40c:	e7c3      	b.n	800b396 <_vfiprintf_r+0x176>
 800b40e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b412:	4604      	mov	r4, r0
 800b414:	2301      	movs	r3, #1
 800b416:	e7f0      	b.n	800b3fa <_vfiprintf_r+0x1da>
 800b418:	ab03      	add	r3, sp, #12
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	462a      	mov	r2, r5
 800b41e:	4b16      	ldr	r3, [pc, #88]	; (800b478 <_vfiprintf_r+0x258>)
 800b420:	a904      	add	r1, sp, #16
 800b422:	4630      	mov	r0, r6
 800b424:	f7fd fdc4 	bl	8008fb0 <_printf_float>
 800b428:	4607      	mov	r7, r0
 800b42a:	1c78      	adds	r0, r7, #1
 800b42c:	d1d6      	bne.n	800b3dc <_vfiprintf_r+0x1bc>
 800b42e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b430:	07d9      	lsls	r1, r3, #31
 800b432:	d405      	bmi.n	800b440 <_vfiprintf_r+0x220>
 800b434:	89ab      	ldrh	r3, [r5, #12]
 800b436:	059a      	lsls	r2, r3, #22
 800b438:	d402      	bmi.n	800b440 <_vfiprintf_r+0x220>
 800b43a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b43c:	f000 faaf 	bl	800b99e <__retarget_lock_release_recursive>
 800b440:	89ab      	ldrh	r3, [r5, #12]
 800b442:	065b      	lsls	r3, r3, #25
 800b444:	f53f af12 	bmi.w	800b26c <_vfiprintf_r+0x4c>
 800b448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b44a:	e711      	b.n	800b270 <_vfiprintf_r+0x50>
 800b44c:	ab03      	add	r3, sp, #12
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	462a      	mov	r2, r5
 800b452:	4b09      	ldr	r3, [pc, #36]	; (800b478 <_vfiprintf_r+0x258>)
 800b454:	a904      	add	r1, sp, #16
 800b456:	4630      	mov	r0, r6
 800b458:	f7fe f84e 	bl	80094f8 <_printf_i>
 800b45c:	e7e4      	b.n	800b428 <_vfiprintf_r+0x208>
 800b45e:	bf00      	nop
 800b460:	0800c07c 	.word	0x0800c07c
 800b464:	0800c09c 	.word	0x0800c09c
 800b468:	0800c05c 	.word	0x0800c05c
 800b46c:	0800bf04 	.word	0x0800bf04
 800b470:	0800bf0e 	.word	0x0800bf0e
 800b474:	08008fb1 	.word	0x08008fb1
 800b478:	0800b1fd 	.word	0x0800b1fd
 800b47c:	0800bf0a 	.word	0x0800bf0a

0800b480 <__swbuf_r>:
 800b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b482:	460e      	mov	r6, r1
 800b484:	4614      	mov	r4, r2
 800b486:	4605      	mov	r5, r0
 800b488:	b118      	cbz	r0, 800b492 <__swbuf_r+0x12>
 800b48a:	6983      	ldr	r3, [r0, #24]
 800b48c:	b90b      	cbnz	r3, 800b492 <__swbuf_r+0x12>
 800b48e:	f000 f9e7 	bl	800b860 <__sinit>
 800b492:	4b21      	ldr	r3, [pc, #132]	; (800b518 <__swbuf_r+0x98>)
 800b494:	429c      	cmp	r4, r3
 800b496:	d12b      	bne.n	800b4f0 <__swbuf_r+0x70>
 800b498:	686c      	ldr	r4, [r5, #4]
 800b49a:	69a3      	ldr	r3, [r4, #24]
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	071a      	lsls	r2, r3, #28
 800b4a2:	d52f      	bpl.n	800b504 <__swbuf_r+0x84>
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	b36b      	cbz	r3, 800b504 <__swbuf_r+0x84>
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	6820      	ldr	r0, [r4, #0]
 800b4ac:	1ac0      	subs	r0, r0, r3
 800b4ae:	6963      	ldr	r3, [r4, #20]
 800b4b0:	b2f6      	uxtb	r6, r6
 800b4b2:	4283      	cmp	r3, r0
 800b4b4:	4637      	mov	r7, r6
 800b4b6:	dc04      	bgt.n	800b4c2 <__swbuf_r+0x42>
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f000 f93c 	bl	800b738 <_fflush_r>
 800b4c0:	bb30      	cbnz	r0, 800b510 <__swbuf_r+0x90>
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	60a3      	str	r3, [r4, #8]
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	6022      	str	r2, [r4, #0]
 800b4ce:	701e      	strb	r6, [r3, #0]
 800b4d0:	6963      	ldr	r3, [r4, #20]
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	4283      	cmp	r3, r0
 800b4d6:	d004      	beq.n	800b4e2 <__swbuf_r+0x62>
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	07db      	lsls	r3, r3, #31
 800b4dc:	d506      	bpl.n	800b4ec <__swbuf_r+0x6c>
 800b4de:	2e0a      	cmp	r6, #10
 800b4e0:	d104      	bne.n	800b4ec <__swbuf_r+0x6c>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f000 f927 	bl	800b738 <_fflush_r>
 800b4ea:	b988      	cbnz	r0, 800b510 <__swbuf_r+0x90>
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f0:	4b0a      	ldr	r3, [pc, #40]	; (800b51c <__swbuf_r+0x9c>)
 800b4f2:	429c      	cmp	r4, r3
 800b4f4:	d101      	bne.n	800b4fa <__swbuf_r+0x7a>
 800b4f6:	68ac      	ldr	r4, [r5, #8]
 800b4f8:	e7cf      	b.n	800b49a <__swbuf_r+0x1a>
 800b4fa:	4b09      	ldr	r3, [pc, #36]	; (800b520 <__swbuf_r+0xa0>)
 800b4fc:	429c      	cmp	r4, r3
 800b4fe:	bf08      	it	eq
 800b500:	68ec      	ldreq	r4, [r5, #12]
 800b502:	e7ca      	b.n	800b49a <__swbuf_r+0x1a>
 800b504:	4621      	mov	r1, r4
 800b506:	4628      	mov	r0, r5
 800b508:	f000 f81a 	bl	800b540 <__swsetup_r>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d0cb      	beq.n	800b4a8 <__swbuf_r+0x28>
 800b510:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b514:	e7ea      	b.n	800b4ec <__swbuf_r+0x6c>
 800b516:	bf00      	nop
 800b518:	0800c07c 	.word	0x0800c07c
 800b51c:	0800c09c 	.word	0x0800c09c
 800b520:	0800c05c 	.word	0x0800c05c

0800b524 <__ascii_wctomb>:
 800b524:	b149      	cbz	r1, 800b53a <__ascii_wctomb+0x16>
 800b526:	2aff      	cmp	r2, #255	; 0xff
 800b528:	bf85      	ittet	hi
 800b52a:	238a      	movhi	r3, #138	; 0x8a
 800b52c:	6003      	strhi	r3, [r0, #0]
 800b52e:	700a      	strbls	r2, [r1, #0]
 800b530:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b534:	bf98      	it	ls
 800b536:	2001      	movls	r0, #1
 800b538:	4770      	bx	lr
 800b53a:	4608      	mov	r0, r1
 800b53c:	4770      	bx	lr
	...

0800b540 <__swsetup_r>:
 800b540:	4b32      	ldr	r3, [pc, #200]	; (800b60c <__swsetup_r+0xcc>)
 800b542:	b570      	push	{r4, r5, r6, lr}
 800b544:	681d      	ldr	r5, [r3, #0]
 800b546:	4606      	mov	r6, r0
 800b548:	460c      	mov	r4, r1
 800b54a:	b125      	cbz	r5, 800b556 <__swsetup_r+0x16>
 800b54c:	69ab      	ldr	r3, [r5, #24]
 800b54e:	b913      	cbnz	r3, 800b556 <__swsetup_r+0x16>
 800b550:	4628      	mov	r0, r5
 800b552:	f000 f985 	bl	800b860 <__sinit>
 800b556:	4b2e      	ldr	r3, [pc, #184]	; (800b610 <__swsetup_r+0xd0>)
 800b558:	429c      	cmp	r4, r3
 800b55a:	d10f      	bne.n	800b57c <__swsetup_r+0x3c>
 800b55c:	686c      	ldr	r4, [r5, #4]
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b564:	0719      	lsls	r1, r3, #28
 800b566:	d42c      	bmi.n	800b5c2 <__swsetup_r+0x82>
 800b568:	06dd      	lsls	r5, r3, #27
 800b56a:	d411      	bmi.n	800b590 <__swsetup_r+0x50>
 800b56c:	2309      	movs	r3, #9
 800b56e:	6033      	str	r3, [r6, #0]
 800b570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b574:	81a3      	strh	r3, [r4, #12]
 800b576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b57a:	e03e      	b.n	800b5fa <__swsetup_r+0xba>
 800b57c:	4b25      	ldr	r3, [pc, #148]	; (800b614 <__swsetup_r+0xd4>)
 800b57e:	429c      	cmp	r4, r3
 800b580:	d101      	bne.n	800b586 <__swsetup_r+0x46>
 800b582:	68ac      	ldr	r4, [r5, #8]
 800b584:	e7eb      	b.n	800b55e <__swsetup_r+0x1e>
 800b586:	4b24      	ldr	r3, [pc, #144]	; (800b618 <__swsetup_r+0xd8>)
 800b588:	429c      	cmp	r4, r3
 800b58a:	bf08      	it	eq
 800b58c:	68ec      	ldreq	r4, [r5, #12]
 800b58e:	e7e6      	b.n	800b55e <__swsetup_r+0x1e>
 800b590:	0758      	lsls	r0, r3, #29
 800b592:	d512      	bpl.n	800b5ba <__swsetup_r+0x7a>
 800b594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b596:	b141      	cbz	r1, 800b5aa <__swsetup_r+0x6a>
 800b598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b59c:	4299      	cmp	r1, r3
 800b59e:	d002      	beq.n	800b5a6 <__swsetup_r+0x66>
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7ff fb31 	bl	800ac08 <_free_r>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5b0:	81a3      	strh	r3, [r4, #12]
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	6063      	str	r3, [r4, #4]
 800b5b6:	6923      	ldr	r3, [r4, #16]
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f043 0308 	orr.w	r3, r3, #8
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	6923      	ldr	r3, [r4, #16]
 800b5c4:	b94b      	cbnz	r3, 800b5da <__swsetup_r+0x9a>
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5d0:	d003      	beq.n	800b5da <__swsetup_r+0x9a>
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f000 fa09 	bl	800b9ec <__smakebuf_r>
 800b5da:	89a0      	ldrh	r0, [r4, #12]
 800b5dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5e0:	f010 0301 	ands.w	r3, r0, #1
 800b5e4:	d00a      	beq.n	800b5fc <__swsetup_r+0xbc>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60a3      	str	r3, [r4, #8]
 800b5ea:	6963      	ldr	r3, [r4, #20]
 800b5ec:	425b      	negs	r3, r3
 800b5ee:	61a3      	str	r3, [r4, #24]
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	b943      	cbnz	r3, 800b606 <__swsetup_r+0xc6>
 800b5f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5f8:	d1ba      	bne.n	800b570 <__swsetup_r+0x30>
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	0781      	lsls	r1, r0, #30
 800b5fe:	bf58      	it	pl
 800b600:	6963      	ldrpl	r3, [r4, #20]
 800b602:	60a3      	str	r3, [r4, #8]
 800b604:	e7f4      	b.n	800b5f0 <__swsetup_r+0xb0>
 800b606:	2000      	movs	r0, #0
 800b608:	e7f7      	b.n	800b5fa <__swsetup_r+0xba>
 800b60a:	bf00      	nop
 800b60c:	2000010c 	.word	0x2000010c
 800b610:	0800c07c 	.word	0x0800c07c
 800b614:	0800c09c 	.word	0x0800c09c
 800b618:	0800c05c 	.word	0x0800c05c

0800b61c <abort>:
 800b61c:	b508      	push	{r3, lr}
 800b61e:	2006      	movs	r0, #6
 800b620:	f000 fa54 	bl	800bacc <raise>
 800b624:	2001      	movs	r0, #1
 800b626:	f7f6 f9a3 	bl	8001970 <_exit>
	...

0800b62c <__sflush_r>:
 800b62c:	898a      	ldrh	r2, [r1, #12]
 800b62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b632:	4605      	mov	r5, r0
 800b634:	0710      	lsls	r0, r2, #28
 800b636:	460c      	mov	r4, r1
 800b638:	d458      	bmi.n	800b6ec <__sflush_r+0xc0>
 800b63a:	684b      	ldr	r3, [r1, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dc05      	bgt.n	800b64c <__sflush_r+0x20>
 800b640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b642:	2b00      	cmp	r3, #0
 800b644:	dc02      	bgt.n	800b64c <__sflush_r+0x20>
 800b646:	2000      	movs	r0, #0
 800b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b64e:	2e00      	cmp	r6, #0
 800b650:	d0f9      	beq.n	800b646 <__sflush_r+0x1a>
 800b652:	2300      	movs	r3, #0
 800b654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b658:	682f      	ldr	r7, [r5, #0]
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	d032      	beq.n	800b6c4 <__sflush_r+0x98>
 800b65e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	075a      	lsls	r2, r3, #29
 800b664:	d505      	bpl.n	800b672 <__sflush_r+0x46>
 800b666:	6863      	ldr	r3, [r4, #4]
 800b668:	1ac0      	subs	r0, r0, r3
 800b66a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b66c:	b10b      	cbz	r3, 800b672 <__sflush_r+0x46>
 800b66e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b670:	1ac0      	subs	r0, r0, r3
 800b672:	2300      	movs	r3, #0
 800b674:	4602      	mov	r2, r0
 800b676:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b678:	6a21      	ldr	r1, [r4, #32]
 800b67a:	4628      	mov	r0, r5
 800b67c:	47b0      	blx	r6
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	d106      	bne.n	800b692 <__sflush_r+0x66>
 800b684:	6829      	ldr	r1, [r5, #0]
 800b686:	291d      	cmp	r1, #29
 800b688:	d82c      	bhi.n	800b6e4 <__sflush_r+0xb8>
 800b68a:	4a2a      	ldr	r2, [pc, #168]	; (800b734 <__sflush_r+0x108>)
 800b68c:	40ca      	lsrs	r2, r1
 800b68e:	07d6      	lsls	r6, r2, #31
 800b690:	d528      	bpl.n	800b6e4 <__sflush_r+0xb8>
 800b692:	2200      	movs	r2, #0
 800b694:	6062      	str	r2, [r4, #4]
 800b696:	04d9      	lsls	r1, r3, #19
 800b698:	6922      	ldr	r2, [r4, #16]
 800b69a:	6022      	str	r2, [r4, #0]
 800b69c:	d504      	bpl.n	800b6a8 <__sflush_r+0x7c>
 800b69e:	1c42      	adds	r2, r0, #1
 800b6a0:	d101      	bne.n	800b6a6 <__sflush_r+0x7a>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	b903      	cbnz	r3, 800b6a8 <__sflush_r+0x7c>
 800b6a6:	6560      	str	r0, [r4, #84]	; 0x54
 800b6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6aa:	602f      	str	r7, [r5, #0]
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	d0ca      	beq.n	800b646 <__sflush_r+0x1a>
 800b6b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6b4:	4299      	cmp	r1, r3
 800b6b6:	d002      	beq.n	800b6be <__sflush_r+0x92>
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f7ff faa5 	bl	800ac08 <_free_r>
 800b6be:	2000      	movs	r0, #0
 800b6c0:	6360      	str	r0, [r4, #52]	; 0x34
 800b6c2:	e7c1      	b.n	800b648 <__sflush_r+0x1c>
 800b6c4:	6a21      	ldr	r1, [r4, #32]
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	47b0      	blx	r6
 800b6cc:	1c41      	adds	r1, r0, #1
 800b6ce:	d1c7      	bne.n	800b660 <__sflush_r+0x34>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d0c4      	beq.n	800b660 <__sflush_r+0x34>
 800b6d6:	2b1d      	cmp	r3, #29
 800b6d8:	d001      	beq.n	800b6de <__sflush_r+0xb2>
 800b6da:	2b16      	cmp	r3, #22
 800b6dc:	d101      	bne.n	800b6e2 <__sflush_r+0xb6>
 800b6de:	602f      	str	r7, [r5, #0]
 800b6e0:	e7b1      	b.n	800b646 <__sflush_r+0x1a>
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e8:	81a3      	strh	r3, [r4, #12]
 800b6ea:	e7ad      	b.n	800b648 <__sflush_r+0x1c>
 800b6ec:	690f      	ldr	r7, [r1, #16]
 800b6ee:	2f00      	cmp	r7, #0
 800b6f0:	d0a9      	beq.n	800b646 <__sflush_r+0x1a>
 800b6f2:	0793      	lsls	r3, r2, #30
 800b6f4:	680e      	ldr	r6, [r1, #0]
 800b6f6:	bf08      	it	eq
 800b6f8:	694b      	ldreq	r3, [r1, #20]
 800b6fa:	600f      	str	r7, [r1, #0]
 800b6fc:	bf18      	it	ne
 800b6fe:	2300      	movne	r3, #0
 800b700:	eba6 0807 	sub.w	r8, r6, r7
 800b704:	608b      	str	r3, [r1, #8]
 800b706:	f1b8 0f00 	cmp.w	r8, #0
 800b70a:	dd9c      	ble.n	800b646 <__sflush_r+0x1a>
 800b70c:	6a21      	ldr	r1, [r4, #32]
 800b70e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b710:	4643      	mov	r3, r8
 800b712:	463a      	mov	r2, r7
 800b714:	4628      	mov	r0, r5
 800b716:	47b0      	blx	r6
 800b718:	2800      	cmp	r0, #0
 800b71a:	dc06      	bgt.n	800b72a <__sflush_r+0xfe>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b722:	81a3      	strh	r3, [r4, #12]
 800b724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b728:	e78e      	b.n	800b648 <__sflush_r+0x1c>
 800b72a:	4407      	add	r7, r0
 800b72c:	eba8 0800 	sub.w	r8, r8, r0
 800b730:	e7e9      	b.n	800b706 <__sflush_r+0xda>
 800b732:	bf00      	nop
 800b734:	20400001 	.word	0x20400001

0800b738 <_fflush_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	690b      	ldr	r3, [r1, #16]
 800b73c:	4605      	mov	r5, r0
 800b73e:	460c      	mov	r4, r1
 800b740:	b913      	cbnz	r3, 800b748 <_fflush_r+0x10>
 800b742:	2500      	movs	r5, #0
 800b744:	4628      	mov	r0, r5
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	b118      	cbz	r0, 800b752 <_fflush_r+0x1a>
 800b74a:	6983      	ldr	r3, [r0, #24]
 800b74c:	b90b      	cbnz	r3, 800b752 <_fflush_r+0x1a>
 800b74e:	f000 f887 	bl	800b860 <__sinit>
 800b752:	4b14      	ldr	r3, [pc, #80]	; (800b7a4 <_fflush_r+0x6c>)
 800b754:	429c      	cmp	r4, r3
 800b756:	d11b      	bne.n	800b790 <_fflush_r+0x58>
 800b758:	686c      	ldr	r4, [r5, #4]
 800b75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0ef      	beq.n	800b742 <_fflush_r+0xa>
 800b762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b764:	07d0      	lsls	r0, r2, #31
 800b766:	d404      	bmi.n	800b772 <_fflush_r+0x3a>
 800b768:	0599      	lsls	r1, r3, #22
 800b76a:	d402      	bmi.n	800b772 <_fflush_r+0x3a>
 800b76c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b76e:	f000 f915 	bl	800b99c <__retarget_lock_acquire_recursive>
 800b772:	4628      	mov	r0, r5
 800b774:	4621      	mov	r1, r4
 800b776:	f7ff ff59 	bl	800b62c <__sflush_r>
 800b77a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b77c:	07da      	lsls	r2, r3, #31
 800b77e:	4605      	mov	r5, r0
 800b780:	d4e0      	bmi.n	800b744 <_fflush_r+0xc>
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	059b      	lsls	r3, r3, #22
 800b786:	d4dd      	bmi.n	800b744 <_fflush_r+0xc>
 800b788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b78a:	f000 f908 	bl	800b99e <__retarget_lock_release_recursive>
 800b78e:	e7d9      	b.n	800b744 <_fflush_r+0xc>
 800b790:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <_fflush_r+0x70>)
 800b792:	429c      	cmp	r4, r3
 800b794:	d101      	bne.n	800b79a <_fflush_r+0x62>
 800b796:	68ac      	ldr	r4, [r5, #8]
 800b798:	e7df      	b.n	800b75a <_fflush_r+0x22>
 800b79a:	4b04      	ldr	r3, [pc, #16]	; (800b7ac <_fflush_r+0x74>)
 800b79c:	429c      	cmp	r4, r3
 800b79e:	bf08      	it	eq
 800b7a0:	68ec      	ldreq	r4, [r5, #12]
 800b7a2:	e7da      	b.n	800b75a <_fflush_r+0x22>
 800b7a4:	0800c07c 	.word	0x0800c07c
 800b7a8:	0800c09c 	.word	0x0800c09c
 800b7ac:	0800c05c 	.word	0x0800c05c

0800b7b0 <std>:
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7be:	6083      	str	r3, [r0, #8]
 800b7c0:	8181      	strh	r1, [r0, #12]
 800b7c2:	6643      	str	r3, [r0, #100]	; 0x64
 800b7c4:	81c2      	strh	r2, [r0, #14]
 800b7c6:	6183      	str	r3, [r0, #24]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	2208      	movs	r2, #8
 800b7cc:	305c      	adds	r0, #92	; 0x5c
 800b7ce:	f7fd fb47 	bl	8008e60 <memset>
 800b7d2:	4b05      	ldr	r3, [pc, #20]	; (800b7e8 <std+0x38>)
 800b7d4:	6263      	str	r3, [r4, #36]	; 0x24
 800b7d6:	4b05      	ldr	r3, [pc, #20]	; (800b7ec <std+0x3c>)
 800b7d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7da:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <std+0x40>)
 800b7dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7de:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <std+0x44>)
 800b7e0:	6224      	str	r4, [r4, #32]
 800b7e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b7e4:	bd10      	pop	{r4, pc}
 800b7e6:	bf00      	nop
 800b7e8:	0800bb05 	.word	0x0800bb05
 800b7ec:	0800bb27 	.word	0x0800bb27
 800b7f0:	0800bb5f 	.word	0x0800bb5f
 800b7f4:	0800bb83 	.word	0x0800bb83

0800b7f8 <_cleanup_r>:
 800b7f8:	4901      	ldr	r1, [pc, #4]	; (800b800 <_cleanup_r+0x8>)
 800b7fa:	f000 b8af 	b.w	800b95c <_fwalk_reent>
 800b7fe:	bf00      	nop
 800b800:	0800b739 	.word	0x0800b739

0800b804 <__sfmoreglue>:
 800b804:	b570      	push	{r4, r5, r6, lr}
 800b806:	2268      	movs	r2, #104	; 0x68
 800b808:	1e4d      	subs	r5, r1, #1
 800b80a:	4355      	muls	r5, r2
 800b80c:	460e      	mov	r6, r1
 800b80e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b812:	f7ff fa65 	bl	800ace0 <_malloc_r>
 800b816:	4604      	mov	r4, r0
 800b818:	b140      	cbz	r0, 800b82c <__sfmoreglue+0x28>
 800b81a:	2100      	movs	r1, #0
 800b81c:	e9c0 1600 	strd	r1, r6, [r0]
 800b820:	300c      	adds	r0, #12
 800b822:	60a0      	str	r0, [r4, #8]
 800b824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b828:	f7fd fb1a 	bl	8008e60 <memset>
 800b82c:	4620      	mov	r0, r4
 800b82e:	bd70      	pop	{r4, r5, r6, pc}

0800b830 <__sfp_lock_acquire>:
 800b830:	4801      	ldr	r0, [pc, #4]	; (800b838 <__sfp_lock_acquire+0x8>)
 800b832:	f000 b8b3 	b.w	800b99c <__retarget_lock_acquire_recursive>
 800b836:	bf00      	nop
 800b838:	200020c1 	.word	0x200020c1

0800b83c <__sfp_lock_release>:
 800b83c:	4801      	ldr	r0, [pc, #4]	; (800b844 <__sfp_lock_release+0x8>)
 800b83e:	f000 b8ae 	b.w	800b99e <__retarget_lock_release_recursive>
 800b842:	bf00      	nop
 800b844:	200020c1 	.word	0x200020c1

0800b848 <__sinit_lock_acquire>:
 800b848:	4801      	ldr	r0, [pc, #4]	; (800b850 <__sinit_lock_acquire+0x8>)
 800b84a:	f000 b8a7 	b.w	800b99c <__retarget_lock_acquire_recursive>
 800b84e:	bf00      	nop
 800b850:	200020c2 	.word	0x200020c2

0800b854 <__sinit_lock_release>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__sinit_lock_release+0x8>)
 800b856:	f000 b8a2 	b.w	800b99e <__retarget_lock_release_recursive>
 800b85a:	bf00      	nop
 800b85c:	200020c2 	.word	0x200020c2

0800b860 <__sinit>:
 800b860:	b510      	push	{r4, lr}
 800b862:	4604      	mov	r4, r0
 800b864:	f7ff fff0 	bl	800b848 <__sinit_lock_acquire>
 800b868:	69a3      	ldr	r3, [r4, #24]
 800b86a:	b11b      	cbz	r3, 800b874 <__sinit+0x14>
 800b86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b870:	f7ff bff0 	b.w	800b854 <__sinit_lock_release>
 800b874:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b878:	6523      	str	r3, [r4, #80]	; 0x50
 800b87a:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <__sinit+0x68>)
 800b87c:	4a13      	ldr	r2, [pc, #76]	; (800b8cc <__sinit+0x6c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	62a2      	str	r2, [r4, #40]	; 0x28
 800b882:	42a3      	cmp	r3, r4
 800b884:	bf04      	itt	eq
 800b886:	2301      	moveq	r3, #1
 800b888:	61a3      	streq	r3, [r4, #24]
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 f820 	bl	800b8d0 <__sfp>
 800b890:	6060      	str	r0, [r4, #4]
 800b892:	4620      	mov	r0, r4
 800b894:	f000 f81c 	bl	800b8d0 <__sfp>
 800b898:	60a0      	str	r0, [r4, #8]
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 f818 	bl	800b8d0 <__sfp>
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	60e0      	str	r0, [r4, #12]
 800b8a4:	2104      	movs	r1, #4
 800b8a6:	6860      	ldr	r0, [r4, #4]
 800b8a8:	f7ff ff82 	bl	800b7b0 <std>
 800b8ac:	68a0      	ldr	r0, [r4, #8]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	2109      	movs	r1, #9
 800b8b2:	f7ff ff7d 	bl	800b7b0 <std>
 800b8b6:	68e0      	ldr	r0, [r4, #12]
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	2112      	movs	r1, #18
 800b8bc:	f7ff ff78 	bl	800b7b0 <std>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	61a3      	str	r3, [r4, #24]
 800b8c4:	e7d2      	b.n	800b86c <__sinit+0xc>
 800b8c6:	bf00      	nop
 800b8c8:	0800bce0 	.word	0x0800bce0
 800b8cc:	0800b7f9 	.word	0x0800b7f9

0800b8d0 <__sfp>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	f7ff ffac 	bl	800b830 <__sfp_lock_acquire>
 800b8d8:	4b1e      	ldr	r3, [pc, #120]	; (800b954 <__sfp+0x84>)
 800b8da:	681e      	ldr	r6, [r3, #0]
 800b8dc:	69b3      	ldr	r3, [r6, #24]
 800b8de:	b913      	cbnz	r3, 800b8e6 <__sfp+0x16>
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff ffbd 	bl	800b860 <__sinit>
 800b8e6:	3648      	adds	r6, #72	; 0x48
 800b8e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	d503      	bpl.n	800b8f8 <__sfp+0x28>
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	b30b      	cbz	r3, 800b938 <__sfp+0x68>
 800b8f4:	6836      	ldr	r6, [r6, #0]
 800b8f6:	e7f7      	b.n	800b8e8 <__sfp+0x18>
 800b8f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8fc:	b9d5      	cbnz	r5, 800b934 <__sfp+0x64>
 800b8fe:	4b16      	ldr	r3, [pc, #88]	; (800b958 <__sfp+0x88>)
 800b900:	60e3      	str	r3, [r4, #12]
 800b902:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b906:	6665      	str	r5, [r4, #100]	; 0x64
 800b908:	f000 f847 	bl	800b99a <__retarget_lock_init_recursive>
 800b90c:	f7ff ff96 	bl	800b83c <__sfp_lock_release>
 800b910:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b914:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b918:	6025      	str	r5, [r4, #0]
 800b91a:	61a5      	str	r5, [r4, #24]
 800b91c:	2208      	movs	r2, #8
 800b91e:	4629      	mov	r1, r5
 800b920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b924:	f7fd fa9c 	bl	8008e60 <memset>
 800b928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b92c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b930:	4620      	mov	r0, r4
 800b932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b934:	3468      	adds	r4, #104	; 0x68
 800b936:	e7d9      	b.n	800b8ec <__sfp+0x1c>
 800b938:	2104      	movs	r1, #4
 800b93a:	4638      	mov	r0, r7
 800b93c:	f7ff ff62 	bl	800b804 <__sfmoreglue>
 800b940:	4604      	mov	r4, r0
 800b942:	6030      	str	r0, [r6, #0]
 800b944:	2800      	cmp	r0, #0
 800b946:	d1d5      	bne.n	800b8f4 <__sfp+0x24>
 800b948:	f7ff ff78 	bl	800b83c <__sfp_lock_release>
 800b94c:	230c      	movs	r3, #12
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	e7ee      	b.n	800b930 <__sfp+0x60>
 800b952:	bf00      	nop
 800b954:	0800bce0 	.word	0x0800bce0
 800b958:	ffff0001 	.word	0xffff0001

0800b95c <_fwalk_reent>:
 800b95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b960:	4606      	mov	r6, r0
 800b962:	4688      	mov	r8, r1
 800b964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b968:	2700      	movs	r7, #0
 800b96a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b96e:	f1b9 0901 	subs.w	r9, r9, #1
 800b972:	d505      	bpl.n	800b980 <_fwalk_reent+0x24>
 800b974:	6824      	ldr	r4, [r4, #0]
 800b976:	2c00      	cmp	r4, #0
 800b978:	d1f7      	bne.n	800b96a <_fwalk_reent+0xe>
 800b97a:	4638      	mov	r0, r7
 800b97c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b980:	89ab      	ldrh	r3, [r5, #12]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d907      	bls.n	800b996 <_fwalk_reent+0x3a>
 800b986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b98a:	3301      	adds	r3, #1
 800b98c:	d003      	beq.n	800b996 <_fwalk_reent+0x3a>
 800b98e:	4629      	mov	r1, r5
 800b990:	4630      	mov	r0, r6
 800b992:	47c0      	blx	r8
 800b994:	4307      	orrs	r7, r0
 800b996:	3568      	adds	r5, #104	; 0x68
 800b998:	e7e9      	b.n	800b96e <_fwalk_reent+0x12>

0800b99a <__retarget_lock_init_recursive>:
 800b99a:	4770      	bx	lr

0800b99c <__retarget_lock_acquire_recursive>:
 800b99c:	4770      	bx	lr

0800b99e <__retarget_lock_release_recursive>:
 800b99e:	4770      	bx	lr

0800b9a0 <__swhatbuf_r>:
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	460e      	mov	r6, r1
 800b9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a8:	2900      	cmp	r1, #0
 800b9aa:	b096      	sub	sp, #88	; 0x58
 800b9ac:	4614      	mov	r4, r2
 800b9ae:	461d      	mov	r5, r3
 800b9b0:	da08      	bge.n	800b9c4 <__swhatbuf_r+0x24>
 800b9b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	602a      	str	r2, [r5, #0]
 800b9ba:	061a      	lsls	r2, r3, #24
 800b9bc:	d410      	bmi.n	800b9e0 <__swhatbuf_r+0x40>
 800b9be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9c2:	e00e      	b.n	800b9e2 <__swhatbuf_r+0x42>
 800b9c4:	466a      	mov	r2, sp
 800b9c6:	f000 f903 	bl	800bbd0 <_fstat_r>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	dbf1      	blt.n	800b9b2 <__swhatbuf_r+0x12>
 800b9ce:	9a01      	ldr	r2, [sp, #4]
 800b9d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9d8:	425a      	negs	r2, r3
 800b9da:	415a      	adcs	r2, r3
 800b9dc:	602a      	str	r2, [r5, #0]
 800b9de:	e7ee      	b.n	800b9be <__swhatbuf_r+0x1e>
 800b9e0:	2340      	movs	r3, #64	; 0x40
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	b016      	add	sp, #88	; 0x58
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b9ec <__smakebuf_r>:
 800b9ec:	898b      	ldrh	r3, [r1, #12]
 800b9ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9f0:	079d      	lsls	r5, r3, #30
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	d507      	bpl.n	800ba08 <__smakebuf_r+0x1c>
 800b9f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	2301      	movs	r3, #1
 800ba02:	6163      	str	r3, [r4, #20]
 800ba04:	b002      	add	sp, #8
 800ba06:	bd70      	pop	{r4, r5, r6, pc}
 800ba08:	ab01      	add	r3, sp, #4
 800ba0a:	466a      	mov	r2, sp
 800ba0c:	f7ff ffc8 	bl	800b9a0 <__swhatbuf_r>
 800ba10:	9900      	ldr	r1, [sp, #0]
 800ba12:	4605      	mov	r5, r0
 800ba14:	4630      	mov	r0, r6
 800ba16:	f7ff f963 	bl	800ace0 <_malloc_r>
 800ba1a:	b948      	cbnz	r0, 800ba30 <__smakebuf_r+0x44>
 800ba1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba20:	059a      	lsls	r2, r3, #22
 800ba22:	d4ef      	bmi.n	800ba04 <__smakebuf_r+0x18>
 800ba24:	f023 0303 	bic.w	r3, r3, #3
 800ba28:	f043 0302 	orr.w	r3, r3, #2
 800ba2c:	81a3      	strh	r3, [r4, #12]
 800ba2e:	e7e3      	b.n	800b9f8 <__smakebuf_r+0xc>
 800ba30:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <__smakebuf_r+0x7c>)
 800ba32:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	6020      	str	r0, [r4, #0]
 800ba38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba3c:	81a3      	strh	r3, [r4, #12]
 800ba3e:	9b00      	ldr	r3, [sp, #0]
 800ba40:	6163      	str	r3, [r4, #20]
 800ba42:	9b01      	ldr	r3, [sp, #4]
 800ba44:	6120      	str	r0, [r4, #16]
 800ba46:	b15b      	cbz	r3, 800ba60 <__smakebuf_r+0x74>
 800ba48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f000 f8d1 	bl	800bbf4 <_isatty_r>
 800ba52:	b128      	cbz	r0, 800ba60 <__smakebuf_r+0x74>
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	f023 0303 	bic.w	r3, r3, #3
 800ba5a:	f043 0301 	orr.w	r3, r3, #1
 800ba5e:	81a3      	strh	r3, [r4, #12]
 800ba60:	89a0      	ldrh	r0, [r4, #12]
 800ba62:	4305      	orrs	r5, r0
 800ba64:	81a5      	strh	r5, [r4, #12]
 800ba66:	e7cd      	b.n	800ba04 <__smakebuf_r+0x18>
 800ba68:	0800b7f9 	.word	0x0800b7f9

0800ba6c <_malloc_usable_size_r>:
 800ba6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba70:	1f18      	subs	r0, r3, #4
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	bfbc      	itt	lt
 800ba76:	580b      	ldrlt	r3, [r1, r0]
 800ba78:	18c0      	addlt	r0, r0, r3
 800ba7a:	4770      	bx	lr

0800ba7c <_raise_r>:
 800ba7c:	291f      	cmp	r1, #31
 800ba7e:	b538      	push	{r3, r4, r5, lr}
 800ba80:	4604      	mov	r4, r0
 800ba82:	460d      	mov	r5, r1
 800ba84:	d904      	bls.n	800ba90 <_raise_r+0x14>
 800ba86:	2316      	movs	r3, #22
 800ba88:	6003      	str	r3, [r0, #0]
 800ba8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba92:	b112      	cbz	r2, 800ba9a <_raise_r+0x1e>
 800ba94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba98:	b94b      	cbnz	r3, 800baae <_raise_r+0x32>
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 f830 	bl	800bb00 <_getpid_r>
 800baa0:	462a      	mov	r2, r5
 800baa2:	4601      	mov	r1, r0
 800baa4:	4620      	mov	r0, r4
 800baa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baaa:	f000 b817 	b.w	800badc <_kill_r>
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d00a      	beq.n	800bac8 <_raise_r+0x4c>
 800bab2:	1c59      	adds	r1, r3, #1
 800bab4:	d103      	bne.n	800babe <_raise_r+0x42>
 800bab6:	2316      	movs	r3, #22
 800bab8:	6003      	str	r3, [r0, #0]
 800baba:	2001      	movs	r0, #1
 800babc:	e7e7      	b.n	800ba8e <_raise_r+0x12>
 800babe:	2400      	movs	r4, #0
 800bac0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bac4:	4628      	mov	r0, r5
 800bac6:	4798      	blx	r3
 800bac8:	2000      	movs	r0, #0
 800baca:	e7e0      	b.n	800ba8e <_raise_r+0x12>

0800bacc <raise>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <raise+0xc>)
 800bace:	4601      	mov	r1, r0
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f7ff bfd3 	b.w	800ba7c <_raise_r>
 800bad6:	bf00      	nop
 800bad8:	2000010c 	.word	0x2000010c

0800badc <_kill_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4d07      	ldr	r5, [pc, #28]	; (800bafc <_kill_r+0x20>)
 800bae0:	2300      	movs	r3, #0
 800bae2:	4604      	mov	r4, r0
 800bae4:	4608      	mov	r0, r1
 800bae6:	4611      	mov	r1, r2
 800bae8:	602b      	str	r3, [r5, #0]
 800baea:	f7f5 ff31 	bl	8001950 <_kill>
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	d102      	bne.n	800baf8 <_kill_r+0x1c>
 800baf2:	682b      	ldr	r3, [r5, #0]
 800baf4:	b103      	cbz	r3, 800baf8 <_kill_r+0x1c>
 800baf6:	6023      	str	r3, [r4, #0]
 800baf8:	bd38      	pop	{r3, r4, r5, pc}
 800bafa:	bf00      	nop
 800bafc:	200020bc 	.word	0x200020bc

0800bb00 <_getpid_r>:
 800bb00:	f7f5 bf1e 	b.w	8001940 <_getpid>

0800bb04 <__sread>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	460c      	mov	r4, r1
 800bb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb0c:	f000 f894 	bl	800bc38 <_read_r>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	bfab      	itete	ge
 800bb14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb16:	89a3      	ldrhlt	r3, [r4, #12]
 800bb18:	181b      	addge	r3, r3, r0
 800bb1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb1e:	bfac      	ite	ge
 800bb20:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb22:	81a3      	strhlt	r3, [r4, #12]
 800bb24:	bd10      	pop	{r4, pc}

0800bb26 <__swrite>:
 800bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2a:	461f      	mov	r7, r3
 800bb2c:	898b      	ldrh	r3, [r1, #12]
 800bb2e:	05db      	lsls	r3, r3, #23
 800bb30:	4605      	mov	r5, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	4616      	mov	r6, r2
 800bb36:	d505      	bpl.n	800bb44 <__swrite+0x1e>
 800bb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f000 f868 	bl	800bc14 <_lseek_r>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb4e:	81a3      	strh	r3, [r4, #12]
 800bb50:	4632      	mov	r2, r6
 800bb52:	463b      	mov	r3, r7
 800bb54:	4628      	mov	r0, r5
 800bb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5a:	f000 b817 	b.w	800bb8c <_write_r>

0800bb5e <__sseek>:
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb66:	f000 f855 	bl	800bc14 <_lseek_r>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	bf15      	itete	ne
 800bb70:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb7a:	81a3      	strheq	r3, [r4, #12]
 800bb7c:	bf18      	it	ne
 800bb7e:	81a3      	strhne	r3, [r4, #12]
 800bb80:	bd10      	pop	{r4, pc}

0800bb82 <__sclose>:
 800bb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb86:	f000 b813 	b.w	800bbb0 <_close_r>
	...

0800bb8c <_write_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	; (800bbac <_write_r+0x20>)
 800bb90:	4604      	mov	r4, r0
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	602a      	str	r2, [r5, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f7f5 ff0f 	bl	80019be <_write>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_write_r+0x1e>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_write_r+0x1e>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	200020bc 	.word	0x200020bc

0800bbb0 <_close_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d06      	ldr	r5, [pc, #24]	; (800bbcc <_close_r+0x1c>)
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	f7f5 ff1b 	bl	80019f6 <_close>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_close_r+0x1a>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_close_r+0x1a>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	200020bc 	.word	0x200020bc

0800bbd0 <_fstat_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4d07      	ldr	r5, [pc, #28]	; (800bbf0 <_fstat_r+0x20>)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	4611      	mov	r1, r2
 800bbdc:	602b      	str	r3, [r5, #0]
 800bbde:	f7f5 ff16 	bl	8001a0e <_fstat>
 800bbe2:	1c43      	adds	r3, r0, #1
 800bbe4:	d102      	bne.n	800bbec <_fstat_r+0x1c>
 800bbe6:	682b      	ldr	r3, [r5, #0]
 800bbe8:	b103      	cbz	r3, 800bbec <_fstat_r+0x1c>
 800bbea:	6023      	str	r3, [r4, #0]
 800bbec:	bd38      	pop	{r3, r4, r5, pc}
 800bbee:	bf00      	nop
 800bbf0:	200020bc 	.word	0x200020bc

0800bbf4 <_isatty_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d06      	ldr	r5, [pc, #24]	; (800bc10 <_isatty_r+0x1c>)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	602b      	str	r3, [r5, #0]
 800bc00:	f7f5 ff15 	bl	8001a2e <_isatty>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_isatty_r+0x1a>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_isatty_r+0x1a>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	200020bc 	.word	0x200020bc

0800bc14 <_lseek_r>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4d07      	ldr	r5, [pc, #28]	; (800bc34 <_lseek_r+0x20>)
 800bc18:	4604      	mov	r4, r0
 800bc1a:	4608      	mov	r0, r1
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	2200      	movs	r2, #0
 800bc20:	602a      	str	r2, [r5, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	f7f5 ff0e 	bl	8001a44 <_lseek>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d102      	bne.n	800bc32 <_lseek_r+0x1e>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	b103      	cbz	r3, 800bc32 <_lseek_r+0x1e>
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	200020bc 	.word	0x200020bc

0800bc38 <_read_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4d07      	ldr	r5, [pc, #28]	; (800bc58 <_read_r+0x20>)
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	4608      	mov	r0, r1
 800bc40:	4611      	mov	r1, r2
 800bc42:	2200      	movs	r2, #0
 800bc44:	602a      	str	r2, [r5, #0]
 800bc46:	461a      	mov	r2, r3
 800bc48:	f7f5 fe9c 	bl	8001984 <_read>
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d102      	bne.n	800bc56 <_read_r+0x1e>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	b103      	cbz	r3, 800bc56 <_read_r+0x1e>
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	200020bc 	.word	0x200020bc

0800bc5c <_init>:
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	bf00      	nop
 800bc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc62:	bc08      	pop	{r3}
 800bc64:	469e      	mov	lr, r3
 800bc66:	4770      	bx	lr

0800bc68 <_fini>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	bf00      	nop
 800bc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc6e:	bc08      	pop	{r3}
 800bc70:	469e      	mov	lr, r3
 800bc72:	4770      	bx	lr
